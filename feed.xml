<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sweetlittlebird.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sweetlittlebird.github.io/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-09-01T01:59:18+09:00</updated><id>https://sweetlittlebird.github.io/feed.xml</id><title type="html">Sweet Little Bird</title><subtitle>공부 기록과 개발 이야기를 담은 블로그입니다.</subtitle><entry><title type="html">[KANS 3기] 컨테이너 격리</title><link href="https://sweetlittlebird.github.io/posts/2024-08-27-KANS-Study-Week1/" rel="alternate" type="text/html" title="[KANS 3기] 컨테이너 격리" /><published>2024-08-27T22:50:18+09:00</published><updated>2024-08-27T22:50:18+09:00</updated><id>https://sweetlittlebird.github.io/posts/KANS%20Study%20-%20Week1</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-08-27-KANS-Study-Week1/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>지난 테라폼 스터디에 이어 이번 주 부터 KANS 스터디를 시작하게 되었습니다!
KANS는 <strong>K</strong>ubernetes <strong>A</strong>dvanced <strong>N</strong>etworking <strong>S</strong>tudy의 줄임말로 쿠버네티스 네트워킹에 대한 심도있게 공부하는 스터디입니다.
이번 스터디도 과제할 걱정도 :sweat: 되지만 재미있을것 같아 기대됩니다. :smile:</p>

<p>첫 주 스터디도 컨테이너 격리와 리눅스 네트워크에 대해 많은것을 배웠고 이 자리에 정리해보려고 합니다. 
이번 스터디도 다들 완주하기를 기도하며 스터디 정리를 시작해 보겠습니다.</p>

<h2 id="도커-소개">도커 소개</h2>

<h3 id="도커란-무엇인가">도커란 무엇인가?</h3>

<ul>
  <li>
    <p>도커(Docker)는 컨테이너(Container)라고 불리는 가상실행 환경을 제공하고, 
그 가상환경에서 유용한 어플리케이션을 실행할 수 있게 해주는 오픈소스 플랫폼입니다.</p>
  </li>
  <li>
    <p>컨테이너라는 이름의 기원
컨테이너라는 이름은 배에 화물을 실을때 사용하는 그 컨테이너에서 왔습니다.
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_1.png" alt="컨테이너선" />
과거에 컨테이너가 발명되기 이전에는 짐의 부피와 모양이 제각각이라서, 화물을 적재하기도 어렵고 
파도가 쳐서 배가 흔들릴때 짐이 이리 저리 움직여서 파손되는 경우가 많았습니다.</p>

    <p>이 문제를 해결하기 위해 Malcom McLean이라는 분이 발명한것이 직육면체의 바로 컨테이너입니다.<br />
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_2.png" alt="Shipping Container" />
직육면체이기 때문에 적재가 쉽고, 파도가 치더라도 안정적으로 화물을 운반할 수 있었습니다. 
또한 크고 작은 물건도 컨테이너 안에 넣어서 운반할 수 있어서 화물의 종류에 상관없이 효율적으로 운반할 수 있었습니다.</p>

    <p>이 개념을 컴퓨팅에 도입한것이 컨테이너입니다. 
기존에는 각 리눅스 버전마다, glibc냐 musl이냐, debian 기반이냐 redhat 기반이냐 등등 
프로그램을 배포할때 환경을 맞춰야 하는것이 많았습니다. 그 뿐만아니라 각종 라이브러리들도 설치해야 하고
심지어 프로그램 마다 필요한 라이브러리 버전이 다를때도 있었습니다.</p>

    <p>이러한 문제를 해결하기위해 도커라는 컨테이너를 이용한 가상화 기술이 등장하게 되었습니다.
도커 컨테이너 이미지에는 프로그램 실행에 필요한 모든것이 포함되어 있기 때문에
마치 컨테이너에 화물을 싣듯이 프로그램을 배포할 수 있게 되었습니다. 
도커의 로고가 컨테이너를 싣고 있는 배를 형상화한것도 이러한 의미에서 나온것입니다.</p>

    <p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_3.png" alt="Docker Logo" /></p>
  </li>
  <li>
    <p>컨테이너 이외에도 가상 머신(Virtual Machine)이라는 기술이 있습니다. 
가상 머신은 하이퍼바이저(Hypervisor)를 이용하여 호스트 OS 위에 게스트 OS를 올리는 방식으로 가상화를 구현합니다.
가상 머신은 게스트 OS를 올리기 때문에 무겁습니다. 
반면 컨테이너는 호스트 OS의 커널을 공유하기 때문에 가볍습니다.
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_4.png" alt="img.png" /></p>
  </li>
</ul>

<h3 id="컨테이너와-가상-머신">컨테이너와 가상 머신</h3>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_5.png" alt="가상머신과 컨테이너 비교" /></p>

<ul>
  <li>가상머신은 호스트 OS 위에 하이퍼바이저를 두고 하드웨어 일부(또는 전부)를 가상화하고, 그 위에 게스트 OS를 올립니다. 즉, <strong>하드웨어 레벨의 가상화</strong>를 지원합니다.</li>
  <li>컨테이너는 하드웨어 가상화와 게스트 OS 없이, 호스트의 리눅스 커널을 공유하여 바로 프로세스를 실행합니다. 단, 각종 라이브러리와 사용자 환경(User Land)는 컨테이너 단위로 패키징되어 <strong>OS 레벨의 가상화</strong>를 지원한다 할 수 있습니다.</li>
  <li>따라서 컨테이너는 가상머신보다 가볍고 빠르며, 낮은 격리(Weak Isolation) 수준을 가집니다.</li>
  <li>가상머신은 게스트 OS를 올리기 때문에 무겁고 느리지만, 높은 격리(Strong Isolation) 수준을 가집니다.
    <ul>
      <li>낮은 격리 수준을 보완하기 위해 리눅스의 pivot-root, namespace, cgroup 등의 기능들을 활용함으로써 프로세스 단위의 격리 환경과 리소스 제어를 제공합니다.
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_6.png" alt="img.png" /></li>
    </ul>
  </li>
</ul>

<h3 id="도커-아키텍쳐">도커 아키텍쳐</h3>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_7.png" alt="도커 아키텍쳐" />
<a href="https://docs.docker.com/get-started/overview/#docker-architecture">https://docs.docker.com/get-started/overview/#docker-architecture</a></p>

<hr />

<h2 id="도커-기본-사용">도커 기본 사용</h2>

<h3 id="도커-설치-및-확인">도커 설치 및 확인</h3>

<ul>
  <li>도커 설치
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 방법1. debian 계열 리눅스에서 패키지 매니저로 설치</span>
<span class="nv">$ </span><span class="nb">sudo </span>apt-get update
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> docker.io
  
<span class="c"># 방법2. 공식 사이트에서 설치</span>
<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nv">$ </span>curl <span class="nt">-fsSL</span> https://get.docker.com | sh
</code></pre></div>    </div>
  </li>
  <li>기본정보 확인
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 도커 정보 확인 : Client 와 Server , Storage Driver(overlay2), Cgroup Version(2), Default Runtime(runc)</span>
<span class="nv">$ </span><span class="nb">sudo </span>docker info
<span class="c">#    Client:</span>
<span class="c">#     Context:    default</span>
<span class="c">#     Debug Mode: false</span>
<span class="c">#    </span>
<span class="c">#    Server:</span>
<span class="c">#     Containers: 0</span>
<span class="c">#     ...</span>
<span class="c">#     Server Version: 20.10.25+dfsg1</span>
<span class="c">#     Storage Driver: overlay2</span>
<span class="c">#     ...</span>
<span class="c">#     Cgroup Driver: systemd</span>
<span class="c">#     Cgroup Version: 2</span>
<span class="c">#     ...</span>
<span class="c">#     containerd version: 1.6.24~ds1-2</span>
<span class="c">#     runc version: 1.1.12+ds1-5</span>
<span class="c">#     ...</span>
  
<span class="nv">$ </span><span class="nb">sudo </span>docker version
<span class="c"># =&gt; Client:</span>
<span class="c">#     Version:           20.10.25+dfsg1</span>
<span class="c">#     API version:       1.41</span>
<span class="c">#     Go version:        go1.22.3</span>
<span class="c">#     Git commit:        b82b9f3</span>
<span class="c">#     Built:             Tue May  7 10:33:18 2024</span>
<span class="c">#     OS/Arch:           linux/amd64</span>
<span class="c">#     Context:           default</span>
<span class="c">#     Experimental:      true</span>
<span class="c">#    </span>
<span class="c">#    Server:</span>
<span class="c">#     Engine:</span>
<span class="c">#      Version:          20.10.25+dfsg1</span>
<span class="c">#      API version:      1.41 (minimum version 1.12)</span>
<span class="c">#      Go version:       go1.22.3</span>
<span class="c">#      Git commit:       5df983c</span>
<span class="c">#      Built:            Tue May  7 10:33:18 2024</span>
<span class="c">#      OS/Arch:          linux/amd64</span>
<span class="c">#      Experimental:     false</span>
<span class="c">#    ...  </span>
  
<span class="c"># 도커 서비스 상태 확인</span>
<span class="nv">$ </span><span class="nb">sudo </span>systemctl status docker <span class="nt">-l</span> <span class="nt">--no-pager</span>
  
<span class="c"># 모든 서비스의 상태 표시</span>
<span class="nv">$ </span>systemctl list-units <span class="nt">--type</span><span class="o">=</span>service
  
<span class="c"># 도커 루트 디렉터리 확인 : Docker Root Dir(/var/lib/docker)</span>
<span class="nv">$ </span><span class="nb">sudo </span>tree <span class="nt">-L</span> 3 /var/lib/docker
<span class="c"># =&gt; /var/lib/docker</span>
<span class="c">#    |-- buildkit</span>
<span class="c">#    |   ...</span>
<span class="c">#    |-- containers</span>
<span class="c">#    |-- image</span>
<span class="c">#    |   `-- overlay2</span>
<span class="c">#    |       |-- distribution</span>
<span class="c">#    |       |-- imagedb</span>
<span class="c">#    |       |-- layerdb</span>
<span class="c">#    |       `-- repositories.json</span>
<span class="c">#    |-- network</span>
<span class="c">#    |   `-- files</span>
<span class="c">#    |       `-- local-kv.db</span>
<span class="c">#    |-- overlay2</span>
<span class="c">#    |   ...</span>
<span class="c">#    `-- volumes</span>
<span class="c">#        |-- backingFsBlockDev</span>
<span class="c">#        `-- metadata.db</span>
<span class="c">#    </span>
<span class="c">#    24 directories, 8 files</span>
</code></pre></div>    </div>
  </li>
  <li>네트워크 정보 확인
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 프로세스 확인 - 셸변수</span>
<span class="nv">$ </span>ps <span class="nt">-ef</span>      <span class="c"># 프로세스 목록 보기</span>
<span class="nv">$ </span>pstree <span class="nt">-p</span>   <span class="c"># 프로세스 트리로 보기</span>
  
<span class="nv">$ </span><span class="nb">df</span> <span class="nt">-hT</span>    <span class="c"># 디스크 사용량 확인</span>

<span class="c"># 네트워크 정보 확인. 도커에서 사용하는 docker0 네트워크가 추가되어있고 현재 DOWN 상태입니다.</span>
<span class="c"># 컨테이너가 있으면 UP 상태로 변경됩니다.  </span>
<span class="nv">$ </span>ip <span class="nt">-br</span> <span class="nt">-c</span> addr
<span class="c"># =&gt; &lt;span style="color:teal;"&gt;lo               &lt;/span&gt;UNKNOWN        &lt;span style="color:purple;"&gt;127.0.0.1&lt;/span&gt;/8 &lt;span style="color:blue;"&gt;::1&lt;/span&gt;/128 </span>
<span class="c">#    &lt;span style="color:teal;"&gt;eth0             &lt;/span&gt;&lt;span style="color:green;"&gt;UP             &lt;/span&gt;&lt;span style="color:purple;"&gt;10.10.10.109&lt;/span&gt;/24 &lt;span style="color:purple;"&gt;10.10.10.51&lt;/span&gt;/24 &lt;span style="color:blue;"&gt;fe80::a70d:8639:be6:671e&lt;/span&gt;/64</span>
<span class="c">#    &lt;span style="color:teal;"&gt;docker0          &lt;/span&gt;&lt;span style="color:red;"&gt;DOWN           &lt;/span&gt;&lt;span style="color:purple;"&gt;172.17.0.1&lt;/span&gt;/16 &lt;span style="color:blue;"&gt;fe80::42:57ff:fe56:997c&lt;/span&gt;/64</span>
<span class="nv">$ </span>ip <span class="nt">-c</span> addr
<span class="nv">$ </span>ip <span class="nt">-c</span> <span class="nb">link</span>
<span class="nv">$ </span>ip <span class="nt">-br</span> <span class="nt">-c</span> <span class="nb">link</span>
<span class="nv">$ </span>ip <span class="nt">-c</span> route
  
<span class="c"># 이더넷 브릿지 정보 확인</span>
<span class="nv">$ </span>brctl show
<span class="c"># =&gt; bridge name	bridge id		STP enabled	interfaces</span>
<span class="c">#    docker0		8000.02425756997c	no</span>
  
<span class="c"># iptables 정책 확인</span>
<span class="c"># FORWARD 정책이 DROP으로 설정되어 있고, </span>
<span class="c"># docker0에서 docker0 혹은 외부로 전달되는 패킷은 허용되어 있습니다.</span>
<span class="nv">$ </span><span class="nb">sudo </span>iptables <span class="nt">-t</span> filter <span class="nt">-S</span>
<span class="c"># =&gt; -P INPUT ACCEPT</span>
<span class="c">#    &lt;span style="color: red;"&gt;-P FORWARD DROP&lt;/span&gt;</span>
<span class="c">#    -P OUTPUT ACCEPT</span>
<span class="c">#    -N DOCKER</span>
<span class="c">#    -N DOCKER-ISOLATION-STAGE-1</span>
<span class="c">#    -N DOCKER-ISOLATION-STAGE-2</span>
<span class="c">#    -N DOCKER-USER</span>
<span class="c">#    -A FORWARD -j DOCKER-USER</span>
<span class="c">#    -A FORWARD -j DOCKER-ISOLATION-STAGE-1</span>
<span class="c">#    -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span>
<span class="c">#    -A FORWARD -o docker0 -j DOCKER</span>
<span class="c">#    &lt;span style="color: red;"&gt;-A FORWARD -i docker0 ! -o docker0 -j ACCEPT&lt;/span&gt;</span>
<span class="c">#    &lt;span style="color: red;"&gt;-A FORWARD -i docker0 -o docker0 -j ACCEPT&lt;/span&gt;</span>
<span class="c">#    -A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2</span>
<span class="c">#    -A DOCKER-ISOLATION-STAGE-1 -j RETURN</span>
<span class="c">#    -A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP</span>
<span class="c">#    -A DOCKER-ISOLATION-STAGE-2 -j RETURN</span>
<span class="c">#    -A DOCKER-USER -j RETURN</span>

<span class="c"># NAT POSTROUTING에 172.17.0.0/16에서 외부로 전달시 MASQUERADE (SNAT) 정책이 설정되어 있습니다.</span>
<span class="nv">$ </span><span class="nb">sudo </span>iptables <span class="nt">-t</span> nat <span class="nt">-S</span>
<span class="c"># =&gt; -P PREROUTING ACCEPT</span>
<span class="c">#    -P INPUT ACCEPT</span>
<span class="c">#    -P OUTPUT ACCEPT</span>
<span class="c">#    -P POSTROUTING ACCEPT</span>
<span class="c">#    -N DOCKER</span>
<span class="c">#    -A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER</span>
<span class="c">#    -A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER</span>
<span class="c">#    &lt;span style="color: red;"&gt;-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE&lt;/span&gt;</span>
<span class="c">#    -A DOCKER -i docker0 -j RETURN</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="도커를-비-root-유저로-관리하기">도커를 비 root 유저로 관리하기</h3>

<p>도커는 기본적으로 root로 관리할 수 있습니다. 
root가 아닌 유저로 docker 명령을 실행하면 다음과 같은 에러가 발생합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">whoami</span>
<span class="c"># =&gt; kali</span>

<span class="nv">$ </span>docker info
<span class="c"># =&gt; ...</span>
<span class="c">#    Server:</span>
<span class="c">#    ERROR: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &amp;quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/info&amp;quot;: dial unix /var/run/docker.sock: connect: permission denied</span>
</code></pre></div></div>

<p>하지만, 다음의 방법 처럼 현재 사용자를 docker 그룹에 추가하면, root가 아닌 일반 유저로도 관리할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">whoami</span> 
<span class="c"># =&gt; kali</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$USER</span>
<span class="c"># =&gt; kali</span>

<span class="c"># 도커 그룹 추가</span>
<span class="nv">$ </span><span class="nb">sudo </span>usermod <span class="nt">-aG</span> docker <span class="nv">$USER</span>

<span class="c"># 그룹 확인</span>
<span class="nv">$ </span><span class="nb">groups</span> 
<span class="c"># =&gt; adm ... kaboxer</span>

<span class="c"># 로그아웃</span>
<span class="nb">exit</span> 

<span class="c"># ssh 재접속 후 확인</span>
<span class="nv">$ </span><span class="nb">groups</span> 
<span class="c"># =&gt; adm ... kaboxer docker</span>

<span class="nv">$ </span>docker info
<span class="c"># =&gt; Client:</span>
<span class="c">#     Context:    default</span>
<span class="c">#     Debug Mode: false</span>
<span class="c">#    </span>
<span class="c">#    Server:</span>
<span class="c">#     Containers: 0</span>
<span class="c">#     ...</span>
<span class="c">#     Cgroup Version: 2</span>
<span class="c">#     ...</span>
<span class="c">#     Default Runtime: runc</span>
<span class="c">#     Init Binary: docker-init</span>
<span class="c">#     containerd version: 1.6.24~ds1-2</span>
<span class="c">#     runc version: 1.1.12+ds1-5</span>
<span class="c">#     ...    </span>

<span class="c"># 컨테이너 확인</span>
<span class="nv">$ </span>docker run <span class="nt">--rm</span> hello-world
<span class="c"># =&gt; Hello from Docker!</span>
<span class="c">#    This message shows that your installation appears to be working correctly.</span>
<span class="c">#    ...</span>

<span class="c"># 실행중인 도커 컨테이너 확인</span>
<span class="nv">$ </span>docker ps
<span class="c"># 전체 도커 컨테이너 확인</span>
<span class="nv">$ </span>docker ps <span class="nt">-a</span>
<span class="c"># 이미지 목록 확인</span>
<span class="nv">$ </span>docker images
<span class="c"># =&gt; REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span>
<span class="c">#    hello-world   latest    d2c94e258dcb   16 months ago   13.3kB</span>

<span class="c"># 도커 컨테이너 삭제</span>
<span class="nv">$ </span>docker ps <span class="nt">-aq</span>
<span class="nv">$ </span>docker <span class="nb">rm</span> <span class="nt">-f</span> <span class="si">$(</span>docker ps <span class="nt">-aq</span><span class="si">)</span>
<span class="nv">$ </span>docker ps <span class="nt">-a</span>
</code></pre></div></div>

<h3 id="컨테이너가-host의-docker-socket-file-공유로-도커-실행">컨테이너가 host의 docker socket file 공유로 도커 실행</h3>

<ul>
  <li>
    <p>도커 컨테이너를 GUI로 관리할 수 있는 툴인 <a href="https://www.portainer.io/">portainer</a>처럼 도커 컨테이너가 호스트의 도커 소켓 파일을 공유하여 도커를 관리하는데 사용 할 수 있습니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 도커 컨테이너 실행</span>
<span class="nv">$ </span>docker run <span class="nt">-d</span> <span class="nt">-p</span> 9000:9000 <span class="nt">-v</span> /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce
<span class="nv">$ </span>docker ps
<span class="c"># =&gt; CONTAINER ID   IMAGE                    COMMAND        CREATED         STATUS         PORTS                                                           NAMES</span>
<span class="c">#    1495728fd014   portainer/portainer-ce   &amp;quot;/portainer&amp;quot;   2 minutes ago   Up 2 minutes   8000/tcp, 9443/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp, :::9000-&amp;gt;9000/tcp   wizardly_ride</span>
  
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">-v</code> 옵션으로 호스트의 도커 소켓 파일을 컨테이너의 도커 소켓 파일로 공유하면 아래와 같이 도커 컨테이너에서 호스트의 도커를 관리할 수 있습니다.</p>

    <p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_8.png" alt="소켓 공유를 통해 portainer 사용" /></p>
  </li>
  <li>
    <p>또한 Jenkins 같은 CI/CD 툴을 사용할때도 도커 소켓 파일을 공유하여 도커 기반 워커를 사용할 수도 있습니다.</p>
  </li>
</ul>

<h3 id="cpu-아키텍쳐">CPU 아키텍쳐</h3>

<ul>
  <li>도커 허브에 등록된 이미지들은 CPU 아키텍쳐별로 이미지를 제공하는데, <strong>호스트의 CPU 아키텍쳐와 다른 이미지는 동작할 수 없습니다.</strong></li>
  <li>아래와 같이 docker hub에서는 지원 CPU 아키텍쳐별로 필터링하는 기능을 제공하니, 특정 아키텍쳐의 이미지가 필요한 경우 사용할 수 있습니다.
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_9.png" alt="img.png" /></li>
  <li>또한 도커이미지 페이지의 Tags 탭에서 태그의 지원하는 아키텍쳐를 확인할 수 있습니다.
<img src="../../../assets/2024/kans-3th/w1/20240831_kans_w1_10.png" alt="20240831_kans_w1_10.png" /></li>
  <li>현재 리눅스의 CPU 아키텍쳐를 확인 해보겠습니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>lscpu
<span class="c"># =&gt; Architecture:                       x86_64</span>
<span class="c">#    CPU op-mode(s):                     32-bit, 64-bit</span>
<span class="c">#    ...</span>
</code></pre></div>    </div>
    <p>사용중인 CPU 아키텍쳐는 x86_64 입니다.</p>
  </li>
  <li>현재 CPU 아키텍쳐와는 다른 아키텍쳐의 이미지를 설치해서 실패하는것을 확인해 보겠습니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># arm64 실행 실패</span>
<span class="nv">$ </span>docker run <span class="nt">--rm</span> <span class="nt">-it</span> arm64v8/ubuntu bash
<span class="c"># =&gt; WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested</span>
<span class="c">#    exec /usr/bin/bash: exec format error</span>
  
<span class="c"># riscv64 실행 실패</span>
<span class="nv">$ </span>docker run <span class="nt">--rm</span> <span class="nt">-it</span> riscv64/ubuntu bash
<span class="c"># =&gt; WARNING: The requested image's platform (linux/riscv64) does not match the detected host platform (linux/amd64) and no specific platform was requested</span>
<span class="c">#    exec /usr/bin/bash: exec format error</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h2 id="컨테이너-격리">컨테이너 격리</h2>

<ul>
  <li>docker는 리눅스의 프로세스 격리 기술을 활용하는데, 프로세스 격리 기술은 chroot에서 부터 cgroup, namespace 등을 거쳐 발전하고 있습니다.</li>
  <li>주요 격리 기술들을 실습해보며 이해해보겠습니다.
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_11.png" alt="img.png" />
<a href="https://speakerdeck.com/kakao/ige-dwaeyo-dokeo-eobsi-keonteineo-mandeulgi?slide=200">https://speakerdeck.com/kakao/ige-dwaeyo-dokeo-eobsi-keonteineo-mandeulgi?slide=200</a></li>
</ul>

<h3 id="chroot">chroot</h3>

<ul>
  <li>chroot는 리눅스의 프로세스 격리 기술 중 하나로, 프로세스가 접근할 수 있는 파일 시스템의 루트 디렉터리를 변경하는 기술입니다.</li>
  <li>1979년에 처음 등장했으며, 한계가 뚜렷하지만 다양한 목적으로 현재도 현역으로 사용되고 있습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 관리자 전환</span>
<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nv">$ </span><span class="nb">whoami</span>
<span class="c"># =&gt; root</span>

<span class="nv">$ </span><span class="nb">cd</span> /tmp
<span class="nv">$ </span><span class="nb">mkdir </span>myroot

<span class="c"># chroot 실행 (chroot [새 루트] [명령])</span>
<span class="nv">$ </span><span class="nb">chroot </span>myroot /bin/bash
<span class="c"># =&gt; chroot: failed to run command ‘/bin/bash’: No such file or directory</span>
</code></pre></div></div>

<ul>
  <li>/tmp/myroot 로 chroot하려니 bash가 없어서 실행이 되지 않습니다. bash를 복사해 넣어보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># bash를 실행하는데 필요한 라이브러리를 확인하겠습니다.</span>
<span class="nv">$ </span>ldd /bin/bash
<span class="c"># =&gt; linux-vdso.so.1 (0x00007fffecfa8000)</span>
<span class="c">#    libtinfo.so.6 =&gt; /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007fbfe6a4f000)</span>
<span class="c">#    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbfe686a000)</span>
<span class="c">#    /lib64/ld-linux-x86-64.so.2 (0x00007fbfe6be0000)</span>

<span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> myroot/bin
<span class="nv">$ </span><span class="nb">cp</span> /bin/bash myroot/bin
<span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> myroot/<span class="o">{</span>lib64,lib/x86_64-linux-gnu<span class="o">}</span>
<span class="nv">$ </span><span class="nb">cp</span> /lib/x86_64-linux-gnu/libtinfo.so.6 myroot/lib/x86_64-linux-gnu
<span class="nv">$ </span><span class="nb">cp</span> /lib/x86_64-linux-gnu/libc.so.6 myroot/lib/x86_64-linux-gnu
<span class="nv">$ </span><span class="nb">cp</span> /lib64/ld-linux-x86-64.so.2 myroot/lib64
<span class="nv">$ </span>tree myroot
<span class="c"># =&gt; myroot</span>
<span class="c">#    |-- bin</span>
<span class="c">#    |   `-- bash</span>
<span class="c">#    |-- lib</span>
<span class="c">#    |   `-- x86_64-linux-gnu</span>
<span class="c">#    |       |-- libc.so.6</span>
<span class="c">#    |       `-- libtinfo.so.6</span>
<span class="c">#    `-- lib64</span>
<span class="c">#        `-- ld-linux-x86-64.so.2</span>
<span class="c">#    </span>
<span class="c">#    5 directories, 4 files</span>

<span class="nv">$ </span><span class="nb">chroot </span>myroot /bin/bash
<span class="c"># =&gt; bash-5.2# </span>
<span class="c"># bash와 bash에 필요한 라이브러리를 넣어주니 chroot로 실행할 수 있게 되었습니다.</span>
<span class="c"># ls를 실행해보겠습니다.</span>
<span class="nv">$ </span><span class="nb">ls</span>
<span class="c"># =&gt; bash: ls: command not found</span>
<span class="c"># ls가 없어서 실행이 되지 않습니다. ls를 넣기위해 chroot에서 나오겠습니다.</span>
<span class="nv">$ </span><span class="nb">exit</span>

<span class="c"># ls 위치 확인</span>
<span class="nv">$ </span>whereis <span class="nb">ls</span>
<span class="c"># =&gt; ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz</span>
<span class="nv">$ </span>ldd /usr/bin/ls
<span class="c"># ldd로 확인된 라이브러리를 포함해 ls를 myroot에 넣어보겠습니다.</span>
<span class="nv">$ </span><span class="nb">cp</span> /usr/bin/ls myroot/bin
<span class="nv">$ </span><span class="nb">cp</span> /lib/x86_64-linux-gnu/libselinux.so.1 myroot/lib/x86_64-linux-gnu
<span class="nv">$ </span><span class="nb">cp</span> /lib/x86_64-linux-gnu/libpcre2-8.so.0 myroot/lib/x86_64-linux-gnu

<span class="nv">$ </span><span class="nb">chroot </span>myroot /bin/bash
<span class="c"># ls시 /tmp/myroot에 있는 파일들을 확인할 수 있습니다.</span>
<span class="nv">$ </span><span class="nb">ls</span>
<span class="c"># =&gt; bin  lib  lib64</span>
<span class="c"># 현재 디렉터리 확인시 / 로 되어있습니다. 이 처럼 chroot로 인해 루트 디렉터리가 변경되었습니다. </span>
<span class="nv">$ </span><span class="nb">pwd</span>
<span class="c"># =&gt; /</span>
<span class="nv">$ </span><span class="nb">cd</span> ../../..
<span class="nv">$ </span><span class="nb">ls</span>
<span class="c"># =&gt; bin lib lib64</span>

<span class="c"># chroot를 종료 합니다.</span>
<span class="nv">$ </span><span class="nb">exit</span>
</code></pre></div></div>

<ul>
  <li>이 작업을 반복하면 거의 모든 프로그램을 chroot로 실행할 수 있습니다. 하지만 /proc, /dev 등의 가상 디렉터리는 다음의 방법으로 넣어주어야 합니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 다음 동작은 chroot 밖의 호스트에서 실행해야 합니다.</span>
<span class="c"># mount 할 디렉터리 만들어주기</span>
<span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> myroot/<span class="o">{</span>proc,dev<span class="o">}</span>

<span class="c"># /proc, /dev 마운트</span>
<span class="nv">$ </span>mount <span class="nt">-t</span> proc none myroot/proc
<span class="nv">$ </span>mount <span class="nt">-o</span> <span class="nb">bind</span> /dev myroot/dev

<span class="c"># /proc 확인을 위해 ps도 chroot 환경에 넣어보겠습니다.</span>
<span class="nv">$ </span><span class="nb">cp</span> /usr/bin/ps myroot/bin
<span class="nv">$ </span><span class="nb">cp</span> /lib/x86_64-linux-gnu/<span class="o">{</span>libproc2.so.0,libc.so.6,libsystemd.so.0,libcap.so.2,libgcrypt.so.20,liblz4.so.1,liblzma.so.5,libzstd.so.1,libgpg-error.so.0<span class="o">}</span> myroot/lib/x86_64-linux-gnu/ 
<span class="nv">$ </span><span class="nb">cp</span> /lib64/ld-linux-x86-64.so.2 myroot/lib64/ 

<span class="nv">$ </span><span class="nb">chroot </span>myroot /bin/bash
<span class="nv">$ </span><span class="nb">ls</span> /proc
<span class="nv">$ </span>ps
<span class="c"># =&gt;    PID TTY          TIME CMD</span>
<span class="c">#    729517 ?        00:00:00 sudo</span>
<span class="c">#    741301 ?        00:00:00 bash</span>
<span class="c">#    741310 ?        00:00:00 ps</span>

<span class="c"># chroot 종료</span>
<span class="nv">$ </span><span class="nb">exit</span>

<span class="c"># 마운트 해제</span>
<span class="nv">$ </span>mount <span class="nt">-t</span> proc
<span class="c"># =&gt; proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)</span>
<span class="c">#    none on /tmp/myroot/proc type proc (rw,relatime)</span>
<span class="nv">$ </span>umount myroot/proc
<span class="nv">$ </span>umount myroot/dev
<span class="nv">$ </span>mount <span class="nt">-t</span> proc
<span class="c"># =&gt; proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)</span>
</code></pre></div></div>

<ul>
  <li>도커 컨테이너 이미지를 추출하여 chroot로 실행해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>nginx-root

<span class="c"># nginx 컨테이너 이미지에서 파일들을 추출하여 nginx-root에 넣어줍니다.</span>
<span class="nv">$ </span>docker <span class="nb">export</span> <span class="si">$(</span>docker create nginx<span class="si">)</span> | <span class="nb">tar</span> <span class="nt">-C</span> nginx-root <span class="nt">-xvf</span> -
<span class="nv">$ </span>docker images

<span class="nv">$ </span>tree <span class="nt">-L</span> 2 nginx-root

<span class="c"># chroot로 nginx-root를 루트 디렉터리로 변경합니다.</span>
<span class="nv">$ </span><span class="nb">chroot </span>nginx-root /bin/bash
<span class="c"># nginx를 실행해봅니다.</span>
<span class="nv">$ </span>nginx <span class="nt">-g</span> <span class="s1">'daemon off;'</span>

<span class="c"># [터미널2] 터미널을 하나더 열고 nginx 동작 여부를 확인합니다.</span>
<span class="nv">$ </span>ps <span class="nt">-f</span> <span class="nt">-C</span> nginx
<span class="nv">$ </span>curl localhost
</code></pre></div></div>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_12.png" alt="img.png" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 생성된 docker 컨테이너를 확인합니다. docker create nginx로 인해 컨테이너가 생겨져있습니다.</span>
<span class="nv">$ </span>docker ps <span class="nt">-a</span>
<span class="c"># =&gt; CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS    PORTS     NAMES</span>
<span class="c">#    0b506af00006   nginx     "/docker-entrypoint.…"   About a minute ago   Created             gifted_rosalind</span>

<span class="c"># 사용하지 않는 도커이미지를 지워줍니다.</span>
<span class="nv">$ </span>docker <span class="nb">rm </span>0b5
</code></pre></div></div>

<ul>
  <li>아쉽게도 chroot는 탈옥이 가능하다고 합니다. 다음 코드를 컴파일하여 탈옥을 시도해보겠습니다.</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;sys/stat.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">mkdir</span><span class="p">(</span><span class="s">".out"</span><span class="p">,</span> <span class="mo">0755</span><span class="p">);</span>
  <span class="n">chroot</span><span class="p">(</span><span class="s">".out"</span><span class="p">);</span>
  <span class="n">chdir</span><span class="p">(</span><span class="s">"../../../../../"</span><span class="p">);</span>
  <span class="n">chroot</span><span class="p">(</span><span class="s">"."</span><span class="p">);</span>

  <span class="k">return</span> <span class="n">execl</span><span class="p">(</span><span class="s">"/bin/sh"</span><span class="p">,</span> <span class="s">"-i"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 컴파일</span>
<span class="nv">$ </span>gcc <span class="nt">-o</span> myroot/escape_chroot escape_chroot.c
<span class="nv">$ </span>file myroot/escape_chroot
<span class="c"># =&gt; myroot/escape_chroot: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=5a40e26463d1015f870c7f1b9db9be159727c250, for GNU/Linux 3.2.0, not stripped</span>

<span class="c"># chroot 실행</span>
<span class="nv">$ </span><span class="nb">chroot </span>myroot /bin/bash
<span class="nv">$ </span><span class="nb">ls</span>
<span class="nv">$ </span><span class="nb">cd</span> ../../
<span class="nv">$ </span><span class="nb">cd</span> ../../
<span class="nv">$ </span><span class="nb">ls</span>
<span class="c"># 일반적인 방법으로는 myroot에서 벗어날 수 없었습니다.</span>

<span class="c"># escape_chroot 실행해서 탈옥해보겠습니다.</span>
<span class="nv">$ </span>./escape_chroot
<span class="nv">$ </span><span class="nb">ls</span> /
<span class="c"># 탈옥이 잘 되었습니다.</span>

<span class="c"># 종료</span>
<span class="nv">$ </span><span class="nb">exit</span>
<span class="nv">$ </span><span class="nb">exit</span>
</code></pre></div></div>

<h3 id="마운트-네임스페이스--pivot_root">마운트 네임스페이스 + pivot_root</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pivot_root</code>는 루트 파일 시스템을 변경하는 시스템 콜로, 루트 디렉터리를 변경하는 chroot와 달리 루트 파일 시스템을 별도의 디렉터리로 이동시킬 수 있습니다.</li>
  <li>아래의 그림에서 처럼 /tmp/new_root가 있고 /tmp/new_root/put_old 디렉터리가 있는 경우, <code class="language-plaintext highlighter-rouge">pivot_root /tmp/new_root /tmp_new_root/put_old</code>를 하면 
/tmp/new_root가 루트 디렉터리로 변경되고, 원래의 루트 /는 /tmp/new_root/put_old로 이동됩니다.</li>
</ul>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_13.png" alt="img.png" />
<a href="https://speakerdeck.com/kakao/ige-dwaeyo-dokeo-eobsi-keonteineo-mandeulgi?slide=80">https://speakerdeck.com/kakao/ige-dwaeyo-dokeo-eobsi-keonteineo-mandeulgi?slide=80</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pivot_root</code>를 사용하려면 <code class="language-plaintext highlighter-rouge">unshare</code> 명령을 통해 마운트 네임스페이스를 만들어야 합니다. 마운트 네임스페이스는 리눅스 커널에서 제공하는 기능으로, 프로세스가 마운트 정보를 독립적으로 가질 수 있게 해줍니다.</li>
  <li>또한 다음과 같은 제약사항이 적용 됩니다.
    <ul>
      <li>new_root와 put_old가 디렉터리여야 한다.</li>
      <li>new_root와 put_old가 현재 루트와 같은 마운트 상에 있어선 안 된다.</li>
      <li>put_old가 new_root와 같거나 그 아래에 있어야 한다. 즉, put_old가 가리키는 경로명 앞에 “/..”를 0개 이상 붙여서 new_root와 같은 디렉터리가 나와야 한다.</li>
      <li>new_root가 마운트 지점의 경로여야 하되, “/”일 수 없다. 마운트 지점이 아닌 경우에는 그 경로를 스스로에게 바인드 마운트 해서 마운트 지점으로 바꿀 수 있다.</li>
      <li>new_root의 부모 마운트 및 현재 작업 디렉터리의 부모 마운트의 전파 유형이 MS_SHARED여선 안 된다. 마찬가지로 put_old가 기존 마운트 지점인 경우 그 전파 유형이 MS_SHARED여선 안 된다. 이 제약은 pivot_root()로 인해 다른 마운트 네임스페이스로 어떤 변화도 전파되지 않게 한다.</li>
      <li>현재 루트 디렉터리가 마운트 지점이어야 한다.</li>
    </ul>
  </li>
  <li>실습을 통해 마운트 네임스페이스와 pivot_root를 알아보겠습니다.</li>
</ul>

<h4 id="실습">실습</h4>

<ul>
  <li>먼저 pivot_root로 root 디렉터리로 만들 /tmp/new_root를 만들어보겠습니다.</li>
  <li>위의 제약사항 중 new_root와 put_old가 현재 루트와 같은 마운트 상에 있어서는 안 되기 때문에 new_root를 tmpfs 로 마운트 하겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir</span> /tmp/new_root
<span class="c"># 마운트</span>
<span class="nv">$ </span>mount <span class="nt">-t</span> tmpfs tmpfs /tmp/new_root 
<span class="c"># 기존 루트를 이동시킬 /tmp/new_root/put_old 디렉터리를 만들기</span>
<span class="nv">$ </span><span class="nb">mkdir</span> /tmp/new_root/put_old
<span class="c"># /bin, /lib, /lib64 등 chroot 실습때 사용했던 /tmp/myroot를 /tmp/new_root 로 복사해서 재사용합니다.</span>
<span class="nv">$ </span><span class="nb">cp</span> <span class="nt">-rv</span> /tmp/myroot/<span class="k">*</span> /tmp/new_root 

<span class="nv">$ </span>mount <span class="nt">-t</span> proc proc /tmp/new_root/proc

<span class="c"># unshare 해서 마운트 네임스페이스를 만들어줍니다.</span>
<span class="nv">$ </span>unshare <span class="nt">--mount</span> /bin/bash 

<span class="nv">$ </span><span class="nb">cd</span> /tmp/new_root

<span class="c"># pivot_root를 실행</span>
<span class="nv">$ </span>pivot_root <span class="nb">.</span> put_old

<span class="c"># 새로운 루트로 이동되었습니다.</span>

<span class="c"># 새 루트 확인</span>
<span class="nv">$ </span><span class="nb">ls</span> / 
<span class="c"># =&gt; bin  dev  escape_chroot  lib  lib64  proc  put_old</span>

<span class="c"># 기존 루트 확인</span>
<span class="nv">$ </span><span class="nb">ls</span> /put_old
<span class="c"># =&gt; bin   dev  home        lib32  lost+found   mnt     proc  run   srv	  sys       usr  vmlinuz</span>
<span class="c">#    boot  etc  initrd.img  lib	   lib64        media   opt   root  sbin  swapfile  tmp  var  </span>
</code></pre></div></div>

<ul>
  <li>새로운 루트로 이동되었지만, 기존 루트에 있는 파일들을 삭제하거나 이동하지 않았기 때문에 /put_old로 기존 루트에 있는 파일들을 확인할 수 있습니다.</li>
  <li>하지만 umount를 사용하면 /put_old와 기존 루트의 연결을 끊어서 기존 루트를 숨길 수 있습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>umount <span class="nt">-l</span> /put_old

<span class="nv">$ </span><span class="nb">ls</span> /put_old
<span class="c"># =&gt; (공백)</span>
</code></pre></div></div>

<ul>
  <li>escape_root를 통해 탈옥을 시도해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 탈옥 시도</span>
<span class="nv">$ </span>/escape_chroot
<span class="nv">$ </span><span class="nb">ls</span> /
<span class="c"># =&gt; bin  dev  escape_chroot  lib  lib64  proc  put_old</span>
<span class="nv">$ </span><span class="nb">cd</span> ../../..
<span class="nv">$ </span>/escape_chroot
<span class="nv">$ </span><span class="nb">ls</span> /
<span class="c"># =&gt; bin  dev  escape_chroot  lib  lib64  proc  put_old</span>
</code></pre></div></div>

<ul>
  <li>chroot와 달리 pivot_root는 탈옥이 불가능하고 훨씬 안전한것 같습니다.</li>
</ul>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_14.png" alt="img.png" /></p>

<h3 id="네임스페이스-namespace">네임스페이스 (namespace)</h3>

<ul>
  <li>여기에서의 네임스페이스는 쿠버네티스 등의 네임스페이스와는 다른,
리눅스 커널에서 제공하는 프로세스 격리 기술로, 프로세스가 각종 자원을 격리하여 사용할 수 있게 해줍니다.</li>
  <li>주요 네임스페이스의 유형은 아래와 같습니다.
    <ul>
      <li>Mount Namespace (2002년 도입)
        <ul>
          <li>pivot_root 예제에서 처럼 마운트 정보를 격리합니다.</li>
          <li>즉, 서로 다른 네임스페이스가 독립적으로 파일 시스템을 마운트 할 수 있습니다.</li>
        </ul>
      </li>
      <li>UTS Namespace (2006년 도입)
        <ul>
          <li>호스트 이름과 NIS 도메인 이름을 격리합니다. 각 네임스페이스는 자체 호스트 이름과 NIS 도메인 이름을 가질 수 있고,
이를 통해 호스트 이름을 변경하더라도 다른 네임스페이스에 영향을 주지 않습니다.</li>
        </ul>
      </li>
      <li>IPC Namespace (2006년 도입)
        <ul>
          <li>POSIX 메시지 큐, 세마포어, 공유 메모리 같은 IPC 리소스를 격리합니다.</li>
          <li>이를 통해 서로 다른 네임스페이스는 독립적으로 System V IPC 객체와 POSIX 메시지 큐를 사용할 수 있습니다.</li>
        </ul>
      </li>
      <li>PID Namespace (2008년 도입)
        <ul>
          <li>프로세스 ID를 격리합니다. 각 네임스페이스는 자체 PID를 가질 수 있으며 자체적인 PID 1을 가질 수 있습니다.</li>
          <li>프로세스 ID가 1인것은 시스템 시작시에 최초로 실행된 것이며 이를 init 프로세스라고 합니다. 이 프로세스가 종료되면 
시스템이 종료되거나 다시 부팅됩니다. 도커 컨테이너 실행시 실행되는 프로그램이 PID가 1이고, 해당 프로그램이 종료되며 
컨테이너도 종료되는게 이때문입니다.</li>
        </ul>
      </li>
      <li>Network Namespace (2009년 도입)
        <ul>
          <li>네트워크 인터페이스, IP 주소, 라우팅 테이블, 방화벽 규칙 등 네트워크 리소스를 격리합니다.</li>
          <li>각 네임스페이스는 자체 네트워크 인터페이스, IP 주소, 라우팅 테이블, 방화벽 규칙을 가질 수 있습니다.</li>
        </ul>
      </li>
      <li>USER Namespace (2012년 도입)
        <ul>
          <li>사용자 ID와 그룹 ID를 격리합니다. 각 네임스페이스는 자체 사용자 ID와 그룹 ID를 가질 수 있습니다.</li>
          <li>이를 통해 root 권한을 가진 사용자도 일반 사용자로 격리하여 사용할 수 있고, 일반 사용자도 root 인것 처럼 보이게 할 수 있습니다.</li>
          <li>실행 중인 도커컨테이너에서는 ps로 확인시 root로 실행 중인데, 호스트에서 ps로 확인시 일반 사용자로 실행 중인것 처럼 보이는것도 이것 때문입니다.</li>
        </ul>
      </li>
      <li>CGROUP Namespace (2016년 도입)
        <ul>
          <li>CGROUP은 프로세스의 그룹으로 CPU, 메모리, 디스크 I/O, 네트워크 등의 자원을 제한하거나 할당할 수 있습니다.</li>
          <li>CGROUP Namespace는 CPU, 메모리 등의 자원을 제한하거나 할당할 수 있는 CGROUP을 격리하는 기능입니다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="cgroup-를-이용한-자원관리">cgroup 를 이용한 자원관리</h3>

<ul>
  <li>cgroups는 control groups의 줄일말로 리눅스 커널에서 제공하는 자원 제한 및 할당 기능으로, CPU, 메모리, 디스크 I/O, 네트워크 등의 자원을 제한하거나 할당할 수 있습니다.</li>
  <li>프로세스는 실행중인 프로그램의 인스턴스를 의미하며, OS에서는 프로세스를 관리하기 위해 프로세스 ID(PID)를 사용합니다.</li>
  <li>cgroups는 프로세스를 그룹으로 묶어서 자원을 제한하거나 할당할 수 있습니다.</li>
  <li>cgroups는 /sys/fs/cgroup 디렉터리에 마운트되어 있으며, cgroup v1과 cgroup v2가 있습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># cgroup 버전 확인</span>
<span class="nv">$ </span>mount | <span class="nb">grep </span>cgroup
<span class="c"># =&gt; cgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)</span>
</code></pre></div></div>

<ul>
  <li>현재 테스트 시스템에는 cgroup v2가 사용되고 있는것을 확인할 수 있습니다.</li>
  <li>cgroup v2는 v1에 비해 자원 계층구조의 가시성이 향상 되었고, memoryQoS 라는 기능이 추가되어 컨테이너에서 OOM(Out Of Memory)이
발생가능성을 줄였습니다. 최신 리눅스 배포판은 보통 cgroup v2를 사용하고 있어서 cgroup v2로 실습을 진행하겠습니다.</li>
  <li>cgroup의 계층 구조는 /sys/fs/cgroup 에서 확인할 수 있습니다.</li>
  <li>/proc는 보았지만 /sys는 눈에 익지 않습니다. 리눅스 커널 3.x 버전에서 생긴것으로 USER SPACE 쪽은 /proc에 KERNEL SPACE 쪽 정보는 /sys에 들어간다고 합니다.</li>
</ul>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_23.png" alt="img.png" class="image-center" />
<em class="image-caption">출처 : <a href="https://blog.naver.com/yu3papa/223562337709">https://blog.naver.com/yu3papa/223562337709</a></em></p>

<ul>
  <li>실습을 통해 cgroup의 정보를 확인해 보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>mount <span class="nt">-t</span> cgroup
<span class="nv">$ </span>mount <span class="nt">-t</span> cgroup2
<span class="c"># =&gt; cgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)</span>

<span class="nv">$ </span>findmnt <span class="nt">-t</span> cgroup2
<span class="c"># =&gt; TARGET         SOURCE  FSTYPE  OPTIONS</span>
<span class="c">#    /sys/fs/cgroup cgroup2 cgroup2 rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot</span>

<span class="c"># cgroupv1 만 지원 시, cgroup2 출력되지 않음</span>
<span class="nv">$ </span><span class="nb">grep </span>cgroup /proc/filesystems
<span class="c"># =&gt; nodev   cgroup</span>
<span class="c">#    nodev   cgroup2</span>

<span class="nv">$ </span><span class="nb">stat</span> <span class="nt">-fc</span> %T /sys/fs/cgroup/
<span class="c"># =&gt; cgroup2fs</span>

<span class="c"># 터미널2</span>
<span class="nv">$ </span><span class="nb">sleep </span>100000

<span class="c"># 터미널1</span>
<span class="c"># /proc 에 cgroup 정보 확인</span>
<span class="nv">$ </span><span class="nb">cat</span> /proc/cgroups
<span class="nv">$ </span><span class="nb">cat</span> /proc/<span class="si">$(</span>pgrep <span class="nb">sleep</span><span class="si">)</span>/cgroup
<span class="c"># =&gt; 0::/user.slice/user-1000.slice/session-713.scope</span>

<span class="nv">$ </span>tree /proc/<span class="si">$(</span>pgrep <span class="nb">sleep</span><span class="si">)</span> <span class="nt">-L</span> 2
<span class="c"># =&gt; ...</span>
<span class="c">#    |-- &lt;span style="font-weight:bold;color:blue;"&gt;ns&lt;/span&gt;</span>
<span class="c">#    |   |-- &lt;span style="font-weight:bold;color:teal;"&gt;cgroup&lt;/span&gt; -&amp;gt; cgroup:[4026531835]</span>
<span class="c">#    |   |-- &lt;span style="font-weight:bold;color:teal;"&gt;ipc&lt;/span&gt; -&amp;gt; ipc:[4026531839]</span>
<span class="c">#    |   |-- &lt;span style="font-weight:bold;color:teal;"&gt;mnt&lt;/span&gt; -&amp;gt; mnt:[4026531841]</span>
<span class="c">#    |   |-- &lt;span style="font-weight:bold;color:teal;"&gt;net&lt;/span&gt; -&amp;gt; net:[4026531840]</span>
<span class="c">#    ...</span>

<span class="c"># cgroup 목록 확인</span>
<span class="nv">$ </span><span class="nb">ls</span> /sys/fs/cgroup
<span class="nv">$ </span><span class="nb">cat</span> /sys/fs/cgroup/cgroup.controllers
<span class="c"># =&gt; cpuset cpu io memory hugetlb pids rdma misc</span>
<span class="nv">$ </span>tree /sys/fs/cgroup/ <span class="nt">-L</span> 1
<span class="nv">$ </span>tree /sys/fs/cgroup/ <span class="nt">-L</span> 2
<span class="nv">$ </span>tree /sys/fs/cgroup/user.slice <span class="nt">-L</span> 1
<span class="nv">$ </span>tree /sys/fs/cgroup/user.slice/user-1000.slice <span class="nt">-L</span> 1
</code></pre></div></div>

<ul>
  <li>이번에는 cgroup을 이용하여 자원을 제한하는 실습을 진행해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널 2개를 열어서 root 로 실습 하겠습니다.</span>
<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nv">$ </span><span class="nb">whoami</span>
<span class="c"># =&gt; root</span>

<span class="c"># 툴 설치</span>
<span class="nv">$ </span>apt <span class="nb">install</span> <span class="nt">-y</span> cgroup-tools stress htop

<span class="c"># 터미널2</span>
<span class="c"># CPU 사용률 확인을 위해 htop을 실행합니다.</span>
<span class="nv">$ </span>htop

<span class="c"># 터미널1에서 실습 진행</span>

<span class="c"># 1개 CPU 코어에 부하 발생을 위해 stress를 실행합니다.</span>
<span class="nv">$ </span>stress <span class="nt">--cpu</span> 1
</code></pre></div></div>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_25.png" alt="img.png" /></p>

<ul>
  <li>CPU 0만 100% 사용중인것을 확인할 수 있습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /sys/fs/cgroup
<span class="nv">$ </span><span class="nb">mkdir </span>test_cgroup_parent <span class="o">&amp;&amp;</span> <span class="nb">cd </span>test_cgroup_parent
<span class="nv">$ </span>tree

<span class="c"># 제어가능한 항목 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>cgroup.controllers
<span class="c"># =&gt; cpuset cpu io memory hugetlb pids rdma misc</span>

<span class="c"># cpu를 subtree이 추가하여 컨트롤 할 수 있도록 설정 : +/-(추가/삭제) </span>
<span class="nv">$ </span><span class="nb">cat </span>cgroup.subtree_control
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"+cpu"</span> <span class="o">&gt;&gt;</span> /sys/fs/cgroup/test_cgroup_parent/cgroup.subtree_control

<span class="c"># cpu.max 제한 설정 : 첫 번쨰 값은 허용된 시간(마이크로초) 두 번째 값은 총 기간 길이 &gt; 1/10 실행 설정</span>
<span class="nv">$ </span><span class="nb">echo </span>100000 1000000 <span class="o">&gt;</span> /sys/fs/cgroup/test_cgroup_parent/cpu.max

<span class="c"># test용 자식 디렉토리를 생성하고, pid를 추가하여 제한을 걸어</span>
<span class="nv">$ </span><span class="nb">mkdir </span>test_cgroup_child <span class="o">&amp;&amp;</span> <span class="nb">cd </span>test_cgroup_child
<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$$</span> <span class="o">&gt;</span> /sys/fs/cgroup/test_cgroup_parent/test_cgroup_child/cgroup.procs
<span class="nv">$ </span><span class="nb">cat</span> /sys/fs/cgroup/test_cgroup_parent/test_cgroup_child/cgroup.procs
<span class="c"># =&gt; 1947587</span>
<span class="c">#    2194781</span>
<span class="nv">$ </span><span class="nb">cat</span> /proc/<span class="nv">$$</span>/cgroup
<span class="c"># =&gt; 0::/test_cgroup_parent/test_cgroup_child</span>

<span class="c"># 부하 발생 확인 : 터미널2에 htop 확인</span>
<span class="nv">$ </span>stress <span class="nt">--cpu</span> 1
</code></pre></div></div>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_26.png" alt="img.png" /></p>

<ul>
  <li>cpu.max 제한 설정에서 설정한 대로 (100000/1000000 =&gt; 10%) CPU 사용량이 10%로 제한된것을 확인할 수 있습니다.</li>
  <li>값 수정을 해서 100%로 변경해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 값 수정</span>
<span class="nv">$ </span><span class="nb">echo </span>1000000 1000000 <span class="o">&gt;</span> /sys/fs/cgroup/test_cgroup_parent/cpu.max

<span class="c"># 부하 발생 확인 : 터미널2에 htop 확인</span>
<span class="nv">$ </span>stress <span class="nt">--cpu</span> 1
</code></pre></div></div>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_27.png" alt="img.png" /></p>

<ul>
  <li>테스트에 사용한 cgroup 을 삭제하고 실습을 마무리하겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">exit</span>
<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nv">$ </span><span class="nb">rmdir</span> /sys/fs/cgroup/test_cgroup_parent/test_cgroup_child
<span class="nv">$ </span><span class="nb">rmdir</span> /sys/fs/cgroup/test_cgroup_parent
</code></pre></div></div>

<ul>
  <li>이상과 같이 cgroup을 사용하여 cpu 자원을 제한하는것을 실습해 보았습니다.</li>
</ul>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_24.png" alt="img.png" class="image-center" /></p>

<hr />

<h2 id="컨테이너-네트워크--iptables">컨테이너 네트워크 &amp; Iptables</h2>

<ul>
  <li>도커는 호스트와 컨테이너간, 컨테이너 간의 네트워크를 앞에서 살펴본 네트워크 네임스페이스를 통해 격리합니다.</li>
  <li>또한 iptables를 통해 네트워크 패킷을 제어하고, 컨테이너 간의 통신을 제어합니다.</li>
  <li>실습을 통해 네트워크 네임스페이스를 통한 격리와 iptables의 사용법에 대해 알아보겠습니다.</li>
</ul>

<h3 id="red--blue-네트워크-네임스페이스-간-통신">Red &lt;=&gt; Blue 네트워크 네임스페이스 간 통신</h3>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_17.png" alt="img.png" />
<a href="https://www.slideshare.net/slideshow/make-container-withoutdocker6overlaynetwork1/248297122">출처 : 도커없이 컨테이너 만들기</a></p>

<ul>
  <li>먼저 터미널 3개를 열고 모두 관리자로 로그인 하겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nv">$ </span><span class="nb">whoami</span>
<span class="c"># =&gt; root</span>
</code></pre></div></div>

<ul>
  <li>veth (Virtual Ethernet)를 사용하여 Red와 Blue 네트워크 네임스페이스를 만듭니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ip <span class="nb">link </span>add veth0 <span class="nb">type </span>veth peer name veth1

<span class="c"># veth 생성 확인 (상태 DOWN)</span>
<span class="nv">$ </span>ip <span class="nb">link</span>
<span class="c"># =&gt; 22: &lt;span style="color:teal;"&gt;veth1@veth0: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;9e:74:34:5c:70:ef&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt;</span>
<span class="c">#    23: &lt;span style="color:teal;"&gt;veth0@veth1: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;72:c0:05:36:cd:1b&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt;</span>
<span class="nv">$ </span>ip addr | <span class="nb">grep </span>veth
<span class="c"># =&gt; 22: &lt;span style="color:teal;"&gt;veth1@veth0: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;9e:74:34:5c:70:ef&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt;</span>
<span class="c">#    23: &lt;span style="color:teal;"&gt;veth0@veth1: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,M-DOWN&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;72:c0:05:36:cd:1b&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt;</span>

<span class="c"># 네트워크 네임스페이스 생성</span>
<span class="nv">$ </span>ip netns add RED
<span class="nv">$ </span>ip netns add BLUE

<span class="c"># 네트워크 네임스페이스 확인</span>
<span class="nv">$ </span>ip netns
<span class="c"># =&gt; RED</span>
<span class="c">#    BLUE</span>

<span class="c"># veth0와 veth1을 각각 RED와 BLUE 네트워크 네임스페이스로 이동시킵니다.</span>
<span class="nv">$ </span>ip <span class="nb">link set </span>veth0 netns RED  
<span class="nv">$ </span>ip <span class="nb">link set </span>veth1 netns BLUE

<span class="c"># 네트워크 네임스페이스 확인. id 라는것이 추가되었습니다.</span>
<span class="nv">$ </span>ip netns list
<span class="c"># =&gt; RED (id: 0)</span>
<span class="c">#    BLUE (id: 1)</span>

<span class="c"># ip 링크를 확인하면 veth0와 veth1이 각각 RED와 BLUE 네트워크 네임스페이스로 이동되어 기본 명령에서는 보이지 않습니다.</span>
<span class="nv">$ </span>ip <span class="nb">link</span> | <span class="nb">grep</span> <span class="s2">"veth."</span>
<span class="c"># =&gt; (공백)</span>

<span class="c"># ip netns exec [네임스페이스명] [명령] 으로 네트워크 네임스페이스에서 명령을 실행할 수 있습니다.</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED ip <span class="nb">link</span>
<span class="c"># =&gt; 1: &lt;span style="color:teal;"&gt;lo: &lt;/span&gt;&amp;lt;LOOPBACK&amp;gt; mtu 65536 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/loopback &lt;span style="color:olive;"&gt;00:00:00:00:00:00&lt;/span&gt; brd &lt;span style="color:olive;"&gt;00:00:00:00:00:00&lt;/span&gt;</span>
<span class="c">#    23: &lt;span style="color:teal;"&gt;veth0@if22: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;72:c0:05:36:cd:1b&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns BLUE</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip <span class="nb">link</span>
<span class="c"># =&gt; 1: &lt;span style="color:teal;"&gt;lo: &lt;/span&gt;&amp;lt;LOOPBACK&amp;gt; mtu 65536 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/loopback &lt;span style="color:olive;"&gt;00:00:00:00:00:00&lt;/span&gt; brd &lt;span style="color:olive;"&gt;00:00:00:00:00:00&lt;/span&gt;</span>
<span class="c">#    22: &lt;span style="color:teal;"&gt;veth1@if23: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;9e:74:34:5c:70:ef&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns RED</span>

<span class="c"># veth0과 veth1을 활성화 (UP) 시키겠습니다.</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED ip <span class="nb">link set </span>veth0 up
<span class="c"># veth0의 IP 확인</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED ip addr
<span class="c"># =&gt; ...</span>
<span class="c">#    23: &lt;span style="color:teal;"&gt;veth0@if22: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state &lt;span style="color:green;"&gt;UP &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;72:c0:05:36:cd:1b&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns BLUE</span>
<span class="c">#        inet6 &lt;span style="color:blue;"&gt;fe80::70c0:5ff:fe36:cd1b&lt;/span&gt;/64 scope link proto kernel_ll </span>
<span class="c">#           valid_lft forever preferred_lft forever</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip <span class="nb">link set </span>veth1 up
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip addr
<span class="c"># =&gt; ...</span>
<span class="c">#    22: &lt;span style="color:teal;"&gt;veth1@if23: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state &lt;span style="color:green;"&gt;UP &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;9e:74:34:5c:70:ef&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns RED</span>
<span class="c">#        inet6 &lt;span style="color:blue;"&gt;fe80::9c74:34ff:fe5c:70ef&lt;/span&gt;/64 scope link proto kernel_ll </span>
<span class="c">#           valid_lft forever preferred_lft forever</span>

<span class="c"># UP 상태로 되었으나 IP가 없습니다. IP를 할당해보겠습니다.</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED ip addr add 11.11.11.2/24 dev veth0
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip addr add 11.11.11.3/24 dev veth1

<span class="c"># IP 를 확인해보겠습니다.</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED ip addr
<span class="c"># =&gt; ...</span>
<span class="c">#    23: &lt;span style="color:teal;"&gt;veth0@if22: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state &lt;span style="color:green;"&gt;UP &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;72:c0:05:36:cd:1b&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns BLUE</span>
<span class="c">#        inet &lt;span style="color:purple;"&gt;11.11.11.2&lt;/span&gt;/24 scope global veth0</span>
<span class="c">#           valid_lft forever preferred_lft forever</span>
<span class="c">#        inet6 &lt;span style="color:blue;"&gt;fe80::70c0:5ff:fe36:cd1b&lt;/span&gt;/64 scope link proto kernel_ll </span>
<span class="c">#           valid_lft forever preferred_lft forever</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip addr
<span class="c"># =&gt; ...</span>
<span class="c">#    22: &lt;span style="color:teal;"&gt;veth1@if23: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state &lt;span style="color:green;"&gt;UP &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;9e:74:34:5c:70:ef&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns RED</span>
<span class="c">#        inet &lt;span style="color:purple;"&gt;11.11.11.3&lt;/span&gt;/24 scope global veth1</span>
<span class="c">#           valid_lft forever preferred_lft forever</span>
<span class="c">#        inet6 &lt;span style="color:blue;"&gt;fe80::9c74:34ff:fe5c:70ef&lt;/span&gt;/64 scope link proto kernel_ll </span>
<span class="c">#           valid_lft forever preferred_lft forever</span>
</code></pre></div></div>

<ul>
  <li>이제 Red와 Blue 네트워크 네임스페이스 간의 통신을 테스트 해보겠습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">nsenter</code> 명령을 사용하여 네트워크에 attach 하고, <code class="language-plaintext highlighter-rouge">tcpdump</code>와 <code class="language-plaintext highlighter-rouge">ping</code>을 사용하여 통신을 확인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">tcpdump</code>는 네트워크 패킷을 캡처하는 명령어로, 패킷을 캡처하여 확인할 수 있고, <code class="language-plaintext highlighter-rouge">ping</code>은 네트워크 상태를 확인하는 명령어입니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree /var/run/netns
<span class="c"># =&gt; &lt;span style="font-weight:bold;color:blue;"&gt;/var/run/netns&lt;/span&gt;</span>
<span class="c">#    |-- BLUE</span>
<span class="c">#    `-- RED</span>
<span class="c">#    </span>
<span class="c">#    1 directory, 2 files</span>

<span class="c"># 터미널 1 (RED 11.11.11.2)</span>
<span class="c"># 네트워크 네임스페이스에 attach. </span>
<span class="c"># 이때 --net 옵션을 사용해 앞에서 확인한 /var/run/netns/RED를 사용해 네트워크 네임스페이스에 attach 합니다.</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/RED
<span class="c"># 이웃하는 IP/ARP 정보 확인</span>
<span class="nv">$ </span>ip neigh
<span class="c"># =&gt; (공백)</span>
<span class="c"># 라우팅 정보, iptables 정보</span>
<span class="nv">$ </span>ip route
<span class="c"># =&gt; &lt;span style="color:purple;"&gt;11.11.11.0/24 &lt;/span&gt;dev &lt;span style="color:teal;"&gt;veth0 &lt;/span&gt;proto kernel scope link src &lt;span style="color:purple;"&gt;11.11.11.2 &lt;/span&gt;</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-S</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> nat <span class="nt">-S</span> 

<span class="c"># 터미널 2 (호스트)</span>
<span class="c"># 네트워크 네임스페이스 상태 확인</span>
<span class="nv">$ </span>lsns <span class="nt">-t</span> net
<span class="c"># =&gt;         NS TYPE NPROCS     PID USER     NETNSID NSFS            COMMAND</span>
<span class="c">#    ...</span>
<span class="c">#    4026532444 net       1 1940569 root           0 /run/netns/RED  -zsh</span>
<span class="c">#    4026532527 net       0         root             /run/netns/BLUE</span>
<span class="c"># 네트워크 정보 확인</span>
<span class="nv">$ </span>ip addr 
<span class="nv">$ </span>ip neigh
<span class="nv">$ </span>ip route
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-S</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> nat <span class="nt">-S</span> 

<span class="c"># 터미널 3 (BLUE 11.11.11.3)</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/BLUE
<span class="nv">$ </span>ip neigh
<span class="nv">$ </span>ip route
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-S</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> nat <span class="nt">-S</span> 

<span class="c"># ping 통신 확인</span>

<span class="c"># 터미널3 (BLUE)</span>
<span class="nv">$ </span>tcpdump <span class="nt">-i</span> veth1
<span class="nv">$ </span>ip <span class="nt">-c</span> neigh
<span class="nv">$ </span><span class="nb">exit</span>

<span class="c"># 터미널1 (RED)</span>
<span class="nv">$ </span>ping 11.11.11.3 <span class="nt">-c</span> 1 
<span class="nv">$ </span>ip <span class="nt">-c</span> neigh
<span class="nv">$ </span><span class="nb">exit</span>

<span class="c"># 네임스페이스 삭제</span>
<span class="nv">$ </span>ip netns del RED
<span class="nv">$ </span>ip netns del BLUE 
</code></pre></div></div>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_15.png" alt="img.png" /></p>

<ul>
  <li>위의 캡쳐와 같이 통신이 되어서 tcpdump에 ARP, ICMP 패킷이 잡히는것을 확인할 수 있습니다.</li>
  <li>또한 <code class="language-plaintext highlighter-rouge">ip neigh</code> 명령을 확인했을때 ARP 테이블에 상대방의 IP와 MAC 주소가 등록되어 있는것을 확인할 수 있습니다.</li>
</ul>

<h3 id="red---bridge-br0---blue-네트워크-네임스페이스-간-통신">Red &lt;- Bridge (br0) -&gt; Blue 네트워크 네임스페이스 간 통신</h3>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_16.png" alt="img.png" />
<a href="https://www.slideshare.net/slideshow/make-container-withoutdocker6overlaynetwork1/248297122">출처 : 도커없이 컨테이너 만들기</a></p>

<ul>
  <li>이전 실습에서는 Red와 Blue를 연결하여 peer 네트워크로 구성하였는데, 
이번에는 각각 독립적인 네트워크로 구성하여 Bridge를 사용하여 Red와 Blue 네트워크 네임스페이스 간의 통신을 확인해보겠습니다.</li>
  <li>왜 Bridge를 두는가 하면, peer 네트워크를 구성할 경우 구성원들 간의 통신을 위해서는 모든 노드가 서로서로 연결되어야 하기 때문입니다.
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_18.png" alt="img.png" class="image-center" /></li>
  <li>Bridge를 두면 각 노드는 Bridge와만 연결되어 있으면 통신이 가능하므로 효율적입니다.</li>
  <li>실습을 통해 아래의 그림과 같이 격리된 네트워크 네임스페이스를 만들고 브릿지를 통해 통신해보겠습니다.
<img src="/assets/2024/kans-3th/w1/20240831_kans_w1_19.png" alt="img.png" /></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널 3개를 root 로 엽니다.</span>
<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-i</span>
<span class="nv">$ </span><span class="nb">whoami</span>
<span class="c"># =&gt; root</span>

<span class="c"># 네트워크 네임스페이스 및 veth 생성</span>
<span class="nv">$ </span>ip netns add RED
<span class="nv">$ </span>ip <span class="nb">link </span>add reth0 <span class="nb">type </span>veth peer name reth1
<span class="nv">$ </span>ip <span class="nb">link set </span>reth0 netns RED
<span class="nv">$ </span>ip netns add BLUE
<span class="nv">$ </span>ip <span class="nb">link </span>add beth0 <span class="nb">type </span>veth peer name beth1
<span class="nv">$ </span>ip <span class="nb">link set </span>beth0 netns BLUE

<span class="c"># 확인</span>
<span class="nv">$ </span>ip netns list
<span class="nv">$ </span>ip <span class="nb">link</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    26: &lt;span style="color:teal;"&gt;reth1@if27: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;9a:1f:bf:6f:fe:64&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns RED</span>
<span class="c">#    28: &lt;span style="color:teal;"&gt;beth1@if29: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;mode DEFAULT group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;7e:31:cf:5f:00:8f&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netns BLUE</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED ip addr
<span class="c"># =&gt; ...</span>
<span class="c">#    27: &lt;span style="color:teal;"&gt;reth0@if26: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;ea:7f:a0:1f:00:3d&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netnsid 0</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip addr
<span class="c"># =&gt; ...</span>
<span class="c">#    29: &lt;span style="color:teal;"&gt;beth0@if28: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state &lt;span style="color:red;"&gt;DOWN &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;66:23:89:a6:f7:70&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt; link-netnsid 0</span>

<span class="c"># 브릿지 정보 확인 </span>
<span class="nv">$ </span>brctl show
<span class="c"># =&gt; bridge name	bridge id		STP enabled	interfaces</span>
<span class="c">#    docker0		8000.02425756997c	no		</span>

<span class="c"># br0 브릿지 생성</span>
<span class="nv">$ </span>ip <span class="nb">link </span>add br0 <span class="nb">type </span>bridge

<span class="c"># br0 브릿지 정보 확인</span>
<span class="nv">$ </span>brctl show br0
<span class="c"># =&gt; bridge name	bridge id		STP enabled	interfaces</span>
<span class="c">#    br0		8000.000000000000	no		</span>
<span class="nv">$ </span>brctl showmacs br0
<span class="nv">$ </span>brctl showstp br0

<span class="c"># reth1과 beth1을 br0 브릿지에 연결</span>
<span class="nv">$ </span>ip <span class="nb">link set </span>reth1 master br0
<span class="nv">$ </span>ip <span class="nb">link set </span>beth1 master br0
<span class="nv">$ </span>brctl show br0
<span class="c"># =&gt; bridge name     bridge id               STP enabled     interfaces</span>
<span class="c">#    br0             8000.7e31cf5f008f       no              beth1</span>
<span class="c">#                                                            reth1</span>
<span class="nv">$ </span>brctl showmacs br0
<span class="c"># =&gt; port no mac addr                is local?       ageing timer</span>
<span class="c">#      2     7e:31:cf:5f:00:8f       yes                0.00</span>
<span class="c">#      2     7e:31:cf:5f:00:8f       yes                0.00</span>
<span class="c">#      1     9a:1f:bf:6f:fe:64       yes                0.00</span>
<span class="c">#      1     9a:1f:bf:6f:fe:64       yes                0.00</span>
<span class="nv">$ </span>ip <span class="nt">-br</span> <span class="nb">link</span>
<span class="c"># =&gt; ... </span>
<span class="c">#    &lt;span style="color:teal;"&gt;reth1@if27       &lt;/span&gt;&lt;span style="color:red;"&gt;DOWN           &lt;/span&gt;&lt;span style="color:olive;"&gt;9a:1f:bf:6f:fe:64 &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; </span>
<span class="c">#    &lt;span style="color:teal;"&gt;beth1@if29       &lt;/span&gt;&lt;span style="color:red;"&gt;DOWN           &lt;/span&gt;&lt;span style="color:olive;"&gt;7e:31:cf:5f:00:8f &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; </span>
<span class="c">#    &lt;span style="color:teal;"&gt;br0              &lt;/span&gt;&lt;span style="color:red;"&gt;DOWN           &lt;/span&gt;&lt;span style="color:olive;"&gt;7e:31:cf:5f:00:8f &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST&amp;gt; </span>

<span class="c"># reth0과 beth0에 IP 설정 및 활성화(UP) 시키고, reth1, beth1, br0를 활성화(UP) 합니다.</span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED  ip addr add 11.11.11.2/24 dev reth0
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip addr add 11.11.11.3/24 dev beth0
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED  ip <span class="nb">link set </span>reth0 up
<span class="nv">$ </span>ip <span class="nb">link set </span>reth1 up
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip <span class="nb">link set </span>beth0 up
<span class="nv">$ </span>ip <span class="nb">link set </span>beth1 up
<span class="nv">$ </span>ip <span class="nb">link set </span>br0 up
<span class="nv">$ </span>ip <span class="nt">-br</span> addr
<span class="c"># =&gt; ... </span>
<span class="c">#    &lt;span style="color:teal;"&gt;reth1@if27       &lt;/span&gt;&lt;span style="color:green;"&gt;UP             &lt;/span&gt;&lt;span style="color:blue;"&gt;fe80::981f:bfff:fe6f:fe64&lt;/span&gt;/64 </span>
<span class="c">#    &lt;span style="color:teal;"&gt;beth1@if29       &lt;/span&gt;&lt;span style="color:green;"&gt;UP             &lt;/span&gt;&lt;span style="color:blue;"&gt;fe80::7c31:cfff:fe5f:8f&lt;/span&gt;/64 </span>
<span class="c">#    &lt;span style="color:teal;"&gt;br0              &lt;/span&gt;&lt;span style="color:green;"&gt;UP             &lt;/span&gt;&lt;span style="color:blue;"&gt;fe80::7c31:cfff:fe5f:8f&lt;/span&gt;/64 </span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>RED ip <span class="nt">-br</span> addr
<span class="c"># =&gt; ...</span>
<span class="c">#    &lt;span style="color:teal;"&gt;reth0@if26       &lt;/span&gt;&lt;span style="color:green;"&gt;UP             &lt;/span&gt;&lt;span style="color:purple;"&gt;11.11.11.2&lt;/span&gt;/24 &lt;span style="color:blue;"&gt;fe80::e87f:a0ff:fe1f:3d&lt;/span&gt;/64 </span>
<span class="nv">$ </span>ip netns <span class="nb">exec </span>BLUE ip <span class="nt">-br</span> addr
<span class="c"># =&gt; ...</span>
<span class="c">#    &lt;span style="color:teal;"&gt;beth0@if28       &lt;/span&gt;&lt;span style="color:green;"&gt;UP             &lt;/span&gt;&lt;span style="color:purple;"&gt;11.11.11.3&lt;/span&gt;/24 &lt;span style="color:blue;"&gt;fe80::6423:89ff:fea6:f770&lt;/span&gt;/64 </span>

<span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/RED
<span class="nv">$ </span>ip <span class="nt">-c</span> a<span class="p">;</span><span class="nb">echo</span><span class="p">;</span> ip <span class="nt">-c</span> route<span class="p">;</span><span class="nb">echo</span><span class="p">;</span> ip <span class="nt">-c</span> neigh
<span class="c"># 현재 네트워크 네임스페이스 확인</span>
<span class="nv">$ </span>ip netns identify <span class="nv">$$</span>
<span class="c"># =&gt; RED</span>

<span class="c"># 터미널2 (호스트)</span>
<span class="nv">$ </span>brctl showmacs br0
<span class="nv">$ </span>bridge fdb show
<span class="nv">$ </span>bridge fdb show dev br0

<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-S</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-L</span> <span class="nt">-n</span> <span class="nt">-v</span>

<span class="c"># 터미널3 (BLUE 11.11.11.3)</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/BLUE
<span class="nv">$ </span>ip <span class="nt">-c</span> a<span class="p">;</span><span class="nb">echo</span><span class="p">;</span> ip <span class="nt">-c</span> route<span class="p">;</span><span class="nb">echo</span><span class="p">;</span> ip <span class="nt">-c</span> neigh
<span class="c"># 현재 네트워크 네임스페이스 확인</span>
<span class="nv">$ </span>ip netns identify <span class="nv">$$</span>
<span class="c"># =&gt; BLUE</span>

<span class="c"># 터미널2 (호스트)</span>
<span class="c"># ping 통신 전 사전 설정</span>
<span class="c">## iptables 정보 확인</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-S</span> | <span class="nb">grep</span> <span class="s1">'\-P'</span>
<span class="c"># =&gt; -P INPUT ACCEPT</span>
<span class="c">#    -P FORWARD DROP</span>
<span class="c">#    -P OUTPUT ACCEPT</span>
<span class="nv">$ </span>iptables <span class="nt">-nvL</span> <span class="nt">-t</span> filter

<span class="c"># 호스트에서 패킷 라우팅 설정 확인 - 0(off), 1(on)</span>
<span class="nv">$ </span><span class="nb">cat</span> /proc/sys/net/ipv4/ip_forward
<span class="c"># =&gt; 1</span>
<span class="c"># 위의 결과가 0인 경우 아래의 명령을 실행</span>
<span class="c"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span>

<span class="c"># ping 통신 확인</span>
<span class="c"># 터미널2 (호스트)</span>
<span class="nv">$ </span>tcpdump <span class="nt">-l</span> <span class="nt">-i</span> br0
<span class="c"># =&gt; tcpdump: verbose output suppressed, use -v[v]... for full protocol decode</span>
<span class="c">#    listening on br0, link-type EN10MB (Ethernet), snapshot length 262144 bytes</span>
<span class="c">#    (터미널1에서 ping 실행시)</span>
<span class="c">#    08:40:00.413198 IP 11.11.11.2 &gt; 11.11.11.3: ICMP echo request, id 41028, seq 1, length 64</span>
<span class="c">#    08:40:05.455528 ARP, Request who-has 11.11.11.3 tell 11.11.11.2, length 28</span>
<span class="c">#    08:40:05.455556 ARP, Reply 11.11.11.3 is-at 66:23:89:a6:f7:70 (oui Unknown), length 28</span>
<span class="nv">$ </span>watch <span class="nt">-d</span> <span class="s1">'iptables -v --numeric --table filter --list FORWARD'</span>
<span class="nv">$ </span>watch <span class="nt">-d</span> <span class="s1">'iptables -v --numeric --table filter --list FORWARD;echo;iptables -v --numeric --table filter --list DOCKER-USER;echo;iptables -v --numeric --table filter --list DOCKER-ISOLATION-STAGE-1'</span>

<span class="c"># 터미널3 (BLUE 11.11.11.3)</span>
<span class="nv">$ </span>tcpdump <span class="nt">-l</span> <span class="nt">-i</span> beth0

<span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="nv">$ </span>ping 11.11.11.3 <span class="nt">-c</span> 1
<span class="c"># =&gt; 실패</span>
</code></pre></div></div>

<p>위의 캡쳐와 같이 브릿지에서는 패킷이 잡히지만, 브릿지를 통해 Blue로 패킷이 전달되지 않는것을 확인할 수 있습니다.
그렇다면 왜 패킷이 전달되지 않을까요? 그것은 <code class="language-plaintext highlighter-rouge">iptables -t filter -S | grep '\-P'</code> 명령을 통해 확인했을때 FORWARD 체인이 DROP으로 설정되어 있기 때문입니다.
패킷이 브릿지를 통해 전달되려면 FORWARD 체인을 통해야 하는데 DROP이면 패킷이 전달되지 않습니다.</p>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_20.png" alt="img.png" class="image-center" />
<em class="image-caption">Iptables 처리 흐름도 (<a href="https://natnat1.medium.com/iptables-b9ce0602253f">https://natnat1.medium.com/iptables-b9ce0602253f</a>)</em></p>

<ul>
  <li>위의 그림과 같이 iptables는 패킷이 들어오면 PREROUTING 체인을 통해 패킷을 처리하고, FORWARD 체인을 통해 패킷을 전달합니다.</li>
</ul>

<p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_21.png" alt="img.png" /></p>

<ul>
  <li>br0 입장에서 살펴보면 위와 같습니다. 그렇다면 11.11.11.2 &lt;=&gt; 11.11.11.3으로 FORWARD를 허용하면 되는데 방법을 살펴보면 아래와 같습니다.
    <ul>
      <li>출발지 11.11.11.2와 11.11.11.3 허용</li>
      <li>도착지 11.11.11.0/24 대역 출발지 허용</li>
      <li>FORWARD 기본 정책을 ACCEPT로 변경</li>
      <li>등등 기타 어떤 방법으로든 11.11.11.2와 11.11.11.3이 FORWARD 체인을 통해 패킷이 전달되도록 설정하면 됩니다.</li>
    </ul>
  </li>
  <li>실습을 통해 iptables를 통해 패킷이 전달되도록 설정해보겠습니다.</li>
  <li>방법1. 11.11.11.2와 11.11.11.3 허용하기
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널2 (호스트)</span>
<span class="c"># 출발지 11.11.11.2 허용하기</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-A</span> FORWARD <span class="nt">-s</span> 11.11.11.2/32 <span class="nt">-j</span> ACCEPT
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-A</span> FORWARD <span class="nt">-s</span> 11.11.11.3/32 <span class="nt">-j</span> ACCEPT
<span class="nv">$ </span>tcpdump <span class="nt">-l</span> <span class="nt">-i</span> br0
  
<span class="c"># 터미널3 (BLUE 11.11.11.3)</span>
<span class="nv">$ </span>tcpdump <span class="nt">-l</span> <span class="nt">-i</span> beth0
<span class="c"># =&gt; tcpdump: verbose output suppressed, use -v[v]... for full protocol decode</span>
<span class="c">#    listening on beth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes</span>
<span class="c">#    10:39:20.225225 IP 11.11.11.2 &gt; 11.11.11.3: ICMP echo request, id 33335, seq 1, length 64</span>
<span class="c">#    10:39:20.225233 IP 11.11.11.3 &gt; 11.11.11.2: ICMP echo reply, id 33335, seq 1, length 64</span>
  
<span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="nv">$ </span>ping 11.11.11.3
<span class="c"># =&gt; PING 11.11.11.3 (11.11.11.3) 56(84) bytes of data.</span>
<span class="c">#    64 bytes from 11.11.11.3: icmp_seq=1 ttl=64 time=0.055 ms</span>
<span class="c">#    </span>
<span class="c">#    --- 11.11.11.3 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span class="c">#    rtt min/avg/max/mdev = 0.055/0.055/0.055/0.000 ms</span>
  
<span class="c"># 터미널2 (호스트)</span>
<span class="c"># 허용 룰 제거</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-D</span> FORWARD <span class="nt">-s</span> 11.11.11.2/32 <span class="nt">-j</span> ACCEPT
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-D</span> FORWARD <span class="nt">-s</span> 11.11.11.3/32 <span class="nt">-j</span> ACCEPT
</code></pre></div>    </div>

    <p><img src="/assets/2024/kans-3th/w1/20240831_kans_w1_22.png" alt="img.png" /></p>
  </li>
  <li>방법2. 도착지 11.11.11.0/24 대역 허용하기
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널2 (호스트)</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-A</span> FORWARD <span class="nt">-d</span> 11.11.11.0/24 <span class="nt">-j</span> ACCEPT
<span class="c"># 테스트 후 허용 룰 제거</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-D</span> FORWARD <span class="nt">-d</span> 11.11.11.0/24 <span class="nt">-j</span> ACCEPT
</code></pre></div>    </div>
  </li>
  <li>방법3. FORWARD 기본 정책을 ACCEPT로 변경하기
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널2 (호스트)</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-P</span> FORWARD ACCEPT
<span class="c"># 테스트 후 허용 룰 제거</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> filter <span class="nt">-P</span> FORWARD DROP
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="호스트--redblue-네트워크-네임스페이스로-접근하기">호스트 &lt;=&gt; RED/BLUE 네트워크 네임스페이스로 접근하기</h3>

<ul>
  <li>“Red &lt;- Bridge (br0) -&gt; Blue 네트워크 네임스페이스 간 통신”을 실습한 환경에 이어서 실습해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/RED
<span class="nv">$ </span>tcpdump <span class="nt">-i</span> any

<span class="c"># 터미널3를 호스트 네트워크로 변경합니다.</span>
<span class="nv">$ </span><span class="nb">exit</span>
<span class="nv">$ </span>ip netns identify <span class="nv">$$</span>
<span class="c"># =&gt; (공백)</span>
<span class="nv">$ </span>tcpdump <span class="nt">-i</span> br0 <span class="nt">-n</span>

<span class="c"># 터미널2 (호스트)</span>
<span class="nv">$ </span>ping <span class="nt">-c</span> 1 11.11.11.2
<span class="c"># =&gt; 1 packets transmitted, 0 received, 100% packet loss, time 0ms</span>
<span class="c"># (ping 이 실패합니다.)</span>
</code></pre></div></div>

<ul>
  <li>호스트에서 RED (11.11.11.2) 로 ping시 패킷이 전달되지 않는것을 확인할 수 있습니다.</li>
  <li>그 이유는 RED 네트워크로 접근하기 위해서는 br0를 거쳐서 접근해야하는데, br0는 ip가 없기 때문에 패킷이 전달되지 않습니다.</li>
  <li>br0에 ip를 할당하고, RED와 BLUE 네트워크 네임스페이스로 접근해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널2 (호스트)</span>
<span class="nv">$ </span>ip addr add 11.11.11.1/24 dev br0
<span class="nv">$ </span>ip addr
<span class="c"># =&gt; ...</span>
<span class="c">#    30: &lt;span style="color:teal;"&gt;br0: &lt;/span&gt;&amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state &lt;span style="color:green;"&gt;UP &lt;/span&gt;group default qlen 1000</span>
<span class="c">#        link/ether &lt;span style="color:olive;"&gt;7e:31:cf:5f:00:8f&lt;/span&gt; brd &lt;span style="color:olive;"&gt;ff:ff:ff:ff:ff:ff&lt;/span&gt;</span>
<span class="c">#        inet &lt;span style="color:purple;"&gt;11.11.11.1&lt;/span&gt;/24 scope global br0</span>
<span class="c">#           valid_lft forever preferred_lft forever</span>
<span class="nv">$ </span>ping 11.11.11.2 <span class="nt">-c</span> 1
<span class="c"># =&gt; PING 11.11.11.2 (11.11.11.2) 56(84) bytes of data.</span>
<span class="c">#    64 bytes from 11.11.11.2: icmp_seq=1 ttl=64 time=0.044 ms</span>
<span class="c">#    </span>
<span class="c">#    --- 11.11.11.2 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span class="c">#    rtt min/avg/max/mdev = 0.044/0.044/0.044/0.000 ms</span>
<span class="nv">$ </span>ping 11.11.11.3 <span class="nt">-c</span> 1
<span class="c"># =&gt; PING 11.11.11.3 (11.11.11.3) 56(84) bytes of data.</span>
<span class="c">#    64 bytes from 11.11.11.3: icmp_seq=1 ttl=64 time=0.052 ms</span>
<span class="c">#    </span>
<span class="c">#    --- 11.11.11.3 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span class="c">#    rtt min/avg/max/mdev = 0.052/0.052/0.052/0.000 ms</span>
</code></pre></div></div>

<ul>
  <li>이번에는 RED에서 호스트로 ping이 되는것을 확인해 보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="c"># br0 에 ping 테스트</span>
<span class="nv">$ </span>ping 11.11.11.1 <span class="nt">-c</span> 1
<span class="c"># =&gt; PING 11.11.11.1 (11.11.11.1) 56(84) bytes of data.</span>
<span class="c">#    64 bytes from 11.11.11.1: icmp_seq=1 ttl=64 time=0.041 ms</span>
<span class="c">#    </span>
<span class="c">#    --- 11.11.11.1 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span class="c">#    rtt min/avg/max/mdev = 0.041/0.041/0.041/0.000 ms</span>

<span class="c"># 호스트로 ping 테스트</span>
<span class="nv">$ </span>ping 10.10.10.51 <span class="nt">-c</span> 1
<span class="c"># =&gt; ping: connect: Network is unreachable</span>
</code></pre></div></div>

<ul>
  <li>br0에는 ping 이 성공하는데 호스트로는 Network is unreachable 에러가 발생하는것을 확인할 수 있습니다.</li>
  <li>그 이유는 11.11.11.0/24에서 호스트 네트워크인 10.10.10.0/24로 패킷을 라우팅하는 정보가 없기 때문입니다.</li>
  <li>RED나 BLUE에서 호스트로 패킷을 전달하기 위해서는 br0를 통해야 하는데, RED와 BLUE에 기본 게이트웨이를 br0로 설정하여 테스트해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="nv">$ </span>ip route add default via 11.11.11.1
<span class="nv">$ </span>ip route
<span class="c"># =&gt; default via 11.11.11.1 dev reth0</span>
<span class="c">#    11.11.11.0/24 dev reth0 proto kernel scope link src 11.11.11.2</span>
<span class="nv">$ </span>ping 10.10.10.51 <span class="nt">-c</span> 1
<span class="c"># =&gt; PING 10.10.10.51 (10.10.10.51) 56(84) bytes of data.</span>
<span class="c">#    64 bytes from 10.10.10.51: icmp_seq=1 ttl=64 time=0.041 ms</span>
<span class="c">#    </span>
<span class="c">#    --- 10.10.10.51 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span class="nv">$ </span><span class="nb">exit</span>

<span class="c"># BLUE에서도 동일하게 테스트해보겠습니다</span>

<span class="c"># 터미널1 (BLUE 11.11.11.3)</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/BLUE
<span class="nv">$ </span>ip netns identify <span class="nv">$$</span>
<span class="c"># =&gt; BLUE</span>
<span class="nv">$ </span>ping 10.10.10.51 <span class="nt">-c</span> 1
<span class="c"># =&gt; ping: connect: Network is unreachable</span>
<span class="nv">$ </span>ip route add default via 11.11.11.1
<span class="nv">$ </span>ip route
<span class="c"># =&gt; default via 11.11.11.1 dev beth0</span>
<span class="c">#    11.11.11.0/24 dev beth0 proto kernel scope link src 11.11.11.3</span>
<span class="nv">$ </span>ping 10.10.10.51 <span class="nt">-c</span> 1
<span class="c"># =&gt; PING 10.10.10.51 (10.10.10.51) 56(84) bytes of data.</span>
<span class="c">#    64 bytes from 10.10.10.51: icmp_seq=1 ttl=64 time=0.049 ms</span>
<span class="c">#    </span>
<span class="c">#    --- 10.10.10.51 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span class="c">#    rtt min/avg/max/mdev = 0.049/0.049/0.049/0.000 ms</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ip route add default via 11.11.11.1</code> 로 기본 게이트웨이를 br0로 설정하고, 호스트로 ping이 되는것을 확인할 수 있습니다.</li>
</ul>

<h3 id="redblue에서-외부-인터넷-통신">RED/BLUE에서 외부 인터넷 통신</h3>

<ul>
  <li>이번에는 RED와 BLUE 네트워크 네임스페이스에서 외부 인터넷으로 통신하는 방법을 실습해보겠습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/RED
<span class="nv">$ </span>ping 8.8.8.8 <span class="nt">-c</span> 1
<span class="c"># =&gt; PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</span>
<span class="c">#    </span>
<span class="c">#    --- 8.8.8.8 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 0 received, 100% packet loss, time 0ms</span>
</code></pre></div></div>

<ul>
  <li>RED에서 외부 인터넷으로 ping이 되지 않는것을 확인할 수 있습니다.</li>
  <li>RED/BLUE와 같이 호스트 아래의 내부 네트워크에서 외부 인터넷으로 패킷을 전달하기 위해서는
호스트의 IP로 패킷을 전달하고, 응답을 호스트 IP로 받아서 내부 네트워크(RED/BLUE)로 전달해야하는데, 
이러한 과정을 SNAT (Source Network Address Translation) 또는 MASQUERADE라고 합니다.</li>
  <li>nat 테이블의 POSTROUTING 체인에 MASQUERADE 룰을 추가하면 SNAT이 적용되어서 외부 인터넷으로 패킷을 전달할 수 있습니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널2 (호스트)</span>
<span class="nv">$ </span>iptables <span class="nt">-t</span> nat <span class="nt">-A</span> POSTROUTING <span class="nt">-s</span> 11.11.11.0/24 <span class="nt">-j</span> MASQUERADE
<span class="c"># SNAT 통계 모니터링</span>
<span class="nv">$ </span>watch <span class="nt">-d</span> <span class="s1">'iptables -v --numeric --table nat --list POSTROUTING'</span>
<span class="nv">$ </span>iptables <span class="nt">-nvL</span> <span class="nt">-t</span> nat
<span class="nv">$ </span>conntrack <span class="nt">-L</span> <span class="nt">--src-nat</span>
<span class="c"># =&gt; icmp     1 29 src=11.11.11.2 dst=8.8.8.8 type=8 code=0 id=62779 src=8.8.8.8 dst=10.10.10.109 type=0 code=0 id=62779 mark=0 use=1</span>
<span class="c">#    conntrack v1.4.8 (conntrack-tools): 1 flow entries have been shown.</span>

<span class="c"># 터미널1 (RED 11.11.11.2)</span>
<span class="nv">$ </span>ping 8.8.8.8 <span class="nt">-c</span> 1
<span class="c"># =&gt; PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.</span>
<span class="c">#    64 bytes from 8.8.8.8: icmp_seq=1 ttl=113 time=26.3 ms</span>
<span class="c">#    </span>
<span class="c">#    --- 8.8.8.8 ping statistics ---</span>
<span class="c">#    1 packets transmitted, 1 received, 0% packet loss, time 0ms</span>
<span class="c">#    rtt min/avg/max/mdev = 26.277/26.277/26.277/0.000 ms</span>
<span class="nv">$ </span><span class="nb">exit</span>

<span class="c"># 터미널1 (BLUE 11.11.11.3)</span>
<span class="nv">$ </span>nsenter <span class="nt">--net</span><span class="o">=</span>/var/run/netns/BLUE
<span class="nv">$ </span>ip route add default via 11.11.11.1
<span class="nv">$ </span>ping 8.8.8.8 <span class="nt">-c</span> 1
<span class="nv">$ </span><span class="nb">exit</span>

<span class="c"># 삭제</span>
<span class="nv">$ </span>ip netns delete RED
<span class="nv">$ </span>ip netns delete BLUE
<span class="nv">$ </span>ip <span class="nb">link </span>delete br0

<span class="nv">$ </span>iptables <span class="nt">-t</span> nat <span class="nt">-D</span> POSTROUTING <span class="nt">-s</span> 11.11.11.0/24 <span class="nt">-j</span> MASQUERADE
</code></pre></div></div>

<ul>
  <li>SNAT 추가한 이후 ping이 잘 되는것을 확인할 수 있었습니다.</li>
</ul>

<hr />

<h2 id="마치며">마치며</h2>

<p>첫주부터 이론과 실습할것이 굉장히 많았습니다. 테라폼 스터디가 순한맛으로 보일 정도입니다. 😅
하지만 그동안 막연하게 알고 있었던 도커 컨테이너의 격리 원리와 리눅스 네트워크와 iptables에 
대해 더 깊게 이해할 수 있어서 좋았습니다.</p>

<p><del>개인적으로 *BSD를 좋아하는데 이 정도면 FreeBSD에서도 BSD만의 docker 같은 에코시스템 구축이 가능할것 같은데
왜 못하고 있는지 의문입니다. 비슷하게 돌릴 수 있는 다양한 시도들은 많은데 흐지부지 되는 이유는 대체 무엇인지..</del></p>

<p>항상 무언가를 배우는것은 즐겁습니다. 다음 스터디도 기대됩니다! :smile:</p>]]></content><author><name></name></author><category term="kans" /><category term="kubernetes," /><category term="network," /><category term="linux" /><summary type="html"><![CDATA[지난 테라폼 스터디에 이어 이번 주 부터 KANS 스터디를 시작하게 되었습니다! KANS는 Kubernetes Advanced Networking Study의 줄임말로 쿠버네티스 네트워킹에 대한 심도있게 공부하는 스터디입니다. 이번 스터디도 과제할 걱정도 되지만 재미있을것 같아 기대됩니다.]]></summary></entry><entry><title type="html">[T101 4기] OpenTofu</title><link href="https://sweetlittlebird.github.io/posts/2024-08-03-T101-Study-Terraform-Week-8/" rel="alternate" type="text/html" title="[T101 4기] OpenTofu" /><published>2024-08-03T16:02:00+09:00</published><updated>2024-08-03T16:02:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%208</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-08-03-T101-Study-Terraform-Week-8/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>이번 주가 8주차이자 벌써 마지막주차입니다. 
T101 4기에서 마지막으로 알아볼 주제는 OpenTofu로 Terraform의 
오픈소스 커뮤니티에서 포크한 버전으로 앞으로가 기대되는 프로젝트입니다.
이 블로그 글의 내용은 
<a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a>를 참고하였습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="opentofu">OpenTofu</h2>

<h3 id="개요">개요</h3>

<p><img src="/assets/2024/t101-4th/20240803_terraform_w8_opentofu_1.png" alt="OpenTofu 로고" class="image-center" />
<em class="image-caption">OpenTofu 로고</em></p>

<ul>
  <li>OpenTofu는 HashiCorp가 Terraform의 라이센스를 MPL(Mozilla Public License)에서 비오픈 소스 라이센스인 BUSL(Business Source License)로 변경한 것에
반발하여 만들어진 프로젝트입니다. BUSL로 라이센스가 변경되기 전의 소스를 포크하였으며, 초기에는 OpenTF 라는 이름을 사용하다가
OpenTofu로 변경하였습니다.
    <ul>
      <li>Terraform AWS Provider 등은 아직 MPL 버전이어서 OpenTofu에서 사용 가능합니다.</li>
    </ul>
  </li>
  <li>초기에는 Terraform의 오픈소스버전을 유지하기 위한 프로젝트였으나, 현재는 상태파일 암호화나 Backend 블록에서 Variable을 사용할 수 있게 하는 등
본가의 Terraform 에서 조차 지원하지 않는 편리한 기능들을 추가하며 발전해가고 있습니다.</li>
</ul>

<h3 id="특이사항">특이사항</h3>

<ul>
  <li>OpenTofu 1.6.x는 Terraform 1.6.x와 기능적으로 매우 유사하지만, 앞으로 기능추가 등 각각 독자적인 방향으로 발전할 가능성이 있습니다.</li>
  <li>Terraform 1.5.x 및 1.6.x 와 상당 부분 호환되므로 해당 버전을 사용 중이었다면 OpenTofu로 전환하기가 쉽습니다.</li>
  <li>Terraform 1.5.x 까지와는 상태 파일 그대로 호환 될정도입니다.</li>
  <li>OpenTofu는 현재 자체 Provider가 없으며, Terraform의 Provider는 라이센스가 변경되지 않는 이상 최신버전을 사용할 수 없습니다.</li>
  <li>현재 OpenTofu는 Terraform 공급자와 함께 동작할 수 있지만 별도의 레지스트리를 사용합니다.</li>
  <li>OpenTofu 1.7 버전 부터는 프로덕션환경에서 쓸 수 있는 버전으로 알려져있습니다.</li>
</ul>

<p>OpenTofu는 Terraform과 유사하여 바로 설치 후 실습을 진행하겠습니다.</p>

<h3 id="opentofu-설치">OpenTofu 설치</h3>

<p>tenv를 사용하여 OpenTofu를 설치해보겠습니다.
tenv는 tfenv와 유사하나 Terraform만 관리하는 tfenv와는 달리 tenv는  Terraform 외에도 OpenTofu, Terragrunt 등을 설치하고 버전을 관리할 수 있습니다.</p>

<p>각 툴별로 명령과 환경 변수는 아래와 같습니다.</p>

<table>
  <thead>
    <tr>
      <th>툴</th>
      <th>명령어</th>
      <th>환경변수</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>OpenTofu</td>
      <td>tofu</td>
      <td>TOFUENV_</td>
    </tr>
    <tr>
      <td>Terraform</td>
      <td>terraform</td>
      <td>TFENV_</td>
    </tr>
    <tr>
      <td>Terragrunt</td>
      <td>terragrunt</td>
      <td>TG_</td>
    </tr>
    <tr>
      <td>Atmos</td>
      <td>atmos</td>
      <td>ATMOS_</td>
    </tr>
  </tbody>
</table>

<p>MacOS를 기준으로 설치하겠습니다.</p>

<ul>
  <li>tenv 설치
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 먼저 tfenv를 삭제합니다.</span>
<span class="nv">$ </span>brew remove tfenv
  
<span class="c"># tenv를 설치</span>
<span class="nv">$ </span>brew <span class="nb">install </span>tenv
  
<span class="nv">$ </span>tenv <span class="nt">--version</span>
<span class="c"># =&gt; tenv version 2.7.9</span>
  
<span class="nv">$ </span>tenv <span class="nt">-h</span>       <span class="c"># 도움말 보기 </span>
<span class="nv">$ </span>tenv tofu <span class="nt">-h</span>  <span class="c"># OpenTofu 도움말 보기</span>
  
<span class="c"># (옵션) Install shell completion</span>
<span class="nv">$ </span>tenv completion zsh <span class="o">&gt;</span> ~/.tenv.completion.zsh
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"source '~/.tenv.completion.zsh'"</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div>    </div>
  </li>
  <li>OpenTofu 설치
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tenv tofu list            <span class="c"># 현재 설치된 목록 확인</span>
<span class="nv">$ </span>tenv tofu list-remote     <span class="c"># 설치가능한 목록 확인</span>
  
<span class="c"># 설치</span>
<span class="nv">$ </span>tenv tofu <span class="nb">install </span>1.7.3   <span class="c"># 1.8은 너무 최신이어서 안정적인 1.7.3 버전을 설치합니다.</span>
<span class="c"># =&gt; Installation of OpenTofu 1.7.3 successful</span>
  
<span class="nv">$ </span>tenv tofu list            <span class="c"># 설치된 목록 확인</span>
<span class="c"># =&gt; 1.7.3</span>
<span class="nv">$ </span>tenv tofu use 1.7.3       <span class="c"># 사용할 버전 선택</span>
<span class="nv">$ </span>tenv tofu detect          <span class="c"># 현재 사용하는 버전의 위치를 확인</span>
  
<span class="nv">$ </span>tofu version       <span class="c"># OpenTofu 버전 확인</span>
<span class="c"># =&gt; OpenTofu v1.7.3</span>
<span class="c">#    on darwin_arm64</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="opentofu-17">OpenTofu 1.7</h3>

<h4 id="실습-provider-defined-functions">[실습] Provider-defined functions</h4>

<p>OpenTofu에서 Provider-defined functions을 사용해 보겠습니다.
Functions는 크게 Built-in functions와 Provider-defined functions로 나뉩니다.
Built-in functions는 OpenTofu(Terraform)에서 기본적으로 제공하는 함수이며, Provider-defined functions는 Provider에서 제공하는 함수입니다.
각각 아래의 링크에서 목록을 확인할 수 있습니다.</p>
<ul>
  <li>Built-in functions: <a href="https://opentofu.org/docs/language/functions/">https://opentofu.org/docs/language/functions/</a></li>
  <li>Provider-defined functions: <a href="https://library.tf/providers">https://library.tf/providers</a> 
=&gt; (Provider를 선택하고 Functions 탭에서 확인)</li>
</ul>

<p>이번 실습에서 사용할 함수는 <a href="https://library.tf/providers/northwood-labs/corefunc/latest/docs/functions/str_snake">Provider::corefunc::str_snake</a>으로
문자열을 snake_case로 변환하는 함수입니다.</p>

<ul>
  <li>main.tf 생성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">corefunc</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"northwood-labs/corefunc"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"1.4.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">provider</span> <span class="s2">"corefunc"</span> <span class="p">{</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"test"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="k">provider</span><span class="err">::</span><span class="nx">corefunc</span><span class="err">::</span><span class="nx">str_snake</span><span class="p">(</span><span class="s2">"Hello world!"</span><span class="p">)</span>
  <span class="c1"># Prints: hello_world</span>
<span class="p">}</span>   
</code></pre></div>    </div>
  </li>
  <li>실행
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 초기화 (프로바이더 다운로드 등)</span>
<span class="nv">$ </span>tofu init
  
<span class="c"># 프로바이더 정보 확인</span>
<span class="nv">$ </span>tree .terraform
<span class="c"># =&gt; .terraform</span>
<span class="c">#    └── providers</span>
<span class="c">#        └── registry.opentofu.org</span>
<span class="c">#            └── northwood-labs</span>
<span class="c">#                └── corefunc</span>
<span class="c">#                    ...  </span>
  
<span class="c"># 실행계획 보기</span>
<span class="nv">$ </span>tofu plan
<span class="c"># 적용</span>
<span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Outputs:</span>
<span class="c">#    test = "hello_world"</span>
  
<span class="nv">$ </span>tofu output
<span class="c"># =&gt; test = "hello_world"</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
</code></pre></div>    </div>
    <p>명령만 terraform에서 tofu로 바뀌었을 뿐, 사용법과 결과는 거의 동일한것을 확인할 수 있었습니다.</p>
  </li>
  <li>main.tf 를 수정하여 str_camel 함수를 사용하여 snake_case를 camelCase로 변환해보겠습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">corefunc</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"northwood-labs/corefunc"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"1.4.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">provider</span> <span class="s2">"corefunc"</span> <span class="p">{</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"test"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="k">provider</span><span class="err">::</span><span class="nx">corefunc</span><span class="err">::</span><span class="nx">str_camel</span><span class="p">(</span><span class="s2">"Hello world!"</span><span class="p">)</span>  <span class="c1"># str_snake =&gt; str_camel로 변경</span>
  <span class="c1"># Prints: hello_world</span>
<span class="p">}</span>   
</code></pre></div>    </div>
  </li>
  <li>실행
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu plan
<span class="c"># =&gt; Changes to Outputs:</span>
<span class="c">#    ~ test = "hello_world" -&gt; "helloWorld"</span>
  
<span class="c"># 적용</span>
<span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Outputs:</span>
<span class="c">#    test = "helloWorld"</span>
  
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> terraform.tfstate<span class="k">*</span>
<span class="c"># =&gt; -rw-r--r--  1 user  staff  255  8  3 16:02 terraform.tfstate</span>
<span class="c">#    -rw-r--r--  1 user  staff  256  8  3 16:02 terraform.tfstate.backup</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="실습-loopable-import-blocks">[실습] Loopable import blocks</h4>
<p><a href="https://opentofu.org/docs/v1.7/intro/whats-new/#loopable-import-blocks">관련문서</a></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">import</code> 블록은 `terraform import 명령 처럼 기존 리소스를 가져오는 기능입니다. 차이점은 terraform 선언 파일에서 사용할 수 있다는 것입니다.</li>
  <li>아래는 aws_instance.example 리소스를 가져오는 예제입니다. <code class="language-plaintext highlighter-rouge">import</code> 블록에서 <code class="language-plaintext highlighter-rouge">id</code>를 사용하여 가져올 리소스를 지정합니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import 블록 예제</span>
<span class="nx">import</span> <span class="p">{</span>
  <span class="nx">to</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span>
  <span class="nx">id</span> <span class="p">=</span> <span class="s2">"i-abcd1234"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"hashi"</span>
  <span class="c1"># (other resource arguments...)</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>위의 예제를 수행하면 <code class="language-plaintext highlighter-rouge">aws_instance.example</code>은 마치 <code class="language-plaintext highlighter-rouge">OpenTofu</code>에서 프로비저닝한것 처럼 state 파일에 추가 됩니다.</p>
  </li>
  <li>이번 실습에서는 위의 <code class="language-plaintext highlighter-rouge">import</code> 블록을 Loop를 돌려서 여러개의 리소스를 가져와 보겠습니다.</li>
  <li>먼저 정상적으로 AWS 상에 EC2 인스턴스를 생성하겠습니다.
    <ul>
      <li>main.tf 생성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"ubuntu"</span> <span class="p">{</span>
    <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
    
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"virtualization-type"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"hvm"</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"099720109477"</span><span class="p">]</span> <span class="c1"># Canonical</span>
<span class="p">}</span>
    
<span class="k">variable</span> <span class="s2">"instance_tags"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"web"</span><span class="p">,</span> <span class="s2">"app"</span><span class="p">]</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"this"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">)</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">ubuntu</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t3.micro"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 초기화</span>
<span class="nv">$ </span>tofu init
    
<span class="c"># 프로바이더 정보 확인</span>
<span class="nv">$ </span>tree .terraform
<span class="c"># =&gt; .terraform</span>
<span class="c">#    └── providers</span>
<span class="c">#        └── registry.opentofu.org</span>
<span class="c">#            └── hashicorp</span>
<span class="c">#                └── aws</span>
<span class="c">#                    └── 5.60.0</span>
                              
<span class="c"># 적용</span>
<span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 2 added, 0 changed, 0 destroyed.</span>
    
<span class="c"># EC2 확인</span>
<span class="nv">$ </span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span>aws ec2 describe-instances <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].{PublicIPAdd:PublicIpAddress,InstanceName:Tags[?Key=='Name']|[0].Value,Status:State.Name}"</span> <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>instance-state-name,Values<span class="o">=</span>running <span class="nt">--output</span> text <span class="p">;</span> <span class="nb">echo</span> <span class="s2">"------------------------------"</span> <span class="p">;</span> <span class="nb">sleep </span>1<span class="p">;</span> <span class="k">done</span>
<span class="c"># =&gt; app     3.36.26.23      running</span>
<span class="c">#    web     3.39.248.105    running</span>
    
<span class="c"># 확인</span>
<span class="nv">$ </span>tofu state list
<span class="nv">$ </span>tofu state <span class="nb">ls</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_ami.ubuntu"</span> | tofu console
<span class="nv">$ </span>tofu show          
</code></pre></div>        </div>
      </li>
      <li>tfstate 파일을 삭제하여 문제 상황을 만들어보겠습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 문제 상황 발생 : tfstate 파일 삭제</span>
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-r</span> .terraform<span class="k">*</span> terraform.tfstate<span class="k">*</span>
    
<span class="c"># EC2 ID 확인 : ID 메모 </span>
<span class="nv">$ </span>aws ec2 describe-instances <span class="nt">--query</span> <span class="s1">'Reservations[*].Instances[*].{InstanceID:InstanceId,PublicIP:PublicIpAddress,Name:Tags[?Key==`Name`]|[0].Value}'</span> <span class="nt">--output</span> json | jq <span class="nt">-r</span> <span class="s1">'.[][] | "\(.InstanceID)\t\(.PublicIP)\t\(.Name)"'</span>
<span class="c"># =&gt; i-051d42d1feafc4d4a     3.36.26.23      app</span>
<span class="c">#    i-0bb0a855d1749a7c2     3.39.248.105    web</span>
</code></pre></div>        </div>
      </li>
      <li>main.tf 파일 수정하여 instance id를 위에서 확인한 ID 값으로 수정합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"ubuntu"</span> <span class="p">{</span>
    <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
    
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"virtualization-type"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"hvm"</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"099720109477"</span><span class="p">]</span> <span class="c1"># Canonical</span>
<span class="p">}</span>
    
<span class="c1"># 추가 시작</span>
<span class="k">variable</span> <span class="s2">"instance_ids"</span> <span class="p">{</span>                                   
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"i-051d42d1feafc4d4a"</span><span class="p">,</span> <span class="s2">"i-0bb0a855d1749a7c2"</span><span class="p">]</span>
<span class="p">}</span>
<span class="c1"># 추가 종료</span>
    
<span class="k">variable</span> <span class="s2">"instance_tags"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"web"</span><span class="p">,</span> <span class="s2">"app"</span><span class="p">]</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"this"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">)</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">ubuntu</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t3.micro"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="c1"># 추가 시작</span>
<span class="nx">import</span> <span class="p">{</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">for</span> <span class="nx">idx</span><span class="p">,</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_ids</span> <span class="err">:</span> <span class="nx">idx</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">item</span> <span class="p">}</span>
  <span class="nx">to</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">this</span><span class="p">[</span><span class="nx">tonumber</span><span class="p">(</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="p">)]</span>
  <span class="nx">id</span> <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>
<span class="c1"># 추가 종료 </span>
</code></pre></div>        </div>
      </li>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 초기화 </span>
<span class="nv">$ </span>tofu init
    
<span class="c"># import 실행</span>
<span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Plan: 2 to import, 0 to add, 2 to change, 0 to destroy.</span>
<span class="c">#    aws_instance.this[1]: Importing... [id=i-0bb0a855d1749a7c2]</span>
<span class="c">#    aws_instance.this[1]: Import complete [id=i-0bb0a855d1749a7c2]</span>
<span class="c">#    aws_instance.this[0]: Importing... [id=i-051d42d1feafc4d4a]</span>
<span class="c">#    aws_instance.this[0]: Import complete [id=i-051d42d1feafc4d4a]</span>
<span class="c">#    aws_instance.this[0]: Modifying... [id=i-051d42d1feafc4d4a]</span>
<span class="c">#    aws_instance.this[1]: Modifying... [id=i-0bb0a855d1749a7c2]</span>
<span class="c">#    aws_instance.this[0]: Modifications complete after 1s [id=i-051d42d1feafc4d4a]</span>
<span class="c">#    aws_instance.this[1]: Modifications complete after 1s [id=i-0bb0a855d1749a7c2]</span>
<span class="c">#    Apply complete! Resources: 2 imported, 0 added, 2 changed, 0 destroyed.</span>
    
<span class="c"># 확인</span>
<span class="nv">$ </span>tofu state <span class="nb">ls</span>
<span class="nv">$ </span>tofu show
    
<span class="c"># 상태파일 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq    
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p>테라폼에서 한번에 하나씩만 import 할 수 있었는데 OpenTofu에서는 여러 건을 한꺼번에 import 할 수 있어 편리한것 같습니다. 
테라폼과 OpenTofu의 경쟁을 통해 더욱 빠르고 강력하게 될것같아 기대됩니다.</p>

<h4 id="실습-state-file-encryption---local">[실습] State file encryption - Local</h4>

<ul>
  <li>OpenTofu에서는 상태파일을 로컬 스토리지 및 백엔드에서 암호화 하는것을 지원합니다. 또한 <code class="language-plaintext highlighter-rouge">terraform_remote_state</code> 데이터 소스와 함께 암호화를 사용할 수도 있습니다.</li>
  <li>사용 형태
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">encryption</span> <span class="p">{</span>
    <span class="nx">key_provider</span> <span class="s2">"some_key_provider"</span> <span class="s2">"some_name"</span> <span class="p">{</span>
      <span class="c1"># 키 프로바이더 옵션 지정 </span>
    <span class="p">}</span>
  
    <span class="nx">method</span> <span class="s2">"some_method"</span> <span class="s2">"some_method_name"</span> <span class="p">{</span>
      <span class="c1"># 메쏘드 옵션 지정</span>
      <span class="nx">keys</span> <span class="p">=</span> <span class="nx">key_provider</span><span class="p">.</span><span class="nx">some_key_provider</span><span class="p">.</span><span class="nx">some_name</span>
    <span class="p">}</span>
  
    <span class="nx">state</span> <span class="p">{</span>
      <span class="c1"># 상태데이터 암호화/복호화</span>
      <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">some_method</span><span class="p">.</span><span class="nx">some_method_name</span>   
        
      <span class="nx">fallback</span> <span class="p">{</span>     <span class="c1"># (선택사항)</span>
        <span class="c1"># 위의 method가 실패할 경우 사용할 method</span>
        <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">some_method</span><span class="p">.</span><span class="nx">old_method_name</span>
      <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="nx">plan</span> <span class="p">{</span>
      <span class="c1"># 계획(plan) 데이터 암호화/복호화</span>
      <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">some_method</span><span class="p">.</span><span class="nx">some_method_name</span>
      <span class="nx">fallback</span> <span class="p">{</span>     <span class="c1"># (선택사항)</span>
        <span class="c1"># 위의 method가 실패할 경우 사용할 method</span>
        <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">some_method</span><span class="p">.</span><span class="nx">old_method_name</span>
      <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="nx">remote_state_data_sources</span> <span class="p">{</span>
      <span class="c1"># terraform_remote_state 데이터 소스 지정</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>위의 사용 형태를 조금 더 자세하게 알아보겠습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">encryption</span> <span class="p">{</span>
    <span class="c1">## Step 1: 암호화 되지 않은 method:</span>
    <span class="nx">method</span> <span class="s2">"unencrypted"</span> <span class="s2">"migrate"</span> <span class="p">{}</span>
  
    <span class="c1">## Step 2: key provider 지정 - 아래의 예제에서는 pbkdf2 키 프로바이더를 사용하고 리소스 이름을 mykey로 지정합니다.</span>
    <span class="nx">key_provider</span> <span class="s2">"pbkdf2"</span> <span class="s2">"mykey"</span> <span class="p">{</span>
      <span class="c1"># 암호화 키를 지정합니다. (pbkdf2는 16자 이상 지정이 필요합니다.)</span>
      <span class="nx">passphrase</span> <span class="p">=</span> <span class="s2">"correct-horse-battery-staple"</span>
  
      <span class="c1"># 암호화 키를 암호화 method에 맞게 조정합니다. (aes-gcm은 32자로 지정합니다.)</span>
      <span class="nx">key_length</span> <span class="p">=</span> <span class="mi">32</span>
        
      <span class="c1"># Specify the number of iterations (min. 200.000, default: 600.000)</span>
        <span class="c1">## The work factor for PBKDF2 is implemented through an iteration count, which should set differently based on the internal hashing algorithm used.</span>
            <span class="c1">## PBKDF2-HMAC-SHA1: 1,300,000 iterations</span>
            <span class="c1">## PBKDF2-HMAC-SHA256: 600,000 iterations</span>
            <span class="c1">## PBKDF2-HMAC-SHA512: 210,000 iterations</span>
  
      <span class="c1"># PBKDF2에서 사용할 반복 횟수를 지정하십시오 (최소 200,000, 기본값: 600,000)</span>
            <span class="c1">## PBKDF2-HMAC-SHA1: 1,300,000 iterations</span>
            <span class="c1">## PBKDF2-HMAC-SHA256: 600,000 iterations</span>
            <span class="c1">## PBKDF2-HMAC-SHA512: 210,000 iterations</span>
      <span class="nx">iterations</span> <span class="p">=</span> <span class="mi">600000</span>
        
      <span class="c1"># 암호화 salt 길이를 byte로 지정하십시오. (기본값: 32)</span>
      <span class="nx">salt_length</span> <span class="p">=</span> <span class="mi">32</span>
        
      <span class="c1"># 해시함수를 지정하십시오. (sha256 or sha512, default: sha512)</span>
      <span class="nx">hash_function</span> <span class="p">=</span> <span class="s2">"sha512"</span>  
    <span class="p">}</span>
  
    <span class="c1">## Step 3: 암호화 method를 지정하십시오 - 아래의 예제에서는 aes_gcm 암호화 method를 사용하고 리소스 이름을 new_method로 지정합니다.</span>
    <span class="nx">method</span> <span class="s2">"aes_gcm"</span> <span class="s2">"new_method"</span> <span class="p">{</span>
      <span class="c1"># 암호화 키를 지정합니다. 앞에서 만든 my_key 리소스를 지정합니다.</span>
      <span class="nx">keys</span> <span class="p">=</span> <span class="nx">key_provider</span><span class="p">.</span><span class="nx">pbkdf2</span><span class="p">.</span><span class="nx">mykey</span>
    <span class="p">}</span>
  
    <span class="nx">state</span> <span class="p">{</span>
      <span class="c1"># 상태 파일의 암호화 방법을 지정합니다.</span>
  
      <span class="c1">## Step 4: 암호화 method를 지정하십시오.</span>
      <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">aes_gcm</span><span class="p">.</span><span class="nx">new_method</span>
  
      <span class="c1">## Step 5: Step 4가 실패할 경우 사용할 "fallback" method를 지정하십시오.</span>
      <span class="nx">fallback</span> <span class="p">{</span>
        <span class="c1">## "unencrypted" method를 사용합니다.</span>
        <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">unencrypted</span><span class="p">.</span><span class="nx">migrate</span>
      <span class="p">}</span>
  
      <span class="c1">## Step 6: "tofu apply" 적용</span>
  
      <span class="c1">## Step 7: 암호화를 강제 하고 싶으면 fallback 블록을 삭제하고 아래의 enforce = true 옵션을 추가하십시오.</span>
      <span class="c1"># enforced = true</span>
    <span class="p">}</span>
  
    <span class="c1">## Step 8: 계획(plan)도 암호화 하고 싶다면 Step 4 ~ 7을 반복하십시오.</span>
  <span class="p">}</span>
<span class="p">}</span>  
</code></pre></div>    </div>
  </li>
  <li>암호화 실습
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
  
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">encryption</span> <span class="p">{</span>
    <span class="nx">key_provider</span> <span class="s2">"pbkdf2"</span> <span class="s2">"my_passphrase"</span> <span class="p">{</span>
      <span class="c1">## Enter a passphrase here:</span>
      <span class="nx">passphrase</span> <span class="p">=</span> <span class="s2">"ChangeIt_123abcd"</span>
    <span class="p">}</span>
  
    <span class="nx">method</span> <span class="s2">"aes_gcm"</span> <span class="s2">"my_method"</span> <span class="p">{</span>
      <span class="nx">keys</span> <span class="p">=</span> <span class="nx">key_provider</span><span class="p">.</span><span class="nx">pbkdf2</span><span class="p">.</span><span class="nx">my_passphrase</span>
    <span class="p">}</span>
  
    <span class="c1">## Remove this after the migration:</span>
    <span class="nx">method</span> <span class="s2">"unencrypted"</span> <span class="s2">"migration"</span> <span class="p">{</span>
    <span class="p">}</span>
  
    <span class="nx">state</span> <span class="p">{</span>
      <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">aes_gcm</span><span class="p">.</span><span class="nx">my_method</span>
  
      <span class="c1">## Remove the fallback block after migration:</span>
      <span class="nx">fallback</span><span class="p">{</span>
        <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">unencrypted</span><span class="p">.</span><span class="nx">migration</span>
      <span class="p">}</span>
      <span class="c1">## Enable this after migration:</span>
      <span class="c1">#enforced = true</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu init <span class="o">&amp;&amp;</span> tofu apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>tofu state list 
<span class="nv">$ </span>tofu show 
    
<span class="c"># 상태 파일 암호화 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
<span class="c"># =&gt; {</span>
<span class="c">#      "serial": 1,</span>
<span class="c">#      "lineage": "35fa959f-d819-8d1b-e036-c81f4827cf21",</span>
<span class="c">#      "meta": {</span>
<span class="c">#        "key_provider.pbkdf2.my_passphrase": "eyJzYWx0IjoiRGJXSzhyR3hBSHdQOUoxSmZncTYyaEJFSW9LaVZGNy9GK2JjSmlxQTBiT</span>
<span class="c">#         T0iLCJpdGVyYXRpb25zIjo2MDAwMDAsImhhc2hfZnVuY3Rpb24iOiJzaGE1MTIiLCJrZXlfbGVuZ3RoIjozMn0="</span>
<span class="c">#      },</span>
<span class="c">#      "encrypted_data": "EIuEr7sU9kb37t11Oy2JmbI1F/WFOYPuBjUlVV//IlrXVQYWyhlgw+JXu8m+2cztDGbkNIZ5h/giflO4nCUESI3mSP</span>
<span class="c">#         D8ZGETc80hR/JptGIv03RnKcyYXqzwoFDHS/7D8I4E5/itpBnmWCAXsFUTpoJ/vKySl3DfUrd/KFDKm0Db5RK2BjYywF+BeexpL7l//EZM</span>
<span class="c">#         zvyXkz0Tx85b+7q6SopHwUm1FztxSjqL2yiz1uZlyv5cJgUFHpsYV4geF/geMmDc5Kf9sysRNiJYaEJSrg==",</span>
<span class="c">#      "encryption_version": "v0"</span>
<span class="c">#    }    </span>
</code></pre></div>        </div>
      </li>
      <li>암호화 된 것을 확인할 수 있습니다.</li>
      <li>암호화가 apply 된 이후에는 <code class="language-plaintext highlighter-rouge">method "unencrypt"</code>와 <code class="language-plaintext highlighter-rouge">fallback</code> 블록을 삭제하고, <code class="language-plaintext highlighter-rouge">enforced = true</code> 옵션을 추가하여 암호화를 강제할 수 있습니다.</li>
    </ul>
  </li>
  <li>복호화 실습
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">encryption</span> <span class="p">{</span>
    <span class="nx">key_provider</span> <span class="s2">"pbkdf2"</span> <span class="s2">"my_passphrase"</span> <span class="p">{</span>
      <span class="c1">## Enter a passphrase here:</span>
      <span class="nx">passphrase</span> <span class="p">=</span> <span class="s2">"ChangeIt_123abcd"</span>
    <span class="p">}</span>
  
    <span class="nx">method</span> <span class="s2">"aes_gcm"</span> <span class="s2">"my_method"</span> <span class="p">{</span>
      <span class="nx">keys</span> <span class="p">=</span> <span class="nx">key_provider</span><span class="p">.</span><span class="nx">pbkdf2</span><span class="p">.</span><span class="nx">my_passphrase</span>
    <span class="p">}</span>
  
    <span class="c1">## Remove this after the migration:</span>
    <span class="nx">method</span> <span class="s2">"unencrypted"</span> <span class="s2">"migration"</span> <span class="p">{</span>
    <span class="p">}</span>
  
    <span class="nx">state</span> <span class="p">{</span>
      <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">unencrypted</span><span class="p">.</span><span class="nx">migration</span>
  
      <span class="c1">## Remove the fallback block after migration:</span>
      <span class="nx">fallback</span><span class="p">{</span>
        <span class="nx">method</span> <span class="p">=</span> <span class="nx">method</span><span class="p">.</span><span class="nx">aes_gcm</span><span class="p">.</span><span class="nx">my_method</span>
      <span class="p">}</span>
      <span class="c1"># Enable this after migration:</span>
      <span class="nx">enforced</span> <span class="p">=</span> <span class="kc">false</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
    
<span class="c"># 상태 파일 복호화 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
<span class="c"># =&gt; {</span>
<span class="c">#      "version": 4,</span>
<span class="c">#      "terraform_version": "1.7.3",</span>
<span class="c">#      "serial": 1,</span>
<span class="c">#      "lineage": "35fa959f-d819-8d1b-e036-c81f4827cf21",</span>
<span class="c">#      "outputs": {},</span>
<span class="c">#      "resources": [],</span>
<span class="c">#      "check_results": null</span>
<span class="c">#    }    </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>복호화가 정상적으로 되었음을 확인할 수 있습니다.
실습에서는 암호화키를 하드코딩하였지만,
실제 사용할때는 암호화 키를 변수로 입력 받도록 하거나, AWS KMS 와 같이 관리되는 키를 사용하면 보안성을 높일 수 있을것 같습니다.</li>
</ul>

<h4 id="실습-removed-block">[실습] Removed Block</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">removed</code> 블록을 사용하면 실제 인프라스트럭쳐에 프로비저닝된 리소스는 삭제하지 않고 상태파일에서만 삭제할 수 있습니다.</li>
  <li>사용 방법
    <ul>
      <li>먼저 리소스를 생성 합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"test"</span> <span class="p">{</span>
  <span class="nx">content</span> <span class="p">=</span> <span class="s2">"Hello world!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"test.txt"</span>
<span class="p">}</span> 
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">removed</code> 블록을 추가하여 상태파일에서만 삭제합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">removed</span> <span class="p">{</span>
  <span class="nx">from</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">test</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>실행을 하면 <code class="language-plaintext highlighter-rouge">local_file.test</code> 리소스는 상태 파일에서 삭제 되지만, 프로비저닝된 test.txt는 그대로 남아있음을 확인 할 수 있습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">removed</code> 블록을 apply 한 이후에 <code class="language-plaintext highlighter-rouge">resource</code> 블록을 삭제해도 됩니다.</li>
    </ul>
  </li>
  <li>실습
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"ubuntu"</span> <span class="p">{</span>
    <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
  
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span><span class="p">]</span>
    <span class="p">}</span>
  
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"virtualization-type"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"hvm"</span><span class="p">]</span>
    <span class="p">}</span>
  
    <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"099720109477"</span><span class="p">]</span> <span class="c1"># Canonical</span>
<span class="p">}</span>
  
<span class="k">variable</span> <span class="s2">"instance_tags"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"web"</span><span class="p">,</span> <span class="s2">"app"</span><span class="p">]</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"this"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">)</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">ubuntu</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t3.micro"</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_ssm_parameter"</span> <span class="s2">"this"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">)</span>
  <span class="nx">name</span>  <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="nx">type</span>  <span class="p">=</span> <span class="s2">"String"</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">this</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">].</span><span class="nx">id</span>
<span class="p">}</span>    
</code></pre></div>    </div>
    <ul>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu init <span class="o">&amp;&amp;</span> tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 4 added, 0 changed, 0 destroyed.</span>
    
<span class="nv">$ </span>tree .terraform
<span class="nv">$ </span>tofu state <span class="nb">ls</span>
<span class="nv">$ </span>tofu show
<span class="nv">$ </span>tofu state show <span class="s1">'aws_ssm_parameter.this[0]'</span>
    
<span class="c"># tfstate 파일 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
    
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'"i-'</span>
<span class="c"># =&gt; "id": "i-036b9e057c2eb71d8",</span>
<span class="c">#    "id": "i-0f8f05caabc524b47",</span>
<span class="c">#    "value": "i-036b9e057c2eb71d8",</span>
<span class="c">#    "value": "i-0f8f05caabc524b47",    </span>
    
<span class="c"># parameters 정보 확인</span>
<span class="nv">$ </span>aws ssm describe-parameters | jq
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"web"</span>
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"web"</span> <span class="nt">--query</span> <span class="s2">"Parameter.Value"</span> <span class="nt">--output</span> text
<span class="c"># =&gt; i-036b9e057c2eb71d8</span>
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"app"</span>
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"app"</span> <span class="nt">--query</span> <span class="s2">"Parameter.Value"</span> <span class="nt">--output</span> text
<span class="c"># =&gt; i-0f8f05caabc524b47</span>
    
<span class="c"># EC2 목록 확인</span>
<span class="nv">$ </span>aws ec2 describe-instances <span class="nt">--query</span> <span class="s1">'Reservations[*].Instances[*].{InstanceID:InstanceId,PublicIP:PublicIpAddress,Name:Tags[?Key==`Name`]|[0].Value}'</span> <span class="nt">--output</span> json | jq <span class="nt">-r</span> <span class="s1">'.[][] | "\(.InstanceID)\t\(.PublicIP)\t\(.Name)"'</span>
<span class="c"># =&gt; i-036b9e057c2eb71d8     3.34.132.49     web</span>
<span class="c">#    i-0f8f05caabc524b47     3.35.51.118     app   </span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">removed</code> 블록 추가하여 ssm parameter와 EC2를 리소스는 그대로 두고 state 파일에서만 삭제하겠습니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"ubuntu"</span> <span class="p">{</span>
    <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
    
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"virtualization-type"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"hvm"</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"099720109477"</span><span class="p">]</span> <span class="c1"># Canonical</span>
<span class="p">}</span>
    
<span class="k">variable</span> <span class="s2">"instance_tags"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"web"</span><span class="p">,</span> <span class="s2">"app"</span><span class="p">]</span>
<span class="p">}</span>
    
<span class="c1">## 리소스 정의 파일에서 주석처리하여 삭제</span>
<span class="c1"># resource "aws_instance" "this" {</span>
<span class="c1">#   count = length(var.instance_tags)</span>
<span class="c1">#   ami                    = data.aws_ami.ubuntu.id</span>
<span class="c1">#   instance_type          = "t3.micro"</span>
<span class="c1">#  </span>
<span class="c1">#   tags = {</span>
<span class="c1">#     Name = var.instance_tags[count.index]</span>
<span class="c1">#   }</span>
<span class="c1"># }</span>
    
<span class="c1">## 리소스 정의 파일에서 주석처리하여 삭제</span>
<span class="c1"># resource "aws_ssm_parameter" "this" {</span>
<span class="c1">#   count = length(var.instance_tags)</span>
<span class="c1">#   name  = var.instance_tags[count.index]</span>
<span class="c1">#   type  = "String"</span>
<span class="c1">#   value = aws_instance.this[count.index].id</span>
<span class="c1"># }    </span>
  
<span class="nx">removed</span> <span class="p">{</span> <span class="c1"># 추가</span>
  <span class="nx">from</span> <span class="p">=</span> <span class="nx">aws_ssm_parameter</span><span class="p">.</span><span class="nx">this</span>
<span class="p">}</span>
  
<span class="nx">removed</span> <span class="p">{</span> <span class="c1"># 추가</span>
  <span class="nx">from</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">this</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    # aws_ssm_parameter.this[0] will be removed from the OpenTofu state but will not be destroyed</span>
<span class="c">#    ...</span>
<span class="c">#    # aws_ssm_parameter.this[1] will be removed from the OpenTofu state but will not be destroyed</span>
<span class="c">#    Apply complete! Resources: 0 added, 0 changed, 0 destroyed.</span>

<span class="c"># tfstate 파일 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
    
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'"i-'</span>
<span class="c"># =&gt; &lt;결과 없음&gt;         </span>
</code></pre></div>        </div>
        <p>상태파일에서 삭제된것을 확인할 수 있었습니다. AWS에서 리소스를 확인해보겠습니다.</p>
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws ssm describe-parameters | jq
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"web"</span>
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"web"</span> <span class="nt">--query</span> <span class="s2">"Parameter.Value"</span> <span class="nt">--output</span> text
<span class="c"># =&gt; i-036b9e057c2eb71d8</span>
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"app"</span>
<span class="nv">$ </span>aws ssm get-parameter <span class="nt">--name</span> <span class="s2">"app"</span> <span class="nt">--query</span> <span class="s2">"Parameter.Value"</span> <span class="nt">--output</span> text
<span class="c"># =&gt; i-0f8f05caabc524b47</span>
    
<span class="nv">$ </span>aws ec2 describe-instances <span class="nt">--query</span> <span class="s1">'Reservations[*].Instances[*].{InstanceID:InstanceId,PublicIP:PublicIpAddress,Name:Tags[?Key==`Name`]|[0].Value}'</span> <span class="nt">--output</span> json | jq <span class="nt">-r</span> <span class="s1">'.[][] | "\(.InstanceID)\t\(.PublicIP)\t\(.Name)"'</span>
<span class="c"># =&gt; i-036b9e057c2eb71d8     3.34.132.49     web</span>
<span class="c">#    i-0f8f05caabc524b47     3.35.51.118     app</span>
</code></pre></div>        </div>
        <p>상태 파일에서는 없어졌지만 AWS에 프로비저닝된 리소스는 남아있는것을 확인할 수 있습니다.</p>
      </li>
      <li>이렇게하여 <code class="language-plaintext highlighter-rouge">removed</code> 블록을 실습해보았습니다. AWS에서 실습한 리소스를 삭제하시거나, 
추가적으로 import 블록을 사용하여 상태파일에 다시 넣은 다음 destroy 하는것을 실습해보는것도 좋을것 같습니다.</li>
    </ul>
  </li>
</ul>

<h4 id="실습-test">[실습] Test</h4>

<ul>
  <li>OpenTofu에서는 <code class="language-plaintext highlighter-rouge">tofu test</code>라는 명령을 통해 구성파일의 내용을 테스트 할 수 있습니다. 실제 인프라를 프로비저닝하고 원하는 조건이 맞는지 확인하는 과정을 거칩니다.
<code class="language-plaintext highlighter-rouge">postcondition</code>과 유사한데 <strong>다른 점</strong>은 테스트 중에 <strong>생성한 리소스는 자동으로 삭제된다</strong>는 것입니다.</li>
  <li>사용 방법
    <ul>
      <li>먼저 구성파일과 같은 디렉터리 또는 <code class="language-plaintext highlighter-rouge">tests</code> 디렉터리 아래에 <code class="language-plaintext highlighter-rouge">*.tftest.hcl</code> 파일을 생성합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">*.tftest.hcl</code> 파일에 테스트 코드를 작성합니다. 또한 테스트를 위한 변수파일 (.tfvars)가 필요하면 해당 파일도 <code class="language-plaintext highlighter-rouge">tests</code> 디렉터리에 만들면 테스트 시에만 사용 됩니다.</li>
      <li><code class="language-plaintext highlighter-rouge">*.tftest.hcl</code> 의 형태는 아래와 같습니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">run</span> <span class="s2">"test"</span> <span class="p">{</span>
  <span class="nx">assert</span> <span class="p">{</span>
    <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">file</span><span class="p">(</span><span class="nx">local_file</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">filename</span><span class="p">)</span> <span class="p">==</span> <span class="s2">"Hello world!"</span>
    <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"Incorrect content in </span><span class="k">${</span><span class="nx">local_file</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">filename</span><span class="k">}</span><span class="s2">."</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>실습
    <ul>
      <li>main.tf 작성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"test"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">string</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"this"</span> <span class="p">{</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/test.txt"</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">test</span>
<span class="p">}</span>     
</code></pre></div>        </div>
      </li>
      <li>tests/main.tftest.hcl 작성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tests/main.tftest.hcl           </span>
<span class="nx">run</span> <span class="s2">"test"</span> <span class="p">{</span>
  <span class="nx">assert</span> <span class="p">{</span>
    <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">file</span><span class="p">(</span><span class="nx">local_file</span><span class="p">.</span><span class="nx">this</span><span class="p">.</span><span class="nx">filename</span><span class="p">)</span> <span class="p">==</span> <span class="kd">var</span><span class="p">.</span><span class="nx">test</span>
    <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"Incorrect content in file"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>실행 후 확인
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu init
<span class="nv">$ </span>tree .terraform
    
<span class="c"># Test 실행</span>
<span class="nv">$ </span>tofu <span class="nb">test</span>
<span class="c"># =&gt; tests/main.tftest.hcl... fail</span>
<span class="c">#      run "test"... fail</span>
<span class="c">#      │ Error: No value for required variable</span>
</code></pre></div>        </div>
      </li>
      <li>변수가 없다며 테스트가 실패합니다. 변수를 넣어서 다시 실행해 보겠습니다.
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 방법1. -var 로 변수를 넣어서 실행</span>
<span class="nv">$ </span>tofu <span class="nb">test</span> <span class="nt">-var</span> <span class="s1">'test=Hello world!'</span>
<span class="c"># =&gt; tests/main.tftest.hcl... pass</span>
<span class="c">#      run "test"... pass</span>
<span class="c">#    Success! 1 passed, 0 failed.</span>
    
<span class="c"># 방법2. tests/terraform.tfvars 파일 작성</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'test = "T101 4th thank you!"'</span> <span class="o">&gt;</span> tests/terraform.tfvars 
<span class="nv">$ </span>tofu <span class="nb">test</span>
<span class="c"># =&gt; tests/main.tftest.hcl... pass</span>
<span class="c">#      run "test"... pass</span>
<span class="c">#    Success! 1 passed, 0 failed.</span>
    
<span class="nv">$ </span>tofu state list
<span class="c"># =&gt; No state file was found!</span>
<span class="c"># 상태파일이 없다고 나오는데, 테스트를 위해 프로비저닝한 리소스는 자동으로 삭제되어서 별도로 상태파일을 생성하지 않는것 같습니다.</span>

<span class="nv">$ </span><span class="nb">cat </span>test.txt
<span class="c"># =&gt; cat: test.txt: No such file or directory</span>
<span class="c"># 테스트된 파일은 삭제된것을 확인할 수 있습니다.</span>
        
<span class="c"># Apply 확인</span>
<span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>tofu state list
<span class="c"># =&gt; local_file.this    </span>
<span class="nv">$ </span><span class="nb">cat </span>test.txt
<span class="c"># =&gt; T101 4th thank you!</span>
</code></pre></div>        </div>
      </li>
      <li>혹시나 해서 <code class="language-plaintext highlighter-rouge">tofu test</code>를 한번더 실행한 다음 결과를 확인해보겠습니다.
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu <span class="nb">test</span>
<span class="nv">$ </span>tofu state list
<span class="c"># =&gt; local_file.this</span>
<span class="nv">$ </span><span class="nb">cat </span>test.txt
<span class="c"># =&gt; cat: test.txt: No such file or directory</span>
</code></pre></div>        </div>
      </li>
      <li>이미 프로비저닝 된 상태에서 test를 할 경우 <strong>상태파일은 남아있지만 실제 리소스(여기서는 파일)은 삭제되</strong>는것 같습니다. 
프로덕션 환경에서 사용시 주의가 필요해보입니다. :sweat_smile:</li>
    </ul>
  </li>
</ul>

<h4 id="실습-terraform을-opentofu-17로-이전하기">[실습] Terraform을 OpenTofu 1.7로 이전하기</h4>

<ul>
  <li>OpenTofu 1.7로 Terraform을 이전하는 방법을 실습해보겠습니다. Terraform 버전은 최소 1.8.2 이상을 사용할것을 권고한다 합니다.
여기에서는 Terraform 1.8.5 버전으로 실습해 보겠습니다.</li>
  <li>Tenv로 Terraform 1.8.5 설치
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tenv tf <span class="nb">install </span>1.8.5 
<span class="c"># =&gt; ...</span>
<span class="c">#    Installation of Terraform 1.8.5 successful</span>
<span class="nv">$ </span>tenv tf list
<span class="c"># =&gt;   1.8.5 (never used)</span>
<span class="nv">$ </span>tenv tf detect
</code></pre></div>    </div>
  </li>
  <li>main.tf 파일 작성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"ubuntu"</span> <span class="p">{</span>
    <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
  
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span><span class="p">]</span>
    <span class="p">}</span>
  
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"virtualization-type"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"hvm"</span><span class="p">]</span>
    <span class="p">}</span>
  
    <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"099720109477"</span><span class="p">]</span> <span class="c1"># Canonical</span>
<span class="p">}</span>
  
<span class="k">variable</span> <span class="s2">"instance_tags"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"web"</span><span class="p">,</span> <span class="s2">"app"</span><span class="p">]</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"this"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">)</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">ubuntu</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t3.micro"</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_tags</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>실행 후 확인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 초기화</span>
<span class="nv">$ </span>terraform init
  
<span class="c"># 프로바이더 정보 확인</span>
<span class="nv">$ </span>tree .terraform 
<span class="c"># =&gt; .terraform</span>
<span class="c">#    └── providers</span>
<span class="c">#        └── registry.terraform.io</span>
<span class="c">#            └── hashicorp</span>
<span class="c">#                └── aws</span>
<span class="c">#                    └── 5.61.0  </span>
                                 
<span class="c"># 적용</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 2 added, 0 changed, 0 destroyed.</span>
  
<span class="c"># EC2 확인</span>
<span class="nv">$ </span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span>aws ec2 describe-instances <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].{PublicIPAdd:PublicIpAddress,InstanceName:Tags[?Key=='Name']|[0].Value,Status:State.Name}"</span> <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>instance-state-name,Values<span class="o">=</span>running <span class="nt">--output</span> text <span class="p">;</span> <span class="nb">echo</span> <span class="s2">"------------------------------"</span> <span class="p">;</span> <span class="nb">sleep </span>1<span class="p">;</span> <span class="k">done</span>
<span class="c"># =&gt; app     3.38.165.56     running</span>
<span class="c">#    web     43.203.241.233  running</span>
  
<span class="c"># 상태 확인</span>
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; data.aws_ami.ubuntu</span>
<span class="c">#    aws_instance.this[0]</span>
<span class="c">#    aws_instance.this[1]</span>
  
<span class="c"># tfstate 파일 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
</code></pre></div>    </div>
  </li>
  <li>마이그레이션
    <ul>
      <li>현재 최신 상태여부 확인
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform plan 
<span class="c"># =&gt; No changes. Your infrastructure matches the configuration.</span>
</code></pre></div>        </div>
      </li>
      <li>tfstate 파일과 구성 파일 백업
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cp </span>terraform.tfstate terraform.tfstate.bak
<span class="nv">$ </span><span class="nb">cp </span>main.tf main.tf.bak
</code></pre></div>        </div>
      </li>
      <li>Terraform과 OpenTofu 간의 차이로 인한 수정이 불가피한 코드 변경
        <ul>
          <li>S3 Backend 사용시 다음의 변경이 필요합니다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">skip_s3_checksum</code> 옵션을 사용중이라면 OpenTofu는 필요로 하지 않기 때문에 삭제합니다.</li>
              <li><code class="language-plaintext highlighter-rouge">endpoints</code> =&gt; <code class="language-plaintext highlighter-rouge">sso</code> 옵션을 사용중이거나 <code class="language-plaintext highlighter-rouge">AWS_ENDPOINT_URL</code> 환경 변수를 사용중이라면 삭제합니다.</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">removed</code> 블록 삭제 : OpenTofu의 <code class="language-plaintext highlighter-rouge">removed</code> 블록과는 동작 방식 차이가 있기 때문에 삭제합니다.</li>
        </ul>
      </li>
      <li>OpenTofu 초기화 및 Plan
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 초기화</span>
<span class="nv">$ </span>tofu init
<span class="nv">$ </span>tree .terraform <span class="nt">-L</span> 5 
<span class="c"># =&gt; .terraform</span>
<span class="c">#    └── providers</span>
<span class="c">#        ├── registry.opentofu.org</span>
<span class="c">#        │   └── hashicorp</span>
<span class="c">#        │       └── aws</span>
<span class="c">#        │           └── 5.61.0</span>
<span class="c">#        └── registry.terraform.io</span>
<span class="c">#            └── hashicorp</span>
<span class="c">#                └── aws</span>
<span class="c">#                    └── 5.61.0</span>
    
<span class="c"># Plan</span>
<span class="nv">$ </span>tofu plan
<span class="c"># =&gt; No changes. Your infrastructure matches the configuration.</span>
</code></pre></div>        </div>
      </li>
      <li>정상적으로 Terraform을 OpenTofu로 마이그레이션 완료한것 같습니다. <code class="language-plaintext highlighter-rouge">.terraform</code> 디렉터리에는 Terraform용 프로바이더와 OpenTofu용 프로바이더 둘 다 존재하는것을 확인할 수 있습니다.</li>
      <li>이제 실제 적용해 보겠습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; No changes. Your infrastructure matches the configuration.</span>
<span class="c">#    OpenTofu has compared your real infrastructure against your configuration and found no differences, so no changes are needed.</span>
<span class="c">#    Apply complete! Resources: 0 added, 0 changed, 0 destroyed.</span>
    
<span class="c"># EC2 인스턴스에 신규 태그를 추가 후 apply 해보겠습니다.</span>
<span class="nv">$ </span>vi main.tf 
...
tags <span class="o">=</span> <span class="o">{</span>
  Name <span class="o">=</span> var.instance_tags[count.index]
  T101 <span class="o">=</span> <span class="s2">"end"</span>
<span class="o">}</span>
...
    
<span class="c"># 적용</span>
<span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
</code></pre></div>        </div>
        <p><img src="/assets/2024/t101-4th/20240803_terraform_w8_opentofu_2.png" alt="img.png" /></p>
      </li>
    </ul>
  </li>
  <li>실습 리소스 삭제
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu destroy <span class="nt">-auto-approve</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="opentofu-18">OpenTofu 1.8</h3>

<ul>
  <li>OpenTofu 1.8이 지난 7월 29일 출시 되었습니다. 자세한 소식은 아래의 블로그에서 확인할 수 있습니다.
    <ul>
      <li><a href="https://opentofu.org/blog/opentofu-1-8-0/">OpenTofu 1.8 릴리즈 블로그</a></li>
      <li><a href="https://github.com/opentofu/opentofu/releases/tag/v1.8.0">OpenTofu 1.8 Github</a></li>
    </ul>
  </li>
  <li>주요 변경점은 아래와 같습니다.
    <ul>
      <li>variable과 locals를 module 소스와 backend 설정에 사용할 수 있게 되었습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">.tofu</code> 확장자가 추가되었습니다. <code class="language-plaintext highlighter-rouge">.tf</code> 파일에 추가적으로 OpenTofu 전용 기능을 사용할 수 있습니다.</li>
      <li>테스트 프레임워크에서 사용할 수 있는 <code class="language-plaintext highlighter-rouge">override_resource</code>, <code class="language-plaintext highlighter-rouge">override_data</code>, <code class="language-plaintext highlighter-rouge">override_module</code>,
<code class="language-plaintext highlighter-rouge">mock_resource</code>, <code class="language-plaintext highlighter-rouge">mock_data</code>, <code class="language-plaintext highlighter-rouge">mock_module</code> 등이 추가되었습니다.</li>
      <li>Deprecation : <code class="language-plaintext highlighter-rouge">use_legacy_workflow</code> 가 S3 backend 설정에서 제거되었습니다.</li>
    </ul>
  </li>
  <li>1.8.0 사용 설정
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tenv tofu list
<span class="c"># =&gt; * 1.7.3</span>
<span class="nv">$ </span>tenv tofu list-remote 
<span class="c"># =&gt; ...</span>
<span class="c">#    1.7.3 (installed)</span>
<span class="c">#    ...</span>
<span class="c">#    1.8.0 </span>
  
<span class="c"># 설치</span>
<span class="nv">$ </span>tenv tofu <span class="nb">install </span>1.8.0
<span class="nv">$ </span>tenv tofu list
<span class="nv">$ </span>tenv tofu use 1.8.0
<span class="nv">$ </span>tenv tofu detect
  
<span class="c"># 버전 확인</span>
<span class="nv">$ </span>tofu <span class="nt">-h</span>
<span class="nv">$ </span>tofu version
<span class="c"># =&gt; OpenTofu v1.8.0</span>
<span class="c">#    on darwin_arm64</span>
<span class="c">#    + provider registry.opentofu.org/hashicorp/aws v5.61.0</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="실습-early-variablelocals-evaluation">[실습] Early variable/locals evaluation</h4>

<p><img src="/assets/2024/t101-4th/20240803_terraform_w8_opentofu_3.png" alt="img.png" />
기존에는 variable을 Backend 설정이나 mobule 블록, 암호화 설정 등에서 사용하지 못하였는데 OpenTofu 1.8부터는 사용할 
수 있게 되었습니다. 실습을 통해 알아보겠습니다.</p>

<ul>
  <li>AWS S3 버킷 생성 : Backend State 저장용도
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws s3 mb s3://&lt;생성할 고유한 S3 버킷명&gt; <span class="nt">--region</span> ap-northeast-2 
<span class="nv">$ </span>aws s3 mb s3://t101-4th-tofu-1-8 <span class="nt">--region</span> ap-northeast-2
  
<span class="c"># 버킷 확인</span>
<span class="nv">$ </span>aws s3 <span class="nb">ls</span> 
</code></pre></div>    </div>
  </li>
  <li>main.tf 생성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tofu</span>
<span class="k">variable</span> <span class="s2">"s3bucket_myname"</span> <span class="p">{</span>
 <span class="nx">type</span> <span class="p">=</span> <span class="nx">string</span>
 <span class="nx">default</span> <span class="p">=</span> <span class="s2">"t101-4th-tofu-1-8"</span> <span class="c1"># 생성한 S3 버킷명</span>
<span class="p">}</span>
  
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">backend</span> <span class="s2">"s3"</span> <span class="p">{</span>
    <span class="nx">bucket</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">s3bucket_myname</span>
    <span class="nx">key</span> <span class="p">=</span> <span class="s2">"terraform.tfstate"</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
    <span class="nx">encrypt</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"ubuntu"</span> <span class="p">{</span>
    <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
  
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span><span class="p">]</span>
    <span class="p">}</span>
  
    <span class="nx">filter</span> <span class="p">{</span>
        <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"virtualization-type"</span>
        <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"hvm"</span><span class="p">]</span>
    <span class="p">}</span>
  
    <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"099720109477"</span><span class="p">]</span> <span class="c1"># Canonical</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"this"</span> <span class="p">{</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">ubuntu</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t3.micro"</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"final-labs"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>초기화 및 프로바이더 확인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 테라폼으로 확인</span>
<span class="nv">$ </span>terraform init
<span class="c"># =&gt; Initializing the backend...</span>
<span class="c">#    │ Error: Variables not allowed</span>
<span class="c">#    │   on main.tf line 8, in terraform:</span>
<span class="c">#    │    8:     bucket = var.s3bucket_myname</span>
<span class="c">#    │ Variables may not be used here.</span>
  
<span class="c"># OpenTofu 1.7.x로 확인</span>
<span class="nv">$ </span>tenv tofu use 1.7.3
<span class="nv">$ </span>tofu version
<span class="c"># =&gt; OpenTofu v1.7.3</span>
<span class="c">#    on darwin_arm64</span>
<span class="nv">$ </span>tofu init
<span class="c"># =&gt; Initializing the backend...</span>
<span class="c">#    │ Error: Variables not allowed</span>
<span class="c">#    │   on main.tf line 8, in terraform:</span>
<span class="c">#    │    8:     bucket = var.s3bucket_myname</span>
<span class="c">#    │ Variables may not be used here.</span>
  
<span class="c"># OpenTofu 1.8.0로 확인</span>
<span class="nv">$ </span>tenv tofu use 1.8.0
<span class="nv">$ </span>
<span class="c"># =&gt; OpenTofu v1.8.0</span>
<span class="c">#    on darwin_arm64</span>
<span class="nv">$ </span>tofu init
<span class="c"># =&gt; Initializing the backend...    </span>
<span class="c">#    ...</span>
<span class="c">#    OpenTofu has been successfully initialized!</span>
</code></pre></div>    </div>
    <p>Terraform이나 OpenTofu 1.7.x에서는 Backend 설정에 variable을 사용할 수 없었지만, OpenTofu 1.8.0에서는 사용할 수 있게 된것을 확인하였습니다.
이제 적용을 해서 실제 동작하는지 확인해보겠습니다.</p>
  </li>
  <li>실행
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tofu apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span>
  
<span class="c"># 확인</span>
<span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://t101-4th-tofu-1-8
<span class="c"># =&gt; 2024-08-03 21:04:56       4890 terraform.tfstate</span>
<span class="nv">$ </span><span class="nb">cat</span> .terraform/terraform.tfstate | <span class="nb">grep </span>bucket
<span class="c"># =&gt; "bucket": "t101-4th-tofu-1-8",  </span>
</code></pre></div>    </div>
    <p>잘 동작하여 상태파일이 S3 Backend에 잘 저장되었음을 확인할 수 있습니다.</p>
  </li>
  <li>실습 리소스 삭제
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 리소스 삭제</span>
<span class="nv">$ </span>tofu apply <span class="nt">-destroy</span> <span class="nt">-auto-approve</span>
  
<span class="c"># 상태파일은 아직 존재 합니다.</span>
<span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://t101-4th-tofu-1-8
  
<span class="c"># 상태파일을 삭제하고</span>
<span class="nv">$ </span>aws s3 <span class="nb">rm </span>s3://t101-4th-tofu-1-8 <span class="nt">--recursive</span>
<span class="c"># 버킷을 삭제합니다.</span>
<span class="nv">$ </span>aws s3 rb s3://t101-4th-tofu-1-8
  
<span class="c"># 버킷이 삭제되었음을 확인합니다.</span>
<span class="nv">$ </span>aws s3 <span class="nb">ls</span> 
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="마치며">마치며</h2>

<p>이렇게 OpenTofu에 대하여 알아보았습니다.
Terraform이 계속 오픈소스 커뮤니티의 사랑을 받았었다면 좋았겠지만,
그러지 못하여 OpenTofu가 나온것을 보면 다소 씁쓸합니다.
아무쪼록 경쟁을 통해 둘 다 발전하는 모습을 보여주었으면 좋겠습니다.</p>

<p>이번 테라폼 기초 입문 실습 스터디 4기 과정을 통해 IaC가 무엇인지와
Terraform 사용 방법 등 많은것을 배울 수 있었습니다.
가장 큰 결실은 블로그를 만들었다는 것입니다!
회사 팀장님의 추천에 얼떨결에 시작하였고,
매주 블로그 글 쓰기가 벅차서 몇 번이고 포기 할뻔 했지만 
무사히 마칠 수 있어서 감개무량합니다. (이번주도 무사히 지나가야 하긴 합니다. :sweat_smile:)
앞으로도 꾸준히 배우고 누군가에게 도움이 될 수 있도록 
블로그에 기록하며 성장해 나가겠습니다.</p>

<p>함께 고생한 Gasida님을 비롯한 T101 4기 멤버분들도 모두 고생 많으셨습니다.
특히 매주 실습을 준비하고, 강의를 진행해주신 Gasida님과 조력자 분들께 감사드립니다.
다음 스터디도 참여할 수 있다면 또 열심히 달려보겠습니다.
다들 건강하시고 행복한 모습으로 다시 뵙기를 고대합니다! :smile:</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[이번 주가 8주차이자 벌써 마지막주차입니다. T101 4기에서 마지막으로 알아볼 주제는 OpenTofu로 Terraform의 오픈소스 커뮤니티에서 포크한 버전으로 앞으로가 기대되는 프로젝트입니다.]]></summary></entry><entry><title type="html">[T101 4기] 테라폼으로 AWS EKS 배포</title><link href="https://sweetlittlebird.github.io/posts/2024-07-27-T101-Study-Terraform-Week-7/" rel="alternate" type="text/html" title="[T101 4기] 테라폼으로 AWS EKS 배포" /><published>2024-07-27T16:02:00+09:00</published><updated>2024-07-27T16:02:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%207</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-07-27-T101-Study-Terraform-Week-7/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>이번 주에는 테라폼으로 AWS EKS 배포를 하는것을
<a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a>를 통해 알아 보겠습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="amazon-eks-blueprints-for-terraform">Amazon EKS Blueprints for Terraform</h2>

<h3 id="개요">개요</h3>

<ul>
  <li><a href="https://aws-ia.github.io/terraform-aws-eks-blueprints/">Amazon EKS BluePrints 소개 Link</a> / <a href="https://aws-ia.github.io/terraform-aws-eks-blueprints/faq/">FAQ Link</a></li>
  <li>Amazon EKS Blueprints for Terraform은 Terraform으로 Amazon EKS 클러스터를 구축하는 패턴들의 모음이며, Amazon EKS를 도입하는것이 얼마나 빠르고 쉬운지 보여줍니다.</li>
  <li>사용 방법은 Amazon EKS Blueprints를 <strong>참고해서</strong> 원하는 패턴을 선택하고 Terraform을 사용해서 클러스터를 구축하는 방법과, 필요한 스니펫들을 <strong>복사해서</strong> 사용할 수 있습니다.</li>
  <li>주의할 점
    <ul>
      <li>Amazon EKS Blueprints는 <strong>AWS CloudFormation</strong>을 사용하는 것이 아니라 <strong>Terraform</strong>을 사용합니다.</li>
      <li>있는 그대로 사용되는것을 권장하지 않으며, <strong>사용자의 환경에 맞게 수정</strong>해서 사용하는것을 권장합니다.</li>
      <li>패턴과 스니펫은 Terraform 모듈로 설계되지 않았으며, 모듈화를 하려면는 사용자가 직접 수행해야 합니다.</li>
      <li>Local 블록을 주로 사용하며, 특정 정보가 필요한 경우 (Route 53 호스트 영역 ID 등)만 Variable 블록을 사용합니다.</li>
      <li>복잡성을 줄이기위해 variable과 outputs가 최대한 사용되지 않았습니다.</li>
    </ul>
  </li>
</ul>

<h3 id="실습-eks-fargate-및-karpenter-배포">[실습] EKS Fargate 및 Karpenter 배포</h3>

<p>먼저 <code class="language-plaintext highlighter-rouge">EKS</code>와 <code class="language-plaintext highlighter-rouge">Fargate</code>, <code class="language-plaintext highlighter-rouge">Karpenter</code>에 대해 간략하게 알아보겠습니다.</p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_1.png" alt="EKS 소개" />
<code class="language-plaintext highlighter-rouge">EKS</code>는 Elastic Kubernetes Service의 약자로, AWS에서 제공하는 <strong>관리형 Kubernetes 서비스</strong>입니다.
EKS를 사용하면 컨테이너 예약, 가용성 관리, 클러스터의 데이터 저장 및 다른 주요 작업을 담당하는 Kubernetes 컨트롤 플레인의
가용성과 확장성을 쉽게 관리할 수 있습니다. EKS는 컨테이너를 EC2 상에서 운영하거나 Fargate를 통해 
탄력적으로 서버리스 방식으로 운영할 수도 있습니다.
<a href="https://aws.amazon.com/ko/eks/">AWS EKS 소개</a></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_2.png" alt="Fargate와 기존 EC2 방식의 컨테이너 배포와 비교" />
<code class="language-plaintext highlighter-rouge">Fargate</code>는 AWS에서 제공하는 <strong>서버리스 컴퓨팅 엔진</strong>으로, 컨테이너를 별도의 <strong>서버 관리 없이, 컨테이너를 사용한 만큼만</strong> 비용을 지불할 수 있는 서비스입니다. <a href="https://aws.amazon.com/ko/fargate/">AWS Fargate 소개</a></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_36.png" alt="Karpenter의 동작 방식 소개" />
<code class="language-plaintext highlighter-rouge">Karpenter</code>는 Kubernetes 클러스터에 동작하는 Node를 최적화하여 효율성과 비용을 최적화하는 오픈소스 프로젝트입니다.
Karpenter는 Node의 리소스 부족으로 스케쥴 되지 못한 pod들을 Node를 추가하여 스케쥴링하는 Autoscaling 기능 뿐만 아니라,
각각 Node들을 조각모음 하듯이 더 크고 저렴한 하나의 노드로 교체하는 등의 전략을 통해 비용을 최적화합니다.
<a href="https://aws.amazon.com/ko/blogs/containers/introducing-karpenter/">Karpenter 소개</a></p>

<ul>
  <li>이번에 실습할 패턴은 <code class="language-plaintext highlighter-rouge">Karpenter</code>를 통하여 Fargate에 서버리스 클러스터를 프로비저닝하는 것으로 먼저 EKS와 Fargate를 배포하고, 그 다음에 Karpenter를 배포하는 것을 실습해보겠습니다.</li>
</ul>

<h4 id="사전준비">사전준비</h4>
<ul>
  <li>awscli, terraform, kubectl, helm 등 설치
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 설치된 파일 버전 확인</span>
<span class="nv">$ </span>aws <span class="nt">--version</span>
<span class="c"># =&gt; aws-cli/2.17.14 Python/3.11.9 Darwin/22.6.0 source/arm64</span>
<span class="nv">$ </span>terraform <span class="nt">--version</span>
<span class="c"># =&gt; Terraform v1.8.5</span>
<span class="nv">$ </span>kubectl version <span class="nt">--client</span><span class="o">=</span><span class="nb">true</span>
<span class="c"># =&gt; Client Version: version.Info{Major:"1", Minor:"22", GitVersion:"v1.22.5", GitCommit:"5c99e2ac2ff9a3c549d9ca665e7bc05a3e18f07e", GitTreeState:"clean", BuildDate:"2021-12-16T08:38:33Z", GoVersion:"go1.16.12", Compiler:"gc", Platform:"darwin/arm64"}</span>
<span class="nv">$ </span>helm version 
<span class="c"># =&gt; version.BuildInfo{Version:"v3.15.3", GitCommit:"3bb50bbbdd9c946ba9989fbe4fb4104766302a64", GitTreeState:"clean", GoVersion:"go1.22.5"}</span>
</code></pre></div>    </div>
  </li>
  <li>코드 준비 - <a href="https://github.com/aws-ia/terraform-aws-eks-blueprints">Github</a>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/aws-ia/terraform-aws-eks-blueprints
<span class="nv">$ </span><span class="nb">cd </span>terraform-aws-eks-blueprints/patterns/karpenter
<span class="nv">$ </span>tree 
</code></pre></div>    </div>
    <ul>
      <li>versions.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_version</span> <span class="p">=</span> <span class="s2">"&gt;= 1.3"</span>
    
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 5.34"</span>
    <span class="p">}</span>
    <span class="nx">helm</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/helm"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 2.9"</span>
    <span class="p">}</span>
    <span class="nx">kubernetes</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/kubernetes"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 2.20"</span>
    <span class="p">}</span>
  <span class="p">}</span>
    
  <span class="c1"># ##  Used for end-to-end testing on project; update to suit your needs</span>
  <span class="c1"># backend "s3" {</span>
  <span class="c1">#   bucket = "terraform-ssp-github-actions-state"</span>
  <span class="c1">#   region = "us-west-2"</span>
  <span class="c1">#   key    = "e2e/karpenter/terraform.tfstate"</span>
  <span class="c1"># }</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>main.tf</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">region</span>
<span class="p">}</span>
    
<span class="c1"># Required for public ECR where Karpenter artifacts are hosted</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"us-east-1"</span>
  <span class="nx">alias</span>  <span class="p">=</span> <span class="s2">"virginia"</span>
<span class="p">}</span>
    
<span class="k">provider</span> <span class="s2">"kubernetes"</span> <span class="p">{</span>
  <span class="nx">host</span>                   <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_endpoint</span>
  <span class="nx">cluster_ca_certificate</span> <span class="p">=</span> <span class="nx">base64decode</span><span class="p">(</span><span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_certificate_authority_data</span><span class="p">)</span>
    
  <span class="nx">exec</span> <span class="p">{</span>
    <span class="nx">api_version</span> <span class="p">=</span> <span class="s2">"client.authentication.k8s.io/v1beta1"</span>
    <span class="nx">command</span>     <span class="p">=</span> <span class="s2">"aws"</span>
    <span class="c1"># This requires the awscli to be installed locally where Terraform is executed</span>
    <span class="nx">args</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"eks"</span><span class="p">,</span> <span class="s2">"get-token"</span><span class="p">,</span> <span class="s2">"--cluster-name"</span><span class="p">,</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_name</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">provider</span> <span class="s2">"helm"</span> <span class="p">{</span>
  <span class="nx">kubernetes</span> <span class="p">{</span>
    <span class="nx">host</span>                   <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_endpoint</span>
    <span class="nx">cluster_ca_certificate</span> <span class="p">=</span> <span class="nx">base64decode</span><span class="p">(</span><span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_certificate_authority_data</span><span class="p">)</span>
    
    <span class="nx">exec</span> <span class="p">{</span>
      <span class="nx">api_version</span> <span class="p">=</span> <span class="s2">"client.authentication.k8s.io/v1beta1"</span>
      <span class="nx">command</span>     <span class="p">=</span> <span class="s2">"aws"</span>
      <span class="c1"># This requires the awscli to be installed locally where Terraform is executed</span>
      <span class="nx">args</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"eks"</span><span class="p">,</span> <span class="s2">"get-token"</span><span class="p">,</span> <span class="s2">"--cluster-name"</span><span class="p">,</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_name</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">data</span> <span class="s2">"aws_ecrpublic_authorization_token"</span> <span class="s2">"token"</span> <span class="p">{</span>
  <span class="k">provider</span> <span class="p">=</span> <span class="nx">aws</span><span class="p">.</span><span class="nx">virginia</span>
<span class="p">}</span>
    
<span class="k">data</span> <span class="s2">"aws_availability_zones"</span> <span class="s2">"available"</span> <span class="p">{}</span>
    
<span class="nx">locals</span> <span class="p">{</span>
  <span class="c1"># name   = "ex-${basename(path.cwd)}"</span>
  <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"t101-</span><span class="k">${</span><span class="nx">basename</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">cwd</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span>
  <span class="c1"># region = "us-west-2"</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
    
  <span class="nx">vpc_cidr</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">azs</span>      <span class="p">=</span> <span class="nx">slice</span><span class="p">(</span><span class="k">data</span><span class="p">.</span><span class="nx">aws_availability_zones</span><span class="p">.</span><span class="nx">available</span><span class="p">.</span><span class="nx">names</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Blueprint</span>  <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">name</span>
    <span class="nx">GithubRepo</span> <span class="p">=</span> <span class="s2">"github.com/aws-ia/terraform-aws-eks-blueprints"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="c1">################################################################################</span>
<span class="c1"># Cluster</span>
<span class="c1">################################################################################</span>
    
<span class="k">module</span> <span class="s2">"eks"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"terraform-aws-modules/eks/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 20.11"</span>
    
  <span class="nx">cluster_name</span>                   <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">name</span>
  <span class="nx">cluster_version</span>                <span class="p">=</span> <span class="s2">"1.30"</span>
  <span class="nx">cluster_endpoint_public_access</span> <span class="p">=</span> <span class="kc">true</span>
    
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">vpc</span><span class="p">.</span><span class="nx">vpc_id</span>
  <span class="nx">subnet_ids</span> <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">vpc</span><span class="p">.</span><span class="nx">private_subnets</span>
    
  <span class="c1"># Fargate profiles use the cluster primary security group so these are not utilized</span>
  <span class="nx">create_cluster_security_group</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="nx">create_node_security_group</span>    <span class="p">=</span> <span class="kc">false</span>
    
  <span class="nx">enable_cluster_creator_admin_permissions</span> <span class="p">=</span> <span class="kc">true</span>
    
  <span class="nx">fargate_profiles</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">karpenter</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">selectors</span> <span class="p">=</span> <span class="p">[</span>
        <span class="p">{</span> <span class="nx">namespace</span> <span class="p">=</span> <span class="s2">"karpenter"</span> <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">}</span>
    <span class="nx">kube_system</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"kube-system"</span>
      <span class="nx">selectors</span> <span class="p">=</span> <span class="p">[</span>
        <span class="p">{</span> <span class="nx">namespace</span> <span class="p">=</span> <span class="s2">"kube-system"</span> <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="nx">merge</span><span class="p">(</span><span class="kd">local</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="c1"># NOTE - if creating multiple security groups with this module, only tag the</span>
    <span class="c1"># security group that Karpenter should utilize with the following tag</span>
    <span class="c1"># (i.e. - at most, only one security group should have this tag in your account)</span>
    <span class="s2">"karpenter.sh/discovery"</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">name</span>
  <span class="p">})</span>
<span class="p">}</span>
    
<span class="c1">################################################################################</span>
<span class="c1"># EKS Blueprints Addons</span>
<span class="c1">################################################################################</span>
    
<span class="k">module</span> <span class="s2">"eks_blueprints_addons"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"aws-ia/eks-blueprints-addons/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 1.16"</span>
    
  <span class="nx">cluster_name</span>      <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="nx">cluster_endpoint</span>  <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_endpoint</span>
  <span class="nx">cluster_version</span>   <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_version</span>
  <span class="nx">oidc_provider_arn</span> <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">oidc_provider_arn</span>
    
  <span class="c1"># We want to wait for the Fargate profiles to be deployed first</span>
  <span class="nx">create_delay_dependencies</span> <span class="p">=</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">prof</span> <span class="nx">in</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">fargate_profiles</span> <span class="err">:</span> <span class="nx">prof</span><span class="p">.</span><span class="nx">fargate_profile_arn</span><span class="p">]</span>
    
  <span class="nx">eks_addons</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">coredns</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">configuration_values</span> <span class="p">=</span> <span class="nx">jsonencode</span><span class="p">({</span>
        <span class="nx">computeType</span> <span class="p">=</span> <span class="s2">"Fargate"</span>
        <span class="c1"># Ensure that the we fully utilize the minimum amount of resources that are supplied by</span>
        <span class="c1"># Fargate https://docs.aws.amazon.com/eks/latest/userguide/fargate-pod-configuration.html</span>
        <span class="c1"># Fargate adds 256 MB to each pod's memory reservation for the required Kubernetes</span>
        <span class="c1"># components (kubelet, kube-proxy, and containerd). Fargate rounds up to the following</span>
        <span class="c1"># compute configuration that most closely matches the sum of vCPU and memory requests in</span>
        <span class="c1"># order to ensure pods always have the resources that they need to run.</span>
        <span class="nx">resources</span> <span class="p">=</span> <span class="p">{</span>
          <span class="nx">limits</span> <span class="p">=</span> <span class="p">{</span>
            <span class="nx">cpu</span> <span class="p">=</span> <span class="s2">"0.25"</span>
            <span class="c1"># We are targeting the smallest Task size of 512Mb, so we subtract 256Mb from the</span>
            <span class="c1"># request/limit to ensure we can fit within that task</span>
            <span class="nx">memory</span> <span class="p">=</span> <span class="s2">"256M"</span>
          <span class="p">}</span>
          <span class="nx">requests</span> <span class="p">=</span> <span class="p">{</span>
            <span class="nx">cpu</span> <span class="p">=</span> <span class="s2">"0.25"</span>
            <span class="c1"># We are targeting the smallest Task size of 512Mb, so we subtract 256Mb from the</span>
            <span class="c1"># request/limit to ensure we can fit within that task</span>
            <span class="nx">memory</span> <span class="p">=</span> <span class="s2">"256M"</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">}</span>
    <span class="nx">vpc-cni</span>    <span class="p">=</span> <span class="p">{}</span>
    <span class="nx">kube-proxy</span> <span class="p">=</span> <span class="p">{}</span>
  <span class="p">}</span>
    
  <span class="nx">enable_karpenter</span> <span class="p">=</span> <span class="kc">true</span>
    
  <span class="nx">karpenter</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">repository_username</span> <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ecrpublic_authorization_token</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">user_name</span>
    <span class="nx">repository_password</span> <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ecrpublic_authorization_token</span><span class="p">.</span><span class="nx">token</span><span class="p">.</span><span class="nx">password</span>
  <span class="p">}</span>
    
  <span class="nx">karpenter_node</span> <span class="p">=</span> <span class="p">{</span>
    <span class="c1"># Use static name so that it matches what is defined in `karpenter.yaml` example manifest</span>
    <span class="nx">iam_role_use_name_prefix</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="p">}</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">tags</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_eks_access_entry"</span> <span class="s2">"karpenter_node_access_entry"</span> <span class="p">{</span>
  <span class="nx">cluster_name</span>      <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="nx">principal_arn</span>     <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">eks_blueprints_addons</span><span class="p">.</span><span class="nx">karpenter</span><span class="p">.</span><span class="nx">node_iam_role_arn</span>
  <span class="nx">kubernetes_groups</span> <span class="p">=</span> <span class="p">[]</span>
  <span class="nx">type</span>              <span class="p">=</span> <span class="s2">"EC2_LINUX"</span>
<span class="p">}</span>
    
<span class="c1">################################################################################</span>
<span class="c1"># Supporting Resources</span>
<span class="c1">################################################################################</span>
    
<span class="k">module</span> <span class="s2">"vpc"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"terraform-aws-modules/vpc/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 5.0"</span>
    
  <span class="nx">name</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">name</span>
  <span class="nx">cidr</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">vpc_cidr</span>
    
  <span class="nx">azs</span>             <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">azs</span>
  <span class="nx">private_subnets</span> <span class="p">=</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">local</span><span class="p">.</span><span class="nx">azs</span> <span class="err">:</span> <span class="nx">cidrsubnet</span><span class="p">(</span><span class="kd">local</span><span class="p">.</span><span class="nx">vpc_cidr</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">k</span><span class="p">)]</span>
  <span class="nx">public_subnets</span>  <span class="p">=</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">local</span><span class="p">.</span><span class="nx">azs</span> <span class="err">:</span> <span class="nx">cidrsubnet</span><span class="p">(</span><span class="kd">local</span><span class="p">.</span><span class="nx">vpc_cidr</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="nx">k</span> <span class="err">+</span> <span class="mi">48</span><span class="p">)]</span>
    
  <span class="nx">enable_nat_gateway</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">single_nat_gateway</span> <span class="p">=</span> <span class="kc">true</span>
    
  <span class="nx">public_subnet_tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="s2">"kubernetes.io/role/elb"</span> <span class="p">=</span> <span class="mi">1</span>
  <span class="p">}</span>
    
  <span class="nx">private_subnet_tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="s2">"kubernetes.io/role/internal-elb"</span> <span class="p">=</span> <span class="mi">1</span>
    <span class="c1"># Tags subnets for Karpenter auto-discovery</span>
    <span class="s2">"karpenter.sh/discovery"</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">name</span>
  <span class="p">}</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">tags</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>output.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">output</span> <span class="s2">"configure_kubectl"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"Configure kubectl: make sure you're logged in with the correct AWS profile and run the following command to update your kubeconfig"</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="s2">"aws eks --region </span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">region</span><span class="k">}</span><span class="s2"> update-kubeconfig --name </span><span class="k">${module</span><span class="p">.</span><span class="nx">eks</span><span class="p">.</span><span class="nx">cluster_name</span><span class="k">}</span><span class="s2">"</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>init
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
<span class="nv">$ </span>tree .terraform 
<span class="nv">$ </span><span class="nb">cat</span> .terraform/modules/modules.json | jq
<span class="nv">$ </span>tree .terraform/providers/registry.terraform.io/hashicorp <span class="nt">-L</span> 2
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="vpc-배포">VPC 배포</h4>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># VPC 배포전 VPC 확인</span>
  <span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> <span class="nt">--output</span> yaml
  <span class="c"># =&gt; Vpcs: []</span>
  
  <span class="c"># vpc 배포</span>
  <span class="nv">$ </span>terraform apply <span class="nt">-target</span><span class="o">=</span><span class="s2">"module.vpc"</span> <span class="nt">-auto-approve</span>
  
  <span class="c"># 배포 확인</span>
  <span class="nv">$ </span>terraform state list
  <span class="nv">$ </span>terraform show
  
  <span class="c"># VPC 정보 확인</span>
  <span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> <span class="nt">--output</span> yaml
  <span class="c"># =&gt; Vpcs:</span>
  <span class="c">#    - CidrBlock: 10.10.0.0/16</span>
  <span class="c">#      CidrBlockAssociationSet:</span>
  <span class="c">#      - AssociationId: vpc-cidr</span>
  <span class="c">#    ...</span>
  
  <span class="c"># 상세정보 확인</span>
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available"</span> | terraform console
  <span class="c"># =&gt; {</span>
  <span class="c">#      "all_availability_zones" = tobool(null)</span>
  <span class="c">#      "exclude_names" = toset(null) /* of string */</span>
  <span class="c">#      "exclude_zone_ids" = toset(null) /* of string */</span>
  <span class="c">#      "filter" = toset(null) /* of object */</span>
  <span class="c">#      "group_names" = toset([</span>
  <span class="c">#        "ap-northeast-2",</span>
  <span class="c">#      ])</span>
  <span class="c">#      "id" = "ap-northeast-2"</span>
  <span class="c">#      "names" = tolist([</span>
  <span class="c">#        "ap-northeast-2a",</span>
  <span class="c">#        "ap-northeast-2b",</span>
  <span class="c">#        "ap-northeast-2c",</span>
  <span class="c">#        "ap-northeast-2d",</span>
  <span class="c">#      ])</span>
  <span class="c">#      "state" = tostring(null)</span>
  <span class="c">#      "timeouts" = null /* object */</span>
  <span class="c">#      "zone_ids" = tolist([</span>
  <span class="c">#        "apne2-az1",</span>
  <span class="c">#        "apne2-az2",</span>
  <span class="c">#        "apne2-az3",</span>
  <span class="c">#        "apne2-az4",</span>
  <span class="c">#      ])</span>
  <span class="c">#    }</span>
  
  <span class="nv">$ </span>terraform state show <span class="s1">'module.vpc.aws_vpc.this[0]'</span>
  <span class="nv">$ VPCID</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'module.vpc.vpc_id'</span> | terraform console<span class="si">)</span>
  <span class="nv">$ </span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="s2">"Name=vpc-id,Values=</span><span class="nv">$VPCID</span><span class="s2">"</span> | jq
  <span class="nv">$ </span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="s2">"Name=vpc-id,Values=</span><span class="nv">$VPCID</span><span class="s2">"</span> <span class="nt">--output</span> text

  <span class="c"># public 서브넷과 private 서브넷 CIDR 확인</span>
  <span class="c">## private_subnets = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 4, k)]</span>
  <span class="c">## public_subnets  = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 48)]</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.vpc.aws_subnet.public[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.vpc.aws_subnet.private[0]'</span>
</code></pre></div></div>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_3.png" alt="VPC 배포 결과" class="image-center" />
<em class="image-caption">VPC 배포 결과</em></p>

<h4 id="eks-및-fargate-배포">EKS 및 Fargate 배포</h4>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># EKS 배포</span>
  <span class="nv">$ </span>terraform apply <span class="nt">-target</span><span class="o">=</span><span class="s2">"module.eks"</span> <span class="nt">-auto-approve</span>
  <span class="c"># =&gt; Apply complete! Resources: 24 added, 0 changed, 0 destroyed.</span>
  <span class="c">#    Outputs:</span>
  <span class="c">#    configure_kubectl = "aws eks --region ap-northeast-2 update-kubeconfig --name t101-karpenter"</span>
  
  <span class="c"># 배포 확인</span>
  <span class="nv">$ </span>terraform state list
  <span class="c"># =&gt; data.aws_availability_zones.available</span>
  <span class="c">#    module.eks.data.aws_caller_identity.current</span>
  <span class="c">#    module.eks.data.aws_iam_policy_document.assume_role_policy[0]</span>
  <span class="c">#    module.eks.data.aws_iam_session_context.current</span>
  <span class="c">#    module.eks.data.aws_partition.current</span>
  <span class="c">#    module.eks.data.tls_certificate.this[0]</span>
  <span class="c">#    module.eks.aws_cloudwatch_log_group.this[0]</span>
  <span class="c">#    module.eks.aws_ec2_tag.cluster_primary_security_group["Blueprint"]</span>
  <span class="c">#    module.eks.aws_ec2_tag.cluster_primary_security_group["GithubRepo"]</span>
  <span class="c">#    module.eks.aws_ec2_tag.cluster_primary_security_group["karpenter.sh/discovery"]</span>
  <span class="c">#    module.eks.aws_eks_access_entry.this["cluster_creator"]</span>
  <span class="c">#    module.eks.aws_eks_access_policy_association.this["cluster_creator_admin"]</span>
  <span class="c">#    module.eks.aws_eks_cluster.this[0]</span>
  <span class="c">#    module.eks.aws_iam_openid_connect_provider.oidc_provider[0]</span>
  <span class="c">#    module.eks.aws_iam_policy.cluster_encryption[0]</span>
  <span class="c">#    module.eks.aws_iam_role.this[0]</span>
  <span class="c">#    module.eks.aws_iam_role_policy_attachment.cluster_encryption[0]</span>
  <span class="c">#    module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"]</span>
  <span class="c">#    module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"]</span>
  <span class="c">#    module.eks.time_sleep.this[0]</span>
  <span class="c">#    module.vpc.aws_default_network_acl.this[0]</span>
  <span class="c">#    module.vpc.aws_default_route_table.default[0]</span>
  <span class="c">#    module.vpc.aws_default_security_group.this[0]</span>
  <span class="c">#    module.vpc.aws_eip.nat[0]</span>
  <span class="c">#    module.vpc.aws_internet_gateway.this[0]</span>
  <span class="c">#    module.vpc.aws_nat_gateway.this[0]</span>
  <span class="c">#    module.vpc.aws_route.private_nat_gateway[0]</span>
  <span class="c">#    module.vpc.aws_route.public_internet_gateway[0]</span>
  <span class="c">#    module.vpc.aws_route_table.private[0]</span>
  <span class="c">#    module.vpc.aws_route_table.public[0]</span>
  <span class="c">#    module.vpc.aws_route_table_association.private[0]</span>
  <span class="c">#    module.vpc.aws_route_table_association.private[1]</span>
  <span class="c">#    module.vpc.aws_route_table_association.private[2]</span>
  <span class="c">#    module.vpc.aws_route_table_association.public[0]</span>
  <span class="c">#    module.vpc.aws_route_table_association.public[1]</span>
  <span class="c">#    module.vpc.aws_route_table_association.public[2]</span>
  <span class="c">#    module.vpc.aws_subnet.private[0]</span>
  <span class="c">#    module.vpc.aws_subnet.private[1]</span>
  <span class="c">#    module.vpc.aws_subnet.private[2]</span>
  <span class="c">#    module.vpc.aws_subnet.public[0]</span>
  <span class="c">#    module.vpc.aws_subnet.public[1]</span>
  <span class="c">#    module.vpc.aws_subnet.public[2]</span>
  <span class="c">#    module.vpc.aws_vpc.this[0]</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].data.aws_caller_identity.current</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].data.aws_iam_policy_document.assume_role_policy[0]</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].data.aws_partition.current</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].data.aws_region.current</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].aws_eks_fargate_profile.this[0]</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].aws_iam_role.this[0]</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].aws_iam_role_policy_attachment.this["AmazonEKSFargatePodExecutionRolePolicy"]</span>
  <span class="c">#    module.eks.module.fargate_profile["karpenter"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].data.aws_caller_identity.current</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].data.aws_iam_policy_document.assume_role_policy[0]</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].data.aws_partition.current</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].data.aws_region.current</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].aws_eks_fargate_profile.this[0]</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].aws_iam_role.this[0]</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].aws_iam_role_policy_attachment.this["AmazonEKSFargatePodExecutionRolePolicy"]</span>
  <span class="c">#    module.eks.module.fargate_profile["kube_system"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"]</span>
  <span class="c">#    module.eks.module.kms.data.aws_caller_identity.current[0]</span>
  <span class="c">#    module.eks.module.kms.data.aws_iam_policy_document.this[0]</span>
  <span class="c">#    module.eks.module.kms.data.aws_partition.current[0]</span>
  <span class="c">#    module.eks.module.kms.aws_kms_alias.this["cluster"]</span>
  <span class="c">#    module.eks.module.kms.aws_kms_key.this[0]</span>
  
  <span class="nv">$ </span>terraform output
  <span class="c"># =&gt; configure_kubectl = "aws eks --region ap-northeast-2 update-kubeconfig --name t101-karpenter"</span>
  
  <span class="c"># kubectl 설정</span>
  <span class="nv">$ </span>aws eks <span class="nt">--region</span> ap-northeast-2 update-kubeconfig <span class="nt">--name</span> t101-karpenter
  <span class="nv">$ </span><span class="nb">cat</span> ~/.kube/config
    
  <span class="c"># k8s 노드, 파드 정보 확인</span>
  <span class="nv">$ </span>kubectl cluster-info
  <span class="c"># =&gt; Kubernetes control plane is running at https://D858CEEA85279742B1B4738D555C8602.sk1.ap-northeast-2.eks.amazonaws.com</span>
  <span class="c">#    CoreDNS is running at https://D858CEEA85279742B1B4738D555C8602.sk1.ap-northeast-2.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span>
  <span class="c">#    To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.</span>
  <span class="nv">$ </span>kubectl get node
  <span class="c"># =&gt; No resources found</span>
  <span class="nv">$ </span>kubectl get pod <span class="nt">-A</span>
  <span class="c"># =&gt; NAMESPACE     NAME                      READY   STATUS    RESTARTS   AGE</span>
  <span class="c">#    kube-system   coredns-5b9dfbf96-24qbm   0/1     Pending   0          22m</span>
  <span class="c">#    kube-system   coredns-5b9dfbf96-8q225   0/1     Pending   0          22m</span>
  <span class="nv">$ </span>kubectl describe pod coredns-5b9dfbf96-24 <span class="nt">-n</span> kube-system
  <span class="c"># =&gt; ...</span>
  <span class="c">#    Type     Reason            Age                    From               Message</span>
  <span class="c">#    ----     ------            ----                   ----               -------</span>
  <span class="c">#    Warning  FailedScheduling  3m22s (x124 over 23m)  default-scheduler  no nodes available to schedule pods</span>
  
  <span class="c"># 상세 정보 확인</span>
  <span class="nv">$ </span>terraform show
  <span class="nv">$ </span>terraform state list
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.data.aws_caller_identity.current'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.data.aws_iam_session_context.current'</span>
   
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_eks_cluster.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.data.tls_certificate.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_cloudwatch_log_group.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_eks_access_entry.this["cluster_creator"]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_iam_openid_connect_provider.oidc_provider[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.data.aws_partition.current'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_iam_policy.cluster_encryption[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_iam_role.this[0]'</span>
  
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.time_sleep.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.kms.aws_kms_key.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.fargate_profile["kube_system"].aws_eks_fargate_profile.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.fargate_profile["karpenter"].aws_eks_fargate_profile.this[0]'</span>
</code></pre></div></div>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_4.png" alt="EKS 배포 결과" class="image-center" />
<em class="image-caption">EKS 배포 결과</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_5.png" alt="EKS 배포 결과 (Secret 암호화 관련 설정)" class="image-center" />
<em class="image-caption">EKS 배포 결과 (Secret 암호화 관련) 설정</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_6.png" alt="EKS 배포 결과 (Secret 암호화에 쓰이는 KMS 정보)" class="image-center" />
<em class="image-caption">EKS 배포 결과 (Secret 암호화에 쓰이는 KMS 정보)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_8.png" alt="EKS 배포 결과 (네트워킹 정보)" class="image-center" />
<em class="image-caption">EKS 배포 결과 (네트워킹 정보)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_9.png" alt="EKS 배포 결과 (접근 IAM 정보)" class="image-center" />
<em class="image-caption">EKS 배포 결과 (접근 IAM 정보)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_10.png" alt="EKS 배포 결과 (로그 설정)" class="image-center" />
<em class="image-caption">EKS 배포 결과 (로그 설정)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_11.png" alt="EKS 배포 결과 (Cloud Watch를 통한 로그 관리)" class="image-center" />
<em class="image-caption">EKS 배포 결과 (Cloud Watch를 통한 로그 관리)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_7.png" alt="Fargate 배포 결과" class="image-center" />
<em class="image-caption">Fargate 배포 결과</em></p>

<h4 id="karpenter-및-기타-addon-배포">Karpenter 및 기타 addon 배포</h4>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># 배포</span>
  <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
  
  <span class="c"># 확인</span>
  <span class="nv">$ </span>terraform state list
  <span class="c"># =&gt; data.aws_ecrpublic_authorization_token.token</span>
  <span class="c">#    aws_eks_access_entry.karpenter_node_access_entry</span>
  <span class="c">#    ...</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_caller_identity.current</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_eks_addon_version.this["coredns"]</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_eks_addon_version.this["kube-proxy"]</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_eks_addon_version.this["vpc-cni"]</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_iam_policy_document.karpenter[0]</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_iam_policy_document.karpenter_assume_role[0]</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_partition.current</span>
  <span class="c">#    module.eks_blueprints_addons.data.aws_region.current</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["health_event"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["instance_rebalance"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["instance_state_change"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["spot_interupt"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["health_event"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["instance_rebalance"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["instance_state_change"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["spot_interupt"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_eks_addon.this["coredns"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_eks_addon.this["kube-proxy"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_eks_addon.this["vpc-cni"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_iam_instance_profile.karpenter[0]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_iam_role.karpenter[0]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_iam_role_policy_attachment.karpenter["AmazonEC2ContainerRegistryReadOnly"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_iam_role_policy_attachment.karpenter["AmazonEKSWorkerNodePolicy"]</span>
  <span class="c">#    module.eks_blueprints_addons.aws_iam_role_policy_attachment.karpenter["AmazonEKS_CNI_Policy"]</span>
  <span class="c">#    module.eks_blueprints_addons.time_sleep.this</span>
  <span class="c">#    ...</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.data.aws_caller_identity.current[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.data.aws_iam_policy_document.assume[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.data.aws_iam_policy_document.this[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.data.aws_partition.current[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.aws_iam_policy.this[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.aws_iam_role.this[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.aws_iam_role_policy_attachment.this[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter.helm_release.this[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter_sqs.data.aws_iam_policy_document.this[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter_sqs.aws_sqs_queue.this[0]</span>
  <span class="c">#    module.eks_blueprints_addons.module.karpenter_sqs.aws_sqs_queue_policy.this[0]</span>
  
  <span class="nv">$ </span>terraform show

  <span class="c"># k8s 노드, 파드 정보 확인</span>
  <span class="nv">$ </span>kubectl cluster-info
  <span class="c"># =&gt; Kubernetes control plane is running at https://D858CEEA85279742B1B4738D555C8602.sk1.ap-northeast-2.eks.amazonaws.com</span>
  <span class="c">#    CoreDNS is running at https://D858CEEA85279742B1B4738D555C8602.sk1.ap-northeast-2.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span>
  <span class="c">#    </span>
  <span class="c">#    To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.</span>
  
  <span class="nv">$ </span>kubectl get nodes <span class="nt">-L</span> node.kubernetes.io/instance-type <span class="nt">-L</span> topology.kubernetes.io/zone
  <span class="c"># =&gt; NAME                                                      STATUS   ROLES    AGE     VERSION               INSTANCE-TYPE   ZONE</span>
  <span class="c">#    fargate-ip-10-10-18-179.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   4m58s   v1.30.0-eks-404b9c6                   ap-northeast-2b</span>
  <span class="c">#    fargate-ip-10-10-26-139.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   4m58s   v1.30.0-eks-404b9c6                   ap-northeast-2b</span>
  <span class="c">#    fargate-ip-10-10-41-162.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   4m51s   v1.30.0-eks-404b9c6                   ap-northeast-2c</span>
  <span class="c">#    fargate-ip-10-10-44-218.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   4m57s   v1.30.0-eks-404b9c6                   ap-northeast-2c</span>
   
  <span class="c"># fargate를 프로비저닝하기 전에는 노드가 없었으나, </span>
  <span class="c"># fargate 프로비저닝 후 노드가 생성되었음을 확인할 수 있습니다.</span>
  
  <span class="nv">$ </span>kubectl get node <span class="nt">-owide</span>  
  <span class="c"># =&gt; NAME                                                      STATUS   ROLES    AGE     VERSION               INTERNAL-IP    EXTERNAL-IP   OS-IMAGE         KERNEL-VERSION                  CONTAINER-RUNTIME</span>
  <span class="c">#    fargate-ip-10-10-18-179.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   6m45s   v1.30.0-eks-404b9c6   10.10.18.179   &lt;none&gt;        Amazon Linux 2   5.10.220-209.867.amzn2.x86_64   containerd://1.7.11</span>
  <span class="c">#    fargate-ip-10-10-26-139.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   6m45s   v1.30.0-eks-404b9c6   10.10.26.139   &lt;none&gt;        Amazon Linux 2   5.10.220-209.867.amzn2.x86_64   containerd://1.7.11</span>
  <span class="c">#    fargate-ip-10-10-41-162.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   6m38s   v1.30.0-eks-404b9c6   10.10.41.162   &lt;none&gt;        Amazon Linux 2   5.10.220-209.867.amzn2.x86_64   containerd://1.7.11</span>
  <span class="c">#    fargate-ip-10-10-44-218.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   6m44s   v1.30.0-eks-404b9c6   10.10.44.218   &lt;none&gt;        Amazon Linux 2   5.10.220-209.867.amzn2.x86_64   containerd://1.7.11</span>
  
  <span class="nv">$ </span>kubectl get pod <span class="nt">-A</span> <span class="nt">-owide</span>        
  <span class="c"># =&gt; NAMESPACE     NAME                         READY   STATUS    RESTARTS   AGE     IP             NODE                                                      NOMINATED NODE   READINESS GATES</span>
  <span class="c">#    karpenter     karpenter-7c5786cbc4-q5k7x   1/1     Running   0          8m42s   10.10.18.179   fargate-ip-10-10-18-179.ap-northeast-2.compute.internal   &lt;none&gt;           &lt;none&gt;</span>
  <span class="c">#    karpenter     karpenter-7c5786cbc4-vxlrq   1/1     Running   0          8m42s   10.10.26.139   fargate-ip-10-10-26-139.ap-northeast-2.compute.internal   &lt;none&gt;           &lt;none&gt;</span>
  <span class="c">#    kube-system   coredns-86dcddd859-2x2gf     1/1     Running   0          8m43s   10.10.41.162   fargate-ip-10-10-41-162.ap-northeast-2.compute.internal   &lt;none&gt;           &lt;none&gt;</span>
  <span class="c">#    kube-system   coredns-86dcddd859-xsdw5     1/1     Running   0          8m43s   10.10.44.218   fargate-ip-10-10-44-218.ap-northeast-2.compute.internal   &lt;none&gt;           &lt;none&gt;  </span>
  
  <span class="c"># node가 없어서 pod가 Pending 상태였던 것이, </span>
  <span class="c"># fargate로 프로비저닝되면서 fargate computing node가 생겨서 Running 상태로 변경되었음을 확인할 수 있습니다.</span>
                            
  <span class="c"># helm chart 확인</span>
  <span class="nv">$ </span>helm list <span class="nt">-n</span> karpenter
  <span class="c"># =&gt; NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION</span>
  <span class="c">#    karpenter       karpenter       1               2024-07-25 23:54:59.19597 +0900 KST     deployed        karpenter-0.35.0        0.35.0</span>
  
  <span class="c"># 시크릿 확인 : kms로 암호 처리됨</span>
  <span class="nv">$ </span>kubectl get secret <span class="nt">-n</span> karpenter
  <span class="c"># =&gt; NAME                              TYPE                 DATA   AGE</span>
  <span class="c">#    sh.helm.release.v1.karpenter.v1   helm.sh/release.v1   1      12m</span>
  <span class="nv">$ </span>kubectl get secret <span class="nt">-n</span> karpenter sh.helm.release.v1.karpenter.v1 <span class="nt">-o</span> json | jq

  <span class="c"># 상세 정보 확인</span>
  <span class="nv">$ </span>terraform state list
  <span class="nv">$ </span>terraform state show <span class="s1">'data.aws_ecrpublic_authorization_token.token'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'aws_eks_access_entry.karpenter_node_access_entry'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.data.aws_caller_identity.current'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.data.aws_eks_addon_version.this["coredns"]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["health_event"]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["health_event"]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.aws_eks_addon.this["coredns"]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.aws_iam_role.karpenter[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.aws_iam_instance_profile.karpenter[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.module.karpenter.data.aws_iam_policy_document.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.module.karpenter.data.aws_iam_policy_document.assume[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.module.karpenter.aws_iam_policy.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.module.karpenter.helm_release.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.module.karpenter_sqs.aws_sqs_queue.this[0]'</span>
  <span class="nv">$ </span>terraform state show <span class="s1">'module.eks_blueprints_addons.module.karpenter_sqs.aws_sqs_queue_policy.this[0]'</span>
</code></pre></div></div>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_12.png" alt="Karpenter 배포 결과" class="image-center" />
<em class="image-caption">Karpenter 배포 결과</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_13.png" alt="Addon 설치 결과" class="image-center" />
<em class="image-caption">Addon 설치 결과</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_14.png" alt="Karpenter 배포 결과 (접근 IAM 정보)" class="image-center" />
<em class="image-caption">Karpenter 배포 결과 (접근 IAM 정보)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_15.png" alt="EC2 목록 (아직은 EC2 인스턴스가 없음)" class="image-center" />
<em class="image-caption">EC2 목록 (아직은 EC2 인스턴스가 없음)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_16.png" alt="Karpenter의 Autoscaling 관련 룰" class="image-center" />
<em class="image-caption">Karpenter의 Autoscaling 관련 룰</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_35.png" alt="Karpenter의 SQS Queue" />
<em class="image-caption">Karpenter의 SQS Queue</em></p>

<ul>
  <li>
    <p>eks-node-viewer 설치 및 사용법
<img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_17.png" alt="eks-node-viewer" class="image-center" />
<em class="image-caption">eks-node-viewer</em></p>

    <ul>
      <li>노드 할당 가능 용량과 요청 request 리소스 표시해줍니다.</li>
      <li>실제 파드의 리소스 사용량과는 차이가 있으니 참고용으로만 사용해야 할것입니다.</li>
      <li>설치
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># MacOS 기준 설치</span>
<span class="nv">$ </span>brew tap aws/tap
<span class="nv">$ </span>brew <span class="nb">install </span>eks-node-viewer
</code></pre></div>        </div>
      </li>
      <li>사용
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># [신규 터미널] Display both CPU and Memory Usage*</span>
eks-node-viewer <span class="nt">--resources</span> cpu,memory
    
<span class="c"># Standard usage</span>
eks-node-viewer
    
<span class="c"># Karpenter nodes only</span>
eks-node-viewer <span class="nt">--node-selector</span> karpenter.sh/nodepool
    
<span class="c"># Display extra labels, i.e. AZ</span>
eks-node-viewer <span class="nt">--extra-labels</span> topology.kubernetes.io/zone
    
<span class="c"># Sort by CPU usage in descending order</span>
eks-node-viewer <span class="nt">--node-sort</span><span class="o">=</span>eks-node-viewer/node-cpu-usage<span class="o">=</span>dsc
    
<span class="c"># Specify a particular AWS profile and region</span>
<span class="nv">AWS_PROFILE</span><span class="o">=</span>myprofile <span class="nv">AWS_REGION</span><span class="o">=</span>us-west-2
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>kube-ops-view 설치 및 사용법
<img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_20.png" alt="kube-ops-view" class="image-center" />
<em class="image-caption">kube-ops-view</em></p>

    <ul>
      <li>노드의 파드 상태정보를 웹페이지에서 실시간으로 출력해줍니다.</li>
      <li>설치 및 사용
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>helm repo add geek-cookbook https://geek-cookbook.github.io/charts/
<span class="c"># =&gt; "geek-cookbook" has been added to your repositories</span>
    
<span class="nv">$ </span>helm <span class="nb">install </span>kube-ops-view geek-cookbook/kube-ops-view <span class="nt">--version</span> 1.2.2 <span class="nt">--set</span> env.TZ<span class="o">=</span><span class="s2">"Asia/Seoul"</span> <span class="nt">--namespace</span> kube-system

<span class="c"># 포트포워딩</span>
<span class="nv">$ </span>kubectl port-forward deployment/kube-ops-view <span class="nt">-n</span> kube-system 8080:8080 &amp;

<span class="c"># 접속 주소 확인 : 각각 1배, 1.5배, 3배 크기</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"KUBE-OPS-VIEW URL = http://localhost:8080"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"KUBE-OPS-VIEW URL = http://localhost:8080/#scale=1.5"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"KUBE-OPS-VIEW URL = http://localhost:8080/#scale=3"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="실습-karpenter-on-eks-fargate">[실습] Karpenter on EKS Fargate</h3>

<p>이번에는 <code class="language-plaintext highlighter-rouge">Karpenter</code>를 사용해 앞서 설치한 EKS와 Fargate로 구성한 클러스터를 관리해보겠습니다.</p>

<p><code class="language-plaintext highlighter-rouge">Karpenter</code>는 AWS에서 제공하는 오픈소스 프로젝트로, Kubernetes 클러스터를 관리하는데 사용되는 <strong>오토스케일링 프로비저닝 엔진</strong>입니다. Node Auto Scaling과 비슷하나
AWS API를 통해 빠르고 <strong>효율적으로 워커노드를 스케일링</strong>하며, <strong>높은 가용성</strong>, <strong>비용최적화</strong>를 제공합니다. <a href="https://karpenter.sh/">Karpenter 소개</a></p>

<p>먼저 replicas가 0인 pod를 생성하고, replica 수를 늘려서 <code class="language-plaintext highlighter-rouge">Karpenter</code>를 이용하여 autoscaling을 진행해보겠습니다.</p>

<ul>
  <li>karpenter.yml 생성
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># karpenter.yml</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.k8s.aws/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">EC2NodeClass</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">amiFamily</span><span class="pi">:</span> <span class="s">AL2</span>
  <span class="na">role</span><span class="pi">:</span> <span class="s">karpenter-t101-karpenter</span>
  <span class="na">subnetSelectorTerms</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">tags</span><span class="pi">:</span>
        <span class="na">karpenter.sh/discovery</span><span class="pi">:</span> <span class="s">t101-karpenter</span>
  <span class="na">securityGroupSelectorTerms</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">tags</span><span class="pi">:</span>
        <span class="na">karpenter.sh/discovery</span><span class="pi">:</span> <span class="s">t101-karpenter</span>
  <span class="na">tags</span><span class="pi">:</span>
    <span class="na">karpenter.sh/discovery</span><span class="pi">:</span> <span class="s">t101-karpenter</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">karpenter.sh/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">NodePool</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">nodeClassRef</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
      <span class="na">requirements</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">karpenter.k8s.aws/instance-category"</span>
          <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
          <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">c"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">m"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">r"</span><span class="pi">]</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">karpenter.k8s.aws/instance-cpu"</span>
          <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
          <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">4"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">8"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">16"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">32"</span><span class="pi">]</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">karpenter.k8s.aws/instance-hypervisor"</span>
          <span class="na">operator</span><span class="pi">:</span> <span class="s">In</span>
          <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">nitro"</span><span class="pi">]</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">karpenter.k8s.aws/instance-generation"</span>
          <span class="na">operator</span><span class="pi">:</span> <span class="s">Gt</span>
          <span class="na">values</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">2"</span><span class="pi">]</span>
  <span class="na">limits</span><span class="pi">:</span>
    <span class="na">cpu</span><span class="pi">:</span> <span class="m">1000</span>
  <span class="na">disruption</span><span class="pi">:</span>
    <span class="na">consolidationPolicy</span><span class="pi">:</span> <span class="s">WhenEmpty</span>
    <span class="na">consolidateAfter</span><span class="pi">:</span> <span class="s">30s</span>   
</code></pre></div>    </div>
  </li>
  <li>example.yml 생성
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">inflate</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">0</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">inflate</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">inflate</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">terminationGracePeriodSeconds</span><span class="pi">:</span> <span class="m">0</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">inflate</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">public.ecr.aws/eks-distro/kubernetes/pause:3.7</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="na">requests</span><span class="pi">:</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s">1</span>     
</code></pre></div>    </div>
  </li>
  <li>karpenter 실행
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl apply <span class="nt">-f</span> karpenter.yml                           
<span class="c"># =&gt; ec2nodeclass.karpenter.k8s.aws/default created</span>
<span class="c">#    nodepool.karpenter.sh/default created</span>
    
<span class="c"># 확인</span>
<span class="nv">$ </span>kubectl get ec2nodeclass,nodepool
<span class="c"># =&gt; NAME                                     AGE</span>
<span class="c">#    ec2nodeclass.karpenter.k8s.aws/default   98s</span>
<span class="c">#    </span>
<span class="c">#    NAME                            NODECLASS</span>
<span class="c">#    nodepool.karpenter.sh/default   default</span>
    
<span class="nv">$ </span>kubectl apply <span class="nt">-f</span> example.yml
    
<span class="nv">$ </span>kubectl get deploy
<span class="c"># =&gt; NAME      READY   UP-TO-DATE   AVAILABLE   AGE</span>
<span class="c">#    inflate   0/0     0            0           11s</span>
    
<span class="nv">$ </span>karpenter 컨트롤러 로그 확인
<span class="nv">$ </span>kubectl logs <span class="nt">-f</span> <span class="nt">-n</span> karpenter <span class="nt">-l</span> app.kubernetes.io/name<span class="o">=</span>karpenter <span class="nt">-c</span> controller

<span class="c"># karpenter를 이용한 autoscaling 확인</span>
<span class="nv">$ </span>kubectl scale deployment inflate <span class="nt">--replicas</span><span class="o">=</span>3 <span class="o">&amp;&amp;</span> kubectl get pod <span class="nt">-w</span>
<span class="c"># =&gt; deployment.apps/inflate scaled</span>
<span class="c">#    NAME                       READY   STATUS    RESTARTS   AGE</span>
<span class="c">#    inflate-66fb68585c-8wnvs   0/1     Pending   0          0s</span>
<span class="c">#    inflate-66fb68585c-p5j7d   0/1     Pending   0          0s</span>
<span class="c">#    inflate-66fb68585c-sdqzz   0/1     Pending   0          0s</span>
</code></pre></div>    </div>

    <p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_25.png" alt="autoscaling 이 진행되지 않고 대기중인 모습" class="image-center" />
<em class="image-caption">autoscaling 이 진행되지 않고 대기중인 모습</em></p>

    <ul>
      <li>위의 그림처럼 scaling 후 pending 상태로 오래 대기중이어서 log를 확인해보겠습니다.
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># karpenter 컨트롤러 로그 확인</span>
<span class="nv">$ </span>kubectl logs <span class="nt">-f</span> <span class="nt">-n</span> karpenter <span class="nt">-l</span> app.kubernetes.io/name<span class="o">=</span>karpenter <span class="nt">-c</span> controller
<span class="c"># =&gt; {</span>
<span class="c">#      "level":"ERROR","time":"2024-07-25T15:36:58.791Z",</span>
<span class="c">#      ...</span>
<span class="c">#      "error":"launching nodeclaim, creating instance, with fleet error(s), </span>
<span class="c">#               AuthFailure.ServiceLinkedRoleCreationNotPermitted: </span>
<span class="c">#               The provided credentials do not have permission to </span>
<span class="c">#               create the service-linked role for EC2 Spot Instances."</span>
<span class="c">#    }</span>
</code></pre></div>        </div>
        <ul>
          <li>현재 ServiceLinkedRole 관련 기능이 없어서 생기는 문제 인것 같습니다. 아래의 명령을 실행하면 role이 생성되면서 오토 스케일링이 진행됩니다.
            <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws iam create-service-linked-role <span class="nt">--aws-service-name</span> spot.amazonaws.com
</code></pre></div>            </div>
          </li>
        </ul>

        <p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_26.png" alt="정상적으로 Autoscaling 된 결과" class="image-center" />
<em class="image-caption image-caption--img-shadow">정상적으로 Autoscaling 된 결과</em></p>

        <p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_30.png" alt="정상적으로 Autoscaling 된 결과 (Pod 상세 정보)" class="image-center" />
<em class="image-caption image-caption--img-shadow">정상적으로 Autoscaling 된 결과 (Pod 상세 정보)</em></p>

        <ul>
          <li>위의 그림들 처럼 정상적으로 autoscaling이 진행되고, 5개 =&gt; 6개로 Node 가 추가되고 pod가 생성되어 실행되는 것을 확인할 수 있습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>karpenter 삭제
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#</span>
<span class="nv">$ </span>kubectl get nodes <span class="nt">-L</span> karpenter.sh/nodepool <span class="nt">-L</span> node.kubernetes.io/instance-type <span class="nt">-L</span> topology.kubernetes.io/zone <span class="nt">-L</span> karpenter.sh/capacity-type
<span class="c"># =&gt; NAME                                                      STATUS   ROLES    AGE    VERSION               NODEPOOL   INSTANCE-TYPE   ZONE              CAPACITY-TYPE</span>
<span class="c">#    fargate-ip-10-10-18-179.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   53m    v1.30.0-eks-404b9c6                              ap-northeast-2b</span>
<span class="c">#    fargate-ip-10-10-25-19.ap-northeast-2.compute.internal    Ready    &lt;none&gt;   30m    v1.30.0-eks-404b9c6                              ap-northeast-2b</span>
<span class="c">#    fargate-ip-10-10-26-139.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   53m    v1.30.0-eks-404b9c6                              ap-northeast-2b</span>
<span class="c">#    fargate-ip-10-10-41-162.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   53m    v1.30.0-eks-404b9c6                              ap-northeast-2c</span>
<span class="c">#    fargate-ip-10-10-44-218.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   53m    v1.30.0-eks-404b9c6                              ap-northeast-2c</span>
<span class="c">#    ip-10-10-30-139.ap-northeast-2.compute.internal           Ready    &lt;none&gt;   2m3s   v1.30.0-eks-036c24b   default    c6gn.xlarge     ap-northeast-2b   spot</span>

<span class="c">#</span>
<span class="nv">$ </span>kubectl get nodeclaims
<span class="c"># =&gt; default-mkbpj   c6gn.xlarge   ap-northeast-2b   ip-10-10-30-139.ap-northeast-2.compute.internal   True    18m</span>
<span class="nv">$ </span>kubectl get nodeclaims <span class="nt">-o</span> yaml | kubectl neat
    
<span class="c"># deploy 삭제 &gt;&gt; 노드 변화 확인 해보기!</span>
<span class="nv">$ </span>kubectl delete <span class="nt">-f</span> example.yml
<span class="c"># =&gt; deployment.apps "inflate" deleted</span>
    
<span class="c"># karpenter 정책 삭제</span>
<span class="nv">$ </span>kubectl delete <span class="nt">-f</span> karpenter.yml
<span class="c"># =&gt; ec2nodeclass.karpenter.k8s.aws "default" deleted</span>
<span class="c">#    nodepool.karpenter.sh "default" deleted</span>
</code></pre></div>    </div>
  </li>
  <li>삭제
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># kube-ops-view 삭제</span>
<span class="nv">$ </span>helm uninstall kube-ops-view <span class="nt">-n</span> kube-system
    
<span class="c"># addon &amp; karpenter helm 삭제</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-target</span><span class="o">=</span><span class="s2">"module.eks_blueprints_addons"</span> <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Destroy complete! Resources: 24 destroyed.</span>
    
<span class="c"># EKS 삭제</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-target</span><span class="o">=</span><span class="s2">"module.eks"</span> <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Destroy complete! Resources: 24 destroyed.</span>
    
<span class="c"># VPC 삭제 : vpc 삭제가 잘 안될 경우 aws 콘솔에서 vpc 수동 삭제 -&gt; vnic 등 남아 있을 경우 해당 vnic 강제 삭제</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Destroy complete! Resources: 23 destroyed.</span>
    
<span class="c"># VPC 삭제 확인</span>
<span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> <span class="nt">--output</span> yaml
<span class="c"># =&gt; Vpcs: []</span>
    
<span class="c"># 잘 삭제되었습니다.</span>
    
<span class="c"># kubeconfig 삭제</span>
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> ~/.kube/config
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="eks-workshop">EKS Workshop</h2>

<ul>
  <li>이번에는 AWS에서 제공하는 EKS Workshop에서 소개하는 방법으로 EKS를 배포해보겠습니다.
    <ul>
      <li>관련링크 :
<a href="https://eksworkshop.com/docs/introduction/">EKS Workshop 소개</a>, 
<a href="https://github.com/aws-samples/eks-workshop-v2">EKS Workshop Github</a>,
<a href="https://www.youtube.com/watch?v=E956xeOt050">유튜브</a></li>
    </ul>
  </li>
</ul>

<h3 id="실습-eks-배포">[실습] EKS 배포</h3>

<h4 id="사전준비-1">사전준비</h4>

<ul>
  <li>awscli, terraform, kubectl 설치</li>
  <li>코드 준비 <a href="https://github.com/aws-samples/eks-workshop-v2">Github</a>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/aws-samples/eks-workshop-v2
<span class="nv">$ </span><span class="nb">cd </span>eks-workshop-v2/cluster/terraform
</code></pre></div>    </div>
    <ul>
      <li>providers.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">default_tags</span> <span class="p">{</span>
    <span class="nx">tags</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">tags</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 4.67.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
    
  <span class="nx">required_version</span> <span class="p">=</span> <span class="s2">"&gt;= 1.4.2"</span>
<span class="p">}</span> 
</code></pre></div>        </div>
      </li>
      <li>variables.tf - cluster 이름, cluster 버전, ami 버전, vpc cidr 변경 가능
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"cluster_name"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"Name of the EKS cluster"</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"t101-eks-workshop"</span>
<span class="p">}</span>
    
<span class="k">variable</span> <span class="s2">"cluster_version"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"EKS cluster version."</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"1.30"</span>
<span class="p">}</span>
    
<span class="k">variable</span> <span class="s2">"ami_release_version"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"Default EKS AMI release version for node groups"</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"1.30.0-20240625"</span>
<span class="p">}</span>
    
<span class="k">variable</span> <span class="s2">"vpc_cidr"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"Defines the CIDR block used on Amazon VPC created for Amazon EKS."</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"10.42.0.0/16"</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>vpc.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">private_subnets</span> <span class="p">=</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">local</span><span class="p">.</span><span class="nx">azs</span> <span class="err">:</span> <span class="nx">cidrsubnet</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">vpc_cidr</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">k</span> <span class="err">+</span> <span class="mi">3</span><span class="p">)]</span>
  <span class="nx">public_subnets</span>  <span class="p">=</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">local</span><span class="p">.</span><span class="nx">azs</span> <span class="err">:</span> <span class="nx">cidrsubnet</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">vpc_cidr</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">k</span><span class="p">)]</span>
  <span class="nx">azs</span>             <span class="p">=</span> <span class="nx">slice</span><span class="p">(</span><span class="k">data</span><span class="p">.</span><span class="nx">aws_availability_zones</span><span class="p">.</span><span class="nx">available</span><span class="p">.</span><span class="nx">names</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="p">}</span>
    
<span class="k">data</span> <span class="s2">"aws_availability_zones"</span> <span class="s2">"available"</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="p">=</span> <span class="s2">"available"</span>
<span class="p">}</span>
    
<span class="k">module</span> <span class="s2">"vpc"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"terraform-aws-modules/vpc/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 5.1"</span>
    
  <span class="nx">name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="nx">cidr</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">vpc_cidr</span>
    
  <span class="nx">azs</span>                   <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">azs</span>
  <span class="nx">public_subnets</span>        <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">public_subnets</span>
  <span class="nx">private_subnets</span>       <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">private_subnets</span>
  <span class="nx">public_subnet_suffix</span>  <span class="p">=</span> <span class="s2">"SubnetPublic"</span>
  <span class="nx">private_subnet_suffix</span> <span class="p">=</span> <span class="s2">"SubnetPrivate"</span>
    
  <span class="nx">enable_nat_gateway</span>   <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">create_igw</span>           <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">enable_dns_hostnames</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">single_nat_gateway</span>   <span class="p">=</span> <span class="kc">true</span>
    
  <span class="c1"># Manage so we can name</span>
  <span class="nx">manage_default_network_acl</span>    <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">default_network_acl_tags</span>      <span class="p">=</span> <span class="p">{</span> <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span><span class="k">}</span><span class="s2">-default"</span> <span class="p">}</span>
  <span class="nx">manage_default_route_table</span>    <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">default_route_table_tags</span>      <span class="p">=</span> <span class="p">{</span> <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span><span class="k">}</span><span class="s2">-default"</span> <span class="p">}</span>
  <span class="nx">manage_default_security_group</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">default_security_group_tags</span>   <span class="p">=</span> <span class="p">{</span> <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span><span class="k">}</span><span class="s2">-default"</span> <span class="p">}</span>
    
  <span class="nx">public_subnet_tags</span> <span class="p">=</span> <span class="nx">merge</span><span class="p">(</span><span class="kd">local</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="s2">"kubernetes.io/role/elb"</span> <span class="p">=</span> <span class="s2">"1"</span>
  <span class="p">})</span>
  <span class="nx">private_subnet_tags</span> <span class="p">=</span> <span class="nx">merge</span><span class="p">(</span><span class="kd">local</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="s2">"karpenter.sh/discovery"</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="p">})</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">tags</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>main.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">created-by</span> <span class="p">=</span> <span class="s2">"eks-workshop-v2"</span>
    <span class="nx">study</span>      <span class="p">=</span> <span class="s2">"t101"</span>             <span class="c1"># 태그 추가</span>
    <span class="nx">for</span>        <span class="p">=</span> <span class="s2">"Sweet Little Bird"</span>
    <span class="nx">env</span>        <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>eks.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"eks"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"terraform-aws-modules/eks/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 20.0"</span>
    
  <span class="nx">cluster_name</span>                   <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="nx">cluster_version</span>                <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_version</span>
  <span class="nx">cluster_endpoint_public_access</span> <span class="p">=</span> <span class="kc">true</span>
    
  <span class="nx">cluster_addons</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">vpc-cni</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">before_compute</span> <span class="p">=</span> <span class="kc">true</span>
      <span class="nx">most_recent</span>    <span class="p">=</span> <span class="kc">true</span>
      <span class="nx">configuration_values</span> <span class="p">=</span> <span class="nx">jsonencode</span><span class="p">({</span>
        <span class="nx">env</span> <span class="p">=</span> <span class="p">{</span>
          <span class="nx">ENABLE_POD_ENI</span>                    <span class="p">=</span> <span class="s2">"true"</span>
          <span class="nx">ENABLE_PREFIX_DELEGATION</span>          <span class="p">=</span> <span class="s2">"true"</span>
          <span class="nx">POD_SECURITY_GROUP_ENFORCING_MODE</span> <span class="p">=</span> <span class="s2">"standard"</span>
        <span class="p">}</span>
        <span class="nx">nodeAgent</span> <span class="p">=</span> <span class="p">{</span>
          <span class="nx">enablePolicyEventLogs</span> <span class="p">=</span> <span class="s2">"true"</span>
        <span class="p">}</span>
        <span class="nx">enableNetworkPolicy</span> <span class="p">=</span> <span class="s2">"true"</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
    
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">vpc</span><span class="p">.</span><span class="nx">vpc_id</span>
  <span class="nx">subnet_ids</span> <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">vpc</span><span class="p">.</span><span class="nx">private_subnets</span>
    
  <span class="nx">create_cluster_security_group</span> <span class="p">=</span> <span class="kc">false</span>
  <span class="nx">create_node_security_group</span>    <span class="p">=</span> <span class="kc">false</span>
    
  <span class="nx">eks_managed_node_groups</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">instance_types</span>       <span class="p">=</span> <span class="p">[</span><span class="s2">"m5.large"</span><span class="p">]</span>
      <span class="nx">force_update_version</span> <span class="p">=</span> <span class="kc">true</span>
      <span class="nx">release_version</span>      <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">ami_release_version</span>
    
      <span class="nx">min_size</span>     <span class="p">=</span> <span class="mi">3</span>
      <span class="nx">max_size</span>     <span class="p">=</span> <span class="mi">6</span>
      <span class="nx">desired_size</span> <span class="p">=</span> <span class="mi">3</span>
    
      <span class="nx">update_config</span> <span class="p">=</span> <span class="p">{</span>
        <span class="nx">max_unavailable_percentage</span> <span class="p">=</span> <span class="mi">50</span>
      <span class="p">}</span>
    
      <span class="nx">labels</span> <span class="p">=</span> <span class="p">{</span>
        <span class="nx">workshop-default</span> <span class="p">=</span> <span class="s2">"yes"</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="nx">merge</span><span class="p">(</span><span class="kd">local</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="p">{</span>
    <span class="s2">"karpenter.sh/discovery"</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="p">})</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="terraform-init">terraform init</h4>

<p>테라폼을 사용하기위해 초기화하고, 설치된 모듈 및 프로바이더 정보를 확인해보겠습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
<span class="nv">$ </span>tree .terraform

<span class="c"># 설치된 모듈 확인</span>
<span class="nv">$ </span><span class="nb">cat</span> .terraform/modules/modules.json | jq

<span class="c"># 설치된 프로바이더 및 버전 확인</span>
<span class="nv">$ </span>tree .terraform/providers/registry.terraform.io/hashicorp <span class="nt">-L</span> 2
<span class="c"># =&gt; .terraform/providers/registry.terraform.io/hashicorp</span>
<span class="c">#    ├── aws</span>
<span class="c">#    │   └── 5.60.0</span>
<span class="c">#    ├── cloudinit</span>
<span class="c">#    │   └── 2.3.4</span>
<span class="c">#    ├── null</span>
<span class="c">#    │   └── 3.2.2</span>
<span class="c">#    ├── time</span>
<span class="c">#    │   └── 0.12.0</span>
<span class="c">#    └── tls</span>
<span class="c">#        └── 4.0.5</span>
</code></pre></div></div>

<h4 id="vpc-배포-1">VPC 배포</h4>

<p>VPC를 먼저 배포하고 관련 정보를 확인해보겠습니다.
EKS와 한꺼번에 배포해도 되지만 진행 상황을 확인하기 위해 VPC를 먼저 배포해보겠습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 설치전 VPC 정보 확인</span>
<span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> <span class="nt">--output</span> yaml
<span class="c"># =&gt; Vpcs: []     # 현재 VPC가 없습니다.</span>

<span class="c"># VPC 배포</span>
<span class="nv">$ </span>terraform apply <span class="nt">-target</span><span class="o">=</span><span class="s2">"module.vpc"</span> <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 23 added, 0 changed, 0 destroyed.</span>

<span class="c"># 배포 확인</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform show
<span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> <span class="nt">--output</span> yaml
<span class="c"># =&gt; Vpcs:</span>
<span class="c">#    - CidrBlock: 10.42.0.0/16</span>
<span class="c">#      CidrBlockAssociationSet:</span>
<span class="c">#      - AssociationId: vpc-cidr-assoc-0c375c03935938c89</span>
<span class="c">#        CidrBlock: 10.42.0.0/16</span>
<span class="c">#      ...</span>
<span class="c">#      State: available</span>
<span class="c">#      Tags:</span>
<span class="c">#      ...</span>
<span class="c">#      - Key: study                   # 추가한 태그 확인    </span>
<span class="c">#        Value: t101</span>
<span class="c">#      - Key: Name</span>
<span class="c">#        Value: t101-eks-workshop</span>
<span class="c">#      VpcId: vpc-0247fb591c49eab40</span>

<span class="c"># 사용가능한 가용성 존 확인 </span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available"</span> | terraform console

<span class="c"># VPC/subnet 상세 정보 및 tag 확인</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.vpc.aws_vpc.this[0]'</span>

<span class="nv">$ VPCID</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo </span>module.vpc.vpc_id | terraform console<span class="si">)</span>   <span class="c"># 현재 VPC ID를 $VPCID 변수에 저장</span>
<span class="c"># VPC 의 Subnet 상세 정보 확인 (json)</span>
<span class="nv">$ </span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="s2">"Name=vpc-id,Values=</span><span class="nv">$VPCID</span><span class="s2">"</span> | jq
<span class="c"># VPC 의 Subnet 상세 정보 확인 (텍스트)</span>
<span class="nv">$ </span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="s2">"Name=vpc-id,Values=</span><span class="nv">$VPCID</span><span class="s2">"</span> <span class="nt">--output</span> text

<span class="c"># public 서브넷과 private 서브넷 CIDR 확인</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.vpc.aws_subnet.public[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.vpc.aws_subnet.private[0]'</span>
</code></pre></div></div>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_37.png" alt="VPC 배포 결과 (subnet)" class="image-center" />
<em class="image-caption">VPC 배포 결과 (subnet)</em></p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_38.png" alt="VPC 배포 결과 (subnet 태그 정보)" class="image-center" />
<em class="image-caption">VPC 배포 결과 (subnet 태그 정보)</em></p>

<h4 id="eks-배포">EKS 배포</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># EKS 배포</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span> 
<span class="c"># =&gt; Apply complete! Resources: 24 added, 0 changed, 0 destroyed.</span>

<span class="c"># EKS 배포 확인</span>
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; data.aws_availability_zones.available</span>
<span class="c">#    module.eks.data.aws_caller_identity.current</span>
<span class="c">#    module.eks.data.aws_eks_addon_version.this["vpc-cni"]</span>
<span class="c">#    module.eks.data.aws_iam_policy_document.assume_role_policy[0]</span>
<span class="c">#    module.eks.data.aws_iam_session_context.current</span>
<span class="c">#    module.eks.data.aws_partition.current</span>
<span class="c">#    module.eks.data.tls_certificate.this[0]</span>
<span class="c">#    module.eks.aws_cloudwatch_log_group.this[0]</span>
<span class="c">#    module.eks.aws_ec2_tag.cluster_primary_security_group["created-by"]</span>
<span class="c">#    module.eks.aws_ec2_tag.cluster_primary_security_group["env"]</span>
<span class="c">#    module.eks.aws_ec2_tag.cluster_primary_security_group["karpenter.sh/discovery"]</span>
<span class="c">#    module.eks.aws_ec2_tag.cluster_primary_security_group["study"]</span>
<span class="c">#    module.eks.aws_eks_addon.before_compute["vpc-cni"]</span>
<span class="c">#    module.eks.aws_eks_cluster.this[0]</span>
<span class="c">#    module.eks.aws_iam_openid_connect_provider.oidc_provider[0]</span>
<span class="c">#    module.eks.aws_iam_policy.cluster_encryption[0]</span>
<span class="c">#    module.eks.aws_iam_role.this[0]</span>
<span class="c">#    ...</span>
<span class="c">#    module.eks.module.kms.data.aws_caller_identity.current[0]</span>
<span class="c">#    module.eks.module.kms.data.aws_iam_policy_document.this[0]</span>
<span class="c">#    module.eks.module.kms.data.aws_partition.current[0]</span>
<span class="c">#    module.eks.module.kms.aws_kms_alias.this["cluster"]</span>
<span class="c">#    module.eks.module.kms.aws_kms_key.this[0]</span>
<span class="c">#    module.eks.module.eks_managed_node_group["default"].module.user_data.null_resource.validate_cluster_service_cidr</span>

<span class="c"># EKS 자격 증명 설정 및 확인</span>
<span class="c">## aws eks --region &lt;REGION&gt; update-kubeconfig --name &lt;CLUSTER_NAME&gt; --alias &lt;CLUSTER_NAME&gt;</span>
<span class="nv">$ </span>aws eks <span class="nt">--region</span> ap-northeast-2 update-kubeconfig <span class="nt">--name</span> t101-eks-workshop
<span class="nv">$ </span><span class="nb">cat</span> ~/.kube/config

<span class="c"># k8s 클러스터 정보 확인</span>
<span class="nv">$ </span>kubectl cluster-info
<span class="c"># =&gt; error: You must be logged in to the server (Unauthorized)</span>
</code></pre></div></div>

<p>정상적으로 배포하였고 EKS 자격증명을 설정하였음에도 kubectl 사용시 권한이 없다고 나옵니다.</p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_40.png" alt="EKS 배포 결과 (IAM 권한 없음)" class="image-center" /></p>

<p>또한 EKS 콘솔에서도 권한이 없다고 나옵니다.
이는 현재 사용중인 IAM이 해당 k8s 클러스터에 대한 권한이 없기 때문입니다.
권한을 부여하는 작업을 진행하고 계속 배포상태를 확인해보겠습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># EKS 관리용 IAM User 의 access entry 생성</span>
<span class="nv">$ ACCOUNT_ID</span><span class="o">=</span><span class="si">$(</span>aws sts get-caller-identity <span class="nt">--query</span> <span class="s1">'Account'</span> <span class="nt">--output</span> text<span class="si">)</span>
<span class="c"># $ MYIAMUSER=&lt;각자 자신의 IAM User&gt;</span>
<span class="nv">$ MYIAMUSER</span><span class="o">=</span>admin
<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$ACCOUNT_ID</span> <span class="nv">$MYIAMUSER</span>
<span class="nv">$ </span>aws eks create-access-entry <span class="nt">--cluster-name</span> t101-eks-workshop <span class="nt">--principal-arn</span> arn:aws:iam::<span class="k">${</span><span class="nv">ACCOUNT_ID</span><span class="k">}</span>:user/<span class="k">${</span><span class="nv">MYIAMUSER</span><span class="k">}</span>
<span class="nv">$ </span>aws eks list-access-entries <span class="nt">--cluster-name</span> t101-eks-workshop

<span class="c"># EKS 관리용 IAM User에 AmazonEKSClusterAdminPolicy 연동</span>
<span class="nv">$ </span>aws eks associate-access-policy <span class="nt">--cluster-name</span> t101-eks-workshop <span class="nt">--principal-arn</span> arn:aws:iam::<span class="k">${</span><span class="nv">ACCOUNT_ID</span><span class="k">}</span>:user/<span class="k">${</span><span class="nv">MYIAMUSER</span><span class="k">}</span> <span class="se">\</span>
  <span class="nt">--policy-arn</span> arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy <span class="nt">--access-scope</span> <span class="nb">type</span><span class="o">=</span>cluster

<span class="nv">$ </span>aws eks list-associated-access-policies <span class="nt">--cluster-name</span> t101-eks-workshop <span class="nt">--principal-arn</span> arn:aws:iam::<span class="k">${</span><span class="nv">ACCOUNT_ID</span><span class="k">}</span>:user/<span class="k">${</span><span class="nv">MYIAMUSER</span><span class="k">}</span> | jq
<span class="nv">$ </span>aws eks describe-access-entry <span class="nt">--cluster-name</span> t101-eks-workshop <span class="nt">--principal-arn</span> arn:aws:iam::<span class="k">${</span><span class="nv">ACCOUNT_ID</span><span class="k">}</span>:user/<span class="k">${</span><span class="nv">MYIAMUSER</span><span class="k">}</span> | jq
 
<span class="c"># (참고) context name 변경</span>
<span class="nv">$ </span>kubectl config rename-context <span class="s2">"arn:aws:eks:ap-northeast-2:</span><span class="si">$(</span>aws sts get-caller-identity <span class="nt">--query</span> <span class="s1">'Account'</span> <span class="nt">--output</span> text<span class="si">)</span><span class="s2">:cluster/t101-eks-workshop"</span> <span class="s2">"T101-Lab"</span>
<span class="c"># =&gt; Context "arn:aws:eks:ap-northeast-2:123456:cluster/t101-eks-workshop" renamed to "T101-Lab".</span>

<span class="c"># k8s 클러스터, 노드, 파드 정보 확인 - 이제 정상적으로 조회 됩니다.</span>
<span class="nv">$ </span>kubectl cluster-info
<span class="c"># =&gt; Kubernetes control plane is running at https://79B209921C6987FCA6A542FDE1272C2E.gr7.ap-northeast-2.eks.amazonaws.com</span>
<span class="c">#    CoreDNS is running at https://79B209921C6987FCA6A542FDE1272C2E.gr7.ap-northeast-2.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span>

<span class="nv">$ </span>kubectl get node
<span class="nv">$ </span>kubectl get nodes <span class="nt">-L</span> node.kubernetes.io/instance-type <span class="nt">-L</span> topology.kubernetes.io/zone
<span class="c"># =&gt; NAME                                               STATUS   ROLES    AGE   VERSION               INSTANCE-TYPE   ZONE</span>
<span class="c">#    ip-10-42-103-44.ap-northeast-2.compute.internal    Ready    &lt;none&gt;   16m   v1.30.0-eks-036c24b   m5.large        ap-northeast-2a</span>
<span class="c">#    ip-10-42-153-180.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   16m   v1.30.0-eks-036c24b   m5.large        ap-northeast-2b</span>
<span class="c">#    ip-10-42-171-220.ap-northeast-2.compute.internal   Ready    &lt;none&gt;   16m   v1.30.0-eks-036c24b   m5.large        ap-northeast-2c</span>

<span class="nv">$ </span>kubectl get pod <span class="nt">-A</span>
<span class="c"># =&gt; NAMESPACE     NAME                      READY   STATUS    RESTARTS   AGE</span>
<span class="c">#    kube-system   aws-node-2jnd5            2/2     Running   0          16m</span>
<span class="c">#    kube-system   aws-node-ftb8g            2/2     Running   0          16m</span>
<span class="c">#    kube-system   aws-node-gn6nx            2/2     Running   0          16m</span>
<span class="c">#    kube-system   coredns-5b9dfbf96-f8bfr   1/1     Running   0          19m</span>
<span class="c">#    kube-system   coredns-5b9dfbf96-rtwfs   1/1     Running   0          19m</span>
<span class="c">#    kube-system   kube-proxy-5zkxj          1/1     Running   0          16m</span>
<span class="c">#    kube-system   kube-proxy-n645w          1/1     Running   0          16m</span>
<span class="c">#    kube-system   kube-proxy-rcbvk          1/1     Running   0          16m</span>
 
<span class="c"># 상세 정보 확인</span>
<span class="nv">$ </span>terraform show
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_ec2_tag.cluster_primary_security_group["study"]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_eks_addon.before_compute["vpc-cni"]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_eks_cluster.this[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_iam_openid_connect_provider.oidc_provider[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.aws_iam_policy.cluster_encryption[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.time_sleep.this[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.eks_managed_node_group["default"].aws_eks_node_group.this[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.eks_managed_node_group["default"].aws_iam_role.this[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.eks_managed_node_group["default"].aws_launch_template.this[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.eks_managed_node_group["default"].module.user_data.null_resource.validate_cluster_service_cidr'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.kms.aws_kms_key.this[0]'</span>
<span class="nv">$ </span>terraform state show <span class="s1">'module.eks.module.kms.aws_kms_alias.this["cluster"]'</span>
</code></pre></div></div>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_41.png" alt="EKS 배포 결과 (정상)" class="image-center" /></p>

<h4 id="kube-ops-view-설치-및-사용">kube-ops-view 설치 및 사용</h4>
<p>앞서 설치해보았던 kube-ops-view를 이번 kubernetes 클러스터에도 설치해보겠습니다.</p>

<p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_42.png" alt="kube-ops-view" class="image-center" />
  <em class="image-caption image-caption--img-shadow">kube-ops-view</em></p>

<ul>
  <li>노드의 파드 상태정보를 웹페이지에서 실시간으로 출력해줍니다.</li>
  <li>설치 및 사용
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>helm repo add geek-cookbook https://geek-cookbook.github.io/charts/
<span class="c"># =&gt; "geek-cookbook" has been added to your repositories</span>
    
<span class="nv">$ </span>helm <span class="nb">install </span>kube-ops-view geek-cookbook/kube-ops-view <span class="nt">--version</span> 1.2.2 <span class="nt">--set</span> env.TZ<span class="o">=</span><span class="s2">"Asia/Seoul"</span> <span class="nt">--namespace</span> kube-system

<span class="c"># 포트포워딩</span>
<span class="nv">$ </span>kubectl port-forward deployment/kube-ops-view <span class="nt">-n</span> kube-system 8080:8080 &amp;

<span class="c"># 접속 주소 확인 : 각각 1배, 1.5배, 3배 크기</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"KUBE-OPS-VIEW URL = http://localhost:8080"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"KUBE-OPS-VIEW URL = http://localhost:8080/#scale=1.5"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"KUBE-OPS-VIEW URL = http://localhost:8080/#scale=3"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="pod-배포">Pod 배포</h4>

<p>EKS Blueprint에서 제공하는 예제를 이용하여 Pod를 배포해보겠습니다.</p>

<ul>
  <li>example.yml 생성
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">inflate</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">0</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">inflate</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">inflate</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">terminationGracePeriodSeconds</span><span class="pi">:</span> <span class="m">0</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">inflate</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">public.ecr.aws/eks-distro/kubernetes/pause:3.7</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="na">requests</span><span class="pi">:</span>
              <span class="na">cpu</span><span class="pi">:</span> <span class="s">1</span>     
</code></pre></div>    </div>
  </li>
  <li>Pod 배포 실습
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl create <span class="nt">-f</span> example.yml
<span class="c"># =&gt; deployment.apps/inflate created</span>
  
<span class="nv">$ </span>kubectl get deploy   <span class="c"># replicas가 0이어서 생성된 pod가 없습니다.</span>
<span class="c"># =&gt; NAME      READY   UP-TO-DATE   AVAILABLE   AGE</span>
<span class="c">#    inflate   0/0     0            0           16s</span>
  
<span class="c"># 3개로 scale 해보겠습니다.</span>
<span class="nv">$ </span>kubectl scale deployment inflate <span class="nt">--replicas</span><span class="o">=</span>3 <span class="o">&amp;&amp;</span> kubectl get pod <span class="nt">-w</span>
<span class="c"># =&gt; deployment.apps/inflate scaled</span>
<span class="c">#    NAME                       READY   STATUS              RESTARTS   AGE</span>
<span class="c">#    inflate-66fb68585c-8j7wr   0/1     ContainerCreating   0          1s</span>
<span class="c">#    inflate-66fb68585c-j6bh4   0/1     ContainerCreating   0          1s</span>
<span class="c">#    inflate-66fb68585c-sqwmc   0/1     ContainerCreating   0          1s</span>
<span class="c">#    ... 잠시후 ...</span>
<span class="c">#    inflate-66fb68585c-8j7wr   1/1     Running             0          4s</span>
<span class="c">#    inflate-66fb68585c-j6bh4   1/1     Running             0          5s</span>
<span class="c">#    inflate-66fb68585c-sqwmc   1/1     Running             0          5s</span>
</code></pre></div>    </div>
    <p><img src="/assets/2024/t101-4th/20240727_terraform_w7_eks_karpenter_43.png" alt="Pod 배포 결과" class="image-center" />
<em class="image-caption image-caption--img-shadow">Pod 배포 결과</em></p>
  </li>
</ul>

<h4 id="eks-클러스터-및-vpc-삭제">EKS 클러스터 및 VPC 삭제</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># kube-ops-view 삭제</span>
<span class="nv">$ </span>helm uninstall kube-ops-view <span class="nt">-n</span> kube-system
<span class="c"># =&gt; release "kube-ops-view" uninstalled</span>

<span class="c"># 삭제 : vpc 삭제가 잘 안될 경우 aws 콘솔에서 vpc 수동 삭제 -&gt; vnic 등 남아 있을 경우 해당 vnic 강제 삭제 : 9분 소요</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Destroy complete! Resources: 47 destroyed.</span>

<span class="c"># VPC 삭제 확인</span>
<span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> <span class="nt">--output</span> yaml
<span class="c"># =&gt; Vpcs: []</span>

<span class="c"># kubeconfig 삭제</span>
<span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> ~/.kube/config
</code></pre></div></div>

<h2 id="마치며">마치며</h2>

<p>이번 주에는 EKS Blueprint를 이용한 방법과 EKS Workshop을 이용한 방법을 통해 Terraform을 활용하여 EKS 배포를 진행해보았습니다.
이번 실습을 통해 놀란점은 <strong>EKS 배포가 참 복잡하고 많은 AWS 기능을 사용해야 하는구나</strong> 하는것과
<strong>Terraform을 활용하면 이렇게 쉽게 클러스터를 배포</strong> 할 수 있구나 하는것입니다.</p>

<p>아무리 복잡한 배포 과정이 필요하더라도 <strong>Terraform 모듈을 잘 만들어두면</strong>
이후에는 <strong>누구라도 쉽게</strong> 몇 줄의 명령어 만으로 배포가 가능하다는 것을 느꼈고
Terraform의 강력함을 느꼈습니다.</p>

<p>이번 실습을 거치면서 AWS와 Terraform에 대해 조금더 알게 되었고, 한 발자국 더 가까워진 느낌입니다.
좋은 실습 기회를 주신 가시다 님과 Terraform 101 스터디를 진행하신 분들께 감사드립니다.
다음 스터디가 마지막이어서 아쉽기도 하면서 기대도 됩니다. 마지막까지 열심히 달려보겠습니다.</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[이번 주에는 테라폼으로 AWS EKS 배포를 하는것을 테라폼으로 시작하는 IaC를 통해 알아 보겠습니다.]]></summary></entry><entry><title type="html">[T101 4기] Runner</title><link href="https://sweetlittlebird.github.io/posts/2024-07-13-T101-Study-Terraform-Week-5b/" rel="alternate" type="text/html" title="[T101 4기] Runner" /><published>2024-07-13T02:08:00+09:00</published><updated>2024-07-13T02:08:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%205b</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-07-13-T101-Study-Terraform-Week-5b/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>이번 주에는 <code class="language-plaintext highlighter-rouge">Module</code>과 <code class="language-plaintext highlighter-rouge">Runner</code>에 대해
<a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a>를 통해 알아 보는 중입니다.
계속해서 Terraform Runner에 대해 알아보겠습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="terraform-runner">Terraform Runner</h2>

<ul>
  <li>Terraform Runner는 Terraform을 사용하여 인프라를 관리하는 방법 중 하나로
인프라스트럭처 코드의 배포를 간소화하기 위해 사용됩니다.</li>
  <li>특히 GitOps 등을 통한 CI/CD 파이프라인 내에서 자주 사용되며,
코드 변경 사항을 자동으로 감지하고 적용하여 인프라의 상태를 최신 상태로 유지하는 데 도움을 줍니다. 
이를 통해 개발자와 운영팀은 인프라 관리를 더 효율적이고 안정적으로 수행할 수 있습니다.</li>
  <li>참고 링크
    <ul>
      <li>국내
        <ul>
          <li>Terraform을 GitOps 방식으로 사용하기 위한 도구 선택 - <a href="https://nangman14.tistory.com/109">Link</a></li>
          <li>Atlantis 란? (Terraform Pull Request Automation) - <a href="https://kim-dragon.tistory.com/253">Link</a></li>
          <li>펫프렌즈가 DevOps 조직없이 인프라를 관리하는 방법 - <a href="https://techblog.pet-friends.co.kr/%ED%8E%AB%ED%94%84%EB%A0%8C%EC%A6%88%EA%B0%80-devops-%EC%A1%B0%EC%A7%81%EC%97%86%EC%9D%B4-%EC%9D%B8%ED%94%84%EB%9D%BC%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-ce27449bc201">Link</a></li>
          <li>Atlantis 배포하기 - <a href="https://devops-art-factory.gitbook.io/devops-workshop/terraform/atlantis/atlantis-main">Link</a></li>
          <li>Github에서 Atlantis를 이용한  Terraform 협업 환경 구축 - <a href="https://isn-t.tistory.com/46">Link</a> <a href="https://github.com/TAEKnical/Terraform_study/">Github</a></li>
          <li>Jenkins + terraform + tfsec 로 정적 분석 자동화 구성 하기 - <a href="https://devocean.sk.com/blog/techBoardDetail.do?ID=163872">Link</a></li>
        </ul>
      </li>
      <li>해외
        <ul>
          <li>install-atlantis-docker-container-in-amazon-linux-integrate - <a href="https://www.easydeploy.io/blog/install-atlantis-docker-container-in-amazon-linux-integrate/">Link</a> <a href="https://github.com/easydeploy-cloud/atlantis-blog">Github</a></li>
          <li>Hacking Atlantis - <a href="https://www.youtube.com/watch?v=S1-vGf_ao1s&amp;t=896s">Youtube</a></li>
          <li>[CNCF] How Breaking up Our Infrastructure Monorepos Saved Us from Pul… Donnie Laughton - <a href="https://www.youtube.com/watch?v=5dAUDpwZTQ8">Youtube</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Terraform Runner는 다수의 종류가 있는데 그 중에서 Atlantis를 사용해 보겠습니다.</li>
</ul>

<h3 id="atlantis-란">Atlantis 란?</h3>

<ul>
  <li><strong>Atlantis</strong>는 <strong>Terraform Pull Request Automation</strong> 도구로,
Terraform 코드를 GitOps 방식으로 관리할 때 사용됩니다. Terraform Pull Request Automation란 개발자와 운영자가 <strong>풀 리퀘스트에서 직접 terraform plan과 apply를 실행할 수 있게</strong> 하여
Terraform 워크플로우의 협업과 안전성을 개선합니다.</li>
  <li>이는 개발자가 자격 증명 없이 Terraform을 작성하고 적용할 수 있도록 돕고, 효과적인 협업 문제를 해결합니다. 자세한 내용은 다음 링크에서 확인할 수 있습니다. <a href="https://www.runatlantis.io/">Link</a></li>
  <li>대략적인 동작 방식은 아래와 같습니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_1.png" alt="img.png" class="image-center" />
<em class="image-caption">출처 : <a href="https://isn-t.tistory.com/46">https://isn-t.tistory.com/46</a></em></li>
</ul>

<h3 id="atlantis-설치">Atlantis 설치</h3>

<ul>
  <li>Atlantis는 다양한 방법으로 설치할 수 있습니다. 이 중에서 Github를 사용하고 Docker를 사용한 설치 방법을 소개합니다.</li>
  <li>설치 순서
    <ol>
      <li>github 에 repository 생성합니다. (private/public 관계 없음)</li>
      <li>Personal Access Token을 생성합니다.
        <ul>
          <li>프로필 사진 클릭 &gt; Settings &gt; Developer settings &gt; Personal access tokens &gt; Fine-grained tokens &gt; Generate new token</li>
          <li>이름 부여</li>
          <li>Only select repositories 선택</li>
          <li>권한을 줄 저장소 선택 (1. 에서 만든 repository)</li>
          <li>Repository Permissions의 Contents 에 Read &amp; write 선택</li>
          <li>Generate token 버튼 클릭</li>
          <li>생성된 토큰을 복사합니다.</li>
        </ul>
      </li>
      <li>공인 IP가 있는 서버에 Docker를 설치합니다. (공유기로 포트포워딩 해도 좋습니다.)
        <ul>
          <li>Docker 설치 방법은 다양하게 있습니다. <a href="https://docs.docker.com/get-docker/">Docker 설치</a> Docker가 설치 되었다고 가정하고 진행하겠습니다.</li>
        </ul>
      </li>
      <li>Docker에서 atlantis 실행
        <ul>
          <li>docker-compose.yml 작성
            <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">atlantis</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">ghcr.io/runatlantis/atlantis:v0.28-alpine</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">4141:4141"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ATLANTIS_GH_WEBHOOK_SECRET=&lt;GITHUB연동용 랜덤값&gt;</span>
      <span class="pi">-</span> <span class="s">ATLANTIS_GH_USER=&lt;GITHUB 아이디&gt;</span>
      <span class="pi">-</span> <span class="s">ATLANTIS_GH_TOKEN=&lt;2.에서 생성한 토큰&gt;</span>
      <span class="pi">-</span> <span class="s">ATLANTIS_REPO_ALLOWLIST=&lt;1.에서 생성한 repository 이름&gt;</span>
</code></pre></div>            </div>
          </li>
          <li>docker-compose 실행
            <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose up <span class="nt">-d</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>Atlantis 접속 테스트
        <ul>
          <li>브라우저에서 <code class="language-plaintext highlighter-rouge">http://&lt;서버 IP&gt;:4141</code>로 접속하여 확인합니다.</li>
          <li>Atlantis가 정상적으로 실행되었다면 아래와 같은 화면이 나타납니다.
 <img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_2.png" alt="img.png" /></li>
        </ul>
      </li>
      <li>Github에 Webhook 설정
        <ul>
          <li>1.에서 생성한 저장소에 접속합니다.</li>
          <li>Settings &gt; Webhooks &gt; Add webhook 클릭합니다.</li>
          <li>Payload URL에 앞서 접속 테스트한 <code class="language-plaintext highlighter-rouge">http://&lt;서버 IP&gt;:4141/events</code> 를 기입합니다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">/events</code> 로 끝나는지 반드시 확인합니다. 특히 405 에러가 나면 더욱 그러합니다.</li>
            </ul>
          </li>
          <li>Content type에 <code class="language-plaintext highlighter-rouge">application/json</code> 을 선택합니다.</li>
          <li>Secret에 4.에서 등록한 <code class="language-plaintext highlighter-rouge">&lt;GITHUB연동용 랜덤값&gt;</code>을 기입합니다.</li>
          <li>Let me select individual events를 선택합니다.</li>
          <li>다음 항목들을 체크합니다.
            <ul>
              <li>Pull request reviews</li>
              <li>Pushes</li>
              <li>Issue comments</li>
              <li>Pull requests</li>
            </ul>
          </li>
          <li>Active를 체크합니다.</li>
          <li>Add webhook 버튼을 클릭합니다.</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>설치과정이 완료되었습니다. 이제 Terraform 코드를 작성하고 PR을 생성하여 Atlantis를 통해 Terraform 코드를 관리해 보겠습니다.</li>
</ul>

<h3 id="atlantis-실습">Atlantis 실습</h3>

<h4 id="작업-1-null-provider">작업 1. null provider</h4>

<ul>
  <li>
    <p>Local에서 git 코드 작업</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git clone</span>
<span class="nv">$ </span>git clone https://github.com/sweetlittlebird/terraform-atlantis-test <span class="o">&amp;&amp;</span> <span class="nb">cd </span>terraform-atlantis-test <span class="o">&amp;&amp;</span> tree
  
<span class="c"># feature branch 생성</span>
<span class="nv">$ </span>git branch <span class="nb">test</span> <span class="o">&amp;&amp;</span> git checkout <span class="nb">test</span> <span class="o">&amp;&amp;</span> git branch
  
<span class="c"># main.tf 파일 작성</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'resource "null_resource" "example" {}'</span> <span class="o">&gt;</span> main.tf
  
<span class="c"># add commit push</span>
<span class="nv">$ </span>git add main.tf <span class="o">&amp;&amp;</span> git commit <span class="nt">-m</span> <span class="s2">"add main.tf"</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">test</span> 
</code></pre></div>    </div>
  </li>
  <li>
    <p>Github PR 생성 =&gt; Atlantis 확인</p>
    <ul>
      <li>서버에서 다음의 명령어로 모니터링합니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis
</code></pre></div>        </div>
      </li>
      <li>Github 에서 Compare &amp; Pull request를 클릭합니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_3.png" alt="img.png" /></li>
      <li>Create pull request : title ( create null resource )
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_4.png" alt="img.png" /></li>
      <li>plan 자동 수행 확인
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_5.png" alt="img.png" />
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_6.png" alt="img.png" /></li>
      <li>서버 모니터링 결과 init 과 plan 이 실행된것을 확인 할 수 있습니다.
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis    
<span class="c"># =&gt; /home/atlantis/.atlantis</span>
<span class="c">#    ├── atlantis.db</span>
<span class="c">#    ├── bin</span>
<span class="c">#    ├── plugin-cache</span>
<span class="c">#    │   └── registry.terraform.io</span>
<span class="c">#    │       └── hashicorp</span>
<span class="c">#    │           └── null</span>
<span class="c">#    │               └── 3.2.2</span>
<span class="c">#    │                   └── linux_amd64</span>
<span class="c">#    │                       └── terraform-provider-null_v3.2.2_x5</span>
<span class="c">#    └── repos</span>
<span class="c">#        └── sweetlittlebird</span>
<span class="c">#            └── terraform-atlantis-test</span>
<span class="c">#                └── 2</span>
<span class="c">#                    └── default</span>
<span class="c">#                        ├── default.tfplan</span>
<span class="c">#                        └── main.tf                                        </span>
    
<span class="c"># github repo에서 코드를 가져온것을 확인                          </span>
<span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 <span class="nb">cat</span> /home/atlantis/.atlantis/repos/sweetlittlebird/terraform-atlantis-test/2/default/main.tf
</code></pre></div>        </div>
      </li>
      <li>PR 코멘트에 이것저것 명령을 넣어봅니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_7.png" alt="20240711_terraform_w5_atlantis_7.png" />
        <ul>
          <li><code class="language-plaintext highlighter-rouge">atlantis help</code>는 응답이 오지만 <code class="language-plaintext highlighter-rouge">cat /etc/passwd</code>는 반응이 없습니다.</li>
        </ul>
      </li>
      <li>PR 코멘트에 명령을 조합해서 속이려고 해도 되지 않습니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_8.png" alt="20240711_terraform_w5_atlantis_8.png" /></li>
      <li>이제 apply 해보겠습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atlantis plan <span class="nt">-d</span> <span class="nb">.</span>
atlantis apply <span class="nt">-d</span> <span class="nb">.</span>
</code></pre></div>        </div>
        <p><img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_9.png" alt="20240711_terraform_w5_atlantis_9.png" /></p>
      </li>
      <li>아틀란티스 웹에서 확인해보겠습니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_10.png" alt="img.png" /></li>
      <li>plan과 apply가 잘 된 것을 확인할 수 있습니다.</li>
      <li>만약 Locks에 항목이 있고, 어떤 의도에서든 plan을 다시 실행하고 싶다면 클릭해서 <strong>Discard Plan &amp; Unlock</strong> 하십시오. 그렇지 않으면 Lock 된 plan으로 apply 됩니다. pull request를 merge 하면 Lock 이 해제됩니다.</li>
    </ul>
  </li>
</ul>

<h5 id="atlantis의-auto-plan-manual-plan-apply">atlantis의 Auto plan, Manual plan, Apply</h5>

<ul>
  <li>auto plan
    <ul>
      <li>Atlantis는 기본적으로 자동으로 plan을 실행합니다.</li>
    </ul>
  </li>
  <li>manual plan
    <ul>
      <li>variable의 값을 넘기거나 하고 싶다면 수동 plan 실행이 필요합니다.</li>
      <li>PR 코멘트에 다음 명령들을 실행하면 수동 plan이 실행됩니다. (단, Lock이 걸려있지 않아야 합니다.)
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atlantis plan <span class="nt">-d</span> <span class="nb">dir</span>      <span class="c"># 디렉터리</span>
atlantis plan <span class="nt">-w</span> staging  <span class="c"># 워크스페이스</span>
atlantis plan <span class="nt">--</span> <span class="nt">-target</span><span class="o">=</span>resource <span class="nt">-var</span> <span class="s1">'foo=bar'</span>  <span class="c"># -var로 variable 값 넘기기</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>apply
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atlantis apply             <span class="c"># 루트 디렉터리에서 실행</span>
atlantis apply <span class="nt">-d</span> <span class="nb">dir</span>      <span class="c"># 디렉터리</span>
atlantis apply <span class="nt">-w</span> staging  <span class="c"># 워크스페이스</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="작업-2-aws-iam-user-생성">작업 2. aws iam user 생성</h4>

<ul>
  <li>AWS S3 버킷 생성 : Terraform Backend state 저장용으로 사용합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws s3 <span class="nb">ls</span> 
  
<span class="c"># aws s3 mb s3://&lt;유일한 사용할 S3 버킷명&gt; --region ap-northeast-2</span>
aws s3 mb s3://sweetlittlebird-terraform-state <span class="nt">--region</span> ap-northeast-2 <span class="c"># S3 버킷 생성</span>
  
aws s3 <span class="nb">ls</span>  <span class="c"># 생성 확인</span>
</code></pre></div>    </div>
  </li>
  <li>Local에서 Git 코드 작업
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># feature branch 생성</span>
<span class="nv">$ </span>git branch iam <span class="o">&amp;&amp;</span> git checkout iam <span class="o">&amp;&amp;</span> git branch
  
<span class="c"># 디렉터리 생성</span>
<span class="nv">$ </span><span class="nb">mkdir </span>iam <span class="o">&amp;&amp;</span> <span class="nb">cd </span>iam
  
<span class="c"># main.tf 파일 작성</span>
<span class="nv">$ </span><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; main.tf
terraform {
  backend "s3" {
    bucket = "sweetlittlebird-terraform-state"  # 앞서 생성한 S3 버킷명
    key    = "terraform.tfstate"
    region = "ap-northeast-2"
  }
}
         
provider "aws" {
  region = "ap-southeast-1"
}  
  
resource "aws_iam_user" "myuser" {
  name = "t101user"
}
</span><span class="no">EOF
  
</span><span class="c"># add commit push</span>
git add main.tf <span class="o">&amp;&amp;</span> git commit <span class="nt">-m</span> <span class="s2">"add main.tf"</span> <span class="o">&amp;&amp;</span> git push origin iam
</code></pre></div>    </div>
  </li>
  <li>Github에서 PR 생성 및 Atlantis 확인
    <ul>
      <li>서버에서 다음의 명령어로 모니터링합니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis
</code></pre></div>        </div>
      </li>
      <li>Github 에서 Compare &amp; Pull request를 클릭합니다.</li>
      <li>Create pull request : title ( create iam user )</li>
      <li>plan 자동 수행 확인</li>
      <li>서버 모니터링 결과 init 과 plan 이 실행된것을 확인 할 수 있습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis
    
<span class="c"># =&gt; /home/atlantis/.atlantis</span>
<span class="c">#    ...</span>
<span class="c">#    └── repos</span>
<span class="c">#        └── sweetlittlebird</span>
<span class="c">#            └── terraform-atlantis-test</span>
<span class="c">#                └── 3</span>
<span class="c">#                    └── default</span>
<span class="c">#                        ├── iam</span>
<span class="c">#                        │   ├── default.tfplan</span>
<span class="c">#                        │   └── main.tf</span>
<span class="c">#                        └── main.tf</span>
    
<span class="c"># github repo에서 코드를 가져온것을 확인                          </span>
<span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 <span class="nb">cat</span> /home/atlantis/.atlantis/repos/sweetlittlebird/terraform-atlantis-test/3/default/iam/main.tf
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>S3 버킷 확인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://sweetlittlebird-terraform-state
<span class="c"># =&gt; 2024-07-XX 00:00:00        180 terraform.tfstate  </span>
</code></pre></div>    </div>
  </li>
  <li>apply 하기
    <ul>
      <li>PR 코멘트에 아래의 명령을 넣어 apply 합니다.
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atlantis plan <span class="nt">-d</span> iam
    
atlantis apply <span class="nt">-d</span> iam
</code></pre></div>        </div>
        <p><img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_12.png" alt="img.png" /></p>
      </li>
    </ul>
  </li>
  <li>S3 버킷 확인 - apply 하면서 적용된 최종 상태값을 저장하여 크기가 커진것을 확인할 수 있습니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://sweetlittlebird-terraform-state
<span class="c"># =&gt; 2024-07-14 02:12:56        862 terraform.tfstate</span>
</code></pre></div>    </div>
  </li>
  <li>Atlantis 웹에서 apply 됨을 확인합니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_11.png" alt="img.png" /></li>
  <li>Merge Pull request =&gt; Confirm merge
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis
  
<span class="c"># =&gt; /home/atlantis/.atlantis</span>
<span class="c">#    ...</span>
<span class="c">#    └── repos</span>
<span class="c">#        └── sweetlittlebird</span>
<span class="c">#            └── terraform-atlantis-test</span>
</code></pre></div>    </div>
    <p>terraform-atlantis-test 이하의 디렉터리와 파일들이 정리되어 삭제된것을 확인할 수 있습니다.</p>
  </li>
  <li>Merge request된 사항을 Local git main 에서 pull 받아서 확인합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout main
<span class="nv">$ </span>git pull origin main
<span class="nv">$ </span><span class="nb">cd</span> ..
<span class="nv">$ </span>tree
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="작업-3-작업-2에서-생성한-리소스-삭제">작업 3. 작업 2에서 생성한 리소스 삭제</h4>
<ul>
  <li>Local에서 Git 코드 작업
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># feature branch 생성</span>
git branch deleteiam <span class="o">&amp;&amp;</span> git checkout deleteiam <span class="o">&amp;&amp;</span> git branch
  
<span class="c"># 디렉터리 생성</span>
<span class="nb">mkdir </span>deleteiam <span class="o">&amp;&amp;</span> <span class="nb">cd </span>deleteiam
  
<span class="c"># main.tf 파일 작성</span>
<span class="nv">$ </span><span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; main.tf
terraform {
  backend "s3" {
    bucket = "sweetlittlebird-terraform-state"  # 앞서 생성한 S3 버킷명
    key    = "terraform.tfstate"
    region = "ap-northeast-2"
  }
}
</span><span class="no">EOF
  
</span><span class="c"># add commit push</span>
git add main.tf <span class="o">&amp;&amp;</span> git commit <span class="nt">-m</span> <span class="s2">"add main.tf"</span> <span class="o">&amp;&amp;</span> git push origin deleteiam
</code></pre></div>    </div>
  </li>
  <li>Github에서 PR 생성 및 Atlantis 확인
    <ul>
      <li>서버에서 다음의 명령어로 모니터링합니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis
</code></pre></div>        </div>
      </li>
      <li>Github 에서 Compare &amp; Pull request를 클릭합니다.</li>
      <li>Create pull request : title ( delete iam user )</li>
      <li>plan 자동 수행 확인
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_13.png" alt="20240711_terraform_w5_atlantis_13.png" /></li>
      <li>서버 모니터링 결과 init 과 plan 이 실행된것을 확인 할 수 있습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis
    
<span class="c"># =&gt; /home/atlantis/.atlantis</span>
<span class="c">#    ...</span>
<span class="c">#    └── repos</span>
<span class="c">#        └── sweetlittlebird</span>
<span class="c">#            └── terraform-atlantis-test</span>
<span class="c">#                └── 4</span>
<span class="c">#                    └── default</span>
<span class="c">#                        ├── deleteiam</span>
<span class="c">#                        │   ├── default.tfplan</span>
<span class="c">#                        │   └── main.tf</span>
<span class="c">#                        ├── iam</span>
<span class="c">#                        │   └── main.tf</span>
<span class="c">#                        └── main.tf</span>
    
<span class="c"># github repo에서 코드를 가져온것을 확인                          </span>
<span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 <span class="nb">cat</span> /home/atlantis/.atlantis/repos/sweetlittlebird/terraform-atlantis-test/4/default/deleteiam/main.tf
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>S3 버킷 확인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://sweetlittlebird-terraform-state
<span class="c"># =&gt; 2024-07-14 02:12:56        862 terraform.tfstate</span>
</code></pre></div>    </div>
  </li>
  <li>apply 하기
    <ul>
      <li>PR 코멘트에 아래의 명령을 넣어 apply 합니다.
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>atlantis apply <span class="nt">-d</span> deleteiam
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>AWS 콘솔에서 IAM이 삭제됨을 확인합니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_15.png" alt="20240711_terraform_w5_atlantis_15.png" /></li>
  <li>S3 버킷 확인 - apply 하면서 리소스가 삭제되어 상태파일 크기가 줄어든것을 확인할 수 있습니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://sweetlittlebird-terraform-state
<span class="c"># =&gt; 2024-07-14 02:35:09        180 terraform.tfstate</span>
</code></pre></div>    </div>
  </li>
  <li>Atlantis 웹에서 apply 됨을 확인합니다.
<img src="/assets/2024/t101-4th/20240711_terraform_w5_atlantis_14.png" alt="img.png" /></li>
  <li>Merge Pull request =&gt; Confirm merge
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker <span class="nb">exec</span> <span class="nt">-it</span> docker-atlantis-1 watch <span class="nt">-n</span> 1 tree /home/atlantis/.atlantis
  
<span class="c"># =&gt; /home/atlantis/.atlantis</span>
<span class="c">#    ...</span>
<span class="c">#    └── repos</span>
<span class="c">#        └── sweetlittlebird</span>
<span class="c">#            └── terraform-atlantis-test</span>
</code></pre></div>    </div>
    <p>terraform-atlantis-test 이하의 디렉터리와 파일들이 정리되어 삭제된것을 확인할 수 있습니다.</p>
  </li>
  <li>Merge request된 사항을 Local git main 에서 pull 받아서 확인합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout main <span class="o">&amp;&amp;</span> git pull <span class="o">&amp;&amp;</span> <span class="nb">cd</span> .. <span class="o">&amp;&amp;</span> tree
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="마치며">마치며</h2>

<p>이상과 같이 Atlantis를 사용하여 Terraform 코드를 관리하는 방법을 알아보았습니다.
팀으로 작업을 할 때 참 유용한 기능인것 같습니다. 
또한 이번주 스터디를 통해 Terraform의 생태계가 참 다양하고 크구나 하는것을 느꼈습니다.</p>

<p>공부할 수록 입문하기는 쉽지만 마스터하기는 어렵다는것을 느낍니다.
—애초에 마스터한다라는 개념이 존재하는지 모르겠습니다—
계속 공부하고 적용하고 반복하는것이 중요한것 같다라는것을 
이번 T101 4기 스터디를 통해 다시 한번 느낍니다.</p>

<p>기본 상태에서는 누구나 Atlantis 페이지에 접속해서 이력을 확인할 수 있어서
염려되는데 해당 부분에 대해  보완할 방법을 조금더 찾아봐야 할것 같습니다.
이번 주 수업도 기대됩니다. 완주까지 화이팅입니다.</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[이번 주에는 Module과 Runner에 대해 테라폼으로 시작하는 IaC를 통해 알아 보는 중입니다. 계속해서 Terraform Runner에 대해 알아보겠습니다.]]></summary></entry><entry><title type="html">[T101 4기] Module</title><link href="https://sweetlittlebird.github.io/posts/2024-07-10-T101-Study-Terraform-Week-5/" rel="alternate" type="text/html" title="[T101 4기] Module" /><published>2024-07-10T02:08:00+09:00</published><updated>2024-07-10T02:08:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%205</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-07-10-T101-Study-Terraform-Week-5/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>이번 주에는 <code class="language-plaintext highlighter-rouge">Module</code>과 <code class="language-plaintext highlighter-rouge">Runner</code>에 대해
<a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a>를 통해 알아 보겠습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="module">Module</h2>

<h3 id="module의-개요">Module의 개요</h3>

<p>테라폼으로 인프라와 서비스를 오랜 기간 관리하다보면 시간이 지날수록 관리하는 리소스가 늘어나면서 구성이 복잡해집니다. 마치 함수 하나가 수천줄 코드로 구성된 C 코드처럼, 다음과 같은 문제점이 발생합니다.</p>
<ol>
  <li>원하는 항목을 찾기 어렵고, 수정하기 어려워짐</li>
  <li>리소스간의 연관 관계가 복잡해져서 수정하기 어려워짐</li>
  <li>개발/스테이징/프로덕션 환경등으로 구분된 경우 코드 중복으로 업무효율이 줄어듬</li>
  <li>새로운 프로젝트를 구성할 경우 기존 코드를 복사하여 수정하는 방식으로 진행되어 코드 중복이 발생하고 종속성 파악이 어려움</li>
</ol>

<p>모듈은 테라폼 코드를 <strong>구조화</strong>하고 <strong>재사용 가능</strong>한 코드를 만들 수 있게 하여 이러한 <strong>문제점들을 해소</strong>해줍니다.</p>

<p><img src="/assets/2024/t101-4th/20240711_terraform_w5_module.png" alt="모듈과 모듈간 정의를 통한 프로비저닝 과정" class="image-center" />
<em class="image-caption">모듈과 모듈간 정의를 통한 프로비저닝 과정</em></p>

<p>모듈을 통한 프로비저닝 과정은 위와 같으며, 루트 모듈이 자식 모듈을 사용하여 프로비저닝을 하게 되는데 이 구조에 대해 살펴 보겠습니다.</p>

<h4 id="module의-구성">Module의 구성</h4>

<p>모듈은 크게 루트 모듈과 자식 모듈로 나뉩니다.</p>

<ul>
  <li>루트 모듈 (Root Module) : 테라폼 코드를 실행하는 최상위 모듈</li>
  <li>자식 모듈 (Child Module) : 루트 모듈에서 호출되는 모듈</li>
</ul>

<p>모듈은 루트 모듈과 자식 모듈은 모두 <strong>입력 변수</strong>를 받아서 Provider를 통해 리소스를 생성하는 등의 작업을 하고 <strong>결과를 출력</strong>하는 구조로 구성됩니다.</p>

<p><img src="/assets/2024/t101-4th/20240711_terraform_w5_module_root_module.png" alt="20240711_terraform_w5_module_root_module.png" class="image-center" />
<em class="image-caption">모듈의 기본 구조</em></p>

<p>위의 그림처럼 모듈은 레고 블럭같이 여러개를 조합하여 사용할 수 있습니다. 루트 모듈은 자식 모듈을 호출하고, 자식 모듈은 다른 자식 모듈을 호출할 수 있습니다.
이렇게 모듈로 만드는것을 <strong>모듈화</strong>라고 하며, 이를 통해 재사용성과 표준화된 구조를 구성할 수 있습니다.</p>

<p><img src="/assets/2024/t101-4th/20240711_terraform_w5_module_composite.png" alt="20240711_terraform_w5_module_composite.png" class="image-center" />
<em class="image-caption">루트 모듈과 자식 모듈</em></p>

<p>또한  기존에 작성된 모듈을 다른 모듈에서 참조해 사용할 수 있으며, 리소스와 유사하게 사용할 수 있습니다.</p>

<h4 id="module의-장점">Module의 장점</h4>

<p>모듈을 사용하면 다음과 같은 장점이 있습니다.</p>

<ul>
  <li>관리성 : 코드를 구조화하여 모듈 단위로 추가하거나 삭제하기 쉬워 관리가 용이해집니다.</li>
  <li>재사용성 : 모듈을 통해 코드를 재사용할 수 있어 개발 시간을 단축할 수 있습니다. 또한 parameter와 output 값을 통해 다양한 목적으로 재활용 가능합니다.</li>
  <li>캡슐화 : 각 모듈은 논리적으로 묶여져 독립적으로 프로비저닝 및 관리되며, 필요한 항목만 외부에 노출 시켜서 다른 모듈과 의존성을 줄일 수 있습니다.</li>
  <li>일관성과 표준화 : 모듈을 사용함으로써 중복을 줄이고, 구성을 일관성 있게 유지할 수 있습니다. 또한 검증된 모듈을 사용함으로써 표준화된 구성을 유지하고 보안 사고를 방지할 수 있습니다.</li>
</ul>

<h3 id="모듈-작성의-기본-원칙">모듈 작성의 기본 원칙</h3>

<p>모듈을 제대로 사용하기 위해서는 다음과 같은 기본 원칙을 지키길 추천합니다.</p>

<ul>
  <li><strong>모듈 디렉터리 형식을 <code class="language-plaintext highlighter-rouge">terraform-&lt;프로바이더 이름&gt;-&lt;모듈 이름&gt;</code> 형식으로 사용하기</strong> :
이 형식은 Terraform Cloud, Terraform Enterprise에서도 사용되는 방식으로, 
테라폼을 위한 것임을 밝히고, 어떤 프로바이더 리소스를 사용하는지, 어떤 모듈인지 쉽게 파악할 수 있습니다.</li>
  <li><strong>모듈을 독립적으로 관리하기</strong> : 리모트 모듈을 사용하지 않더라도 하위 모듈을 서브 디렉터리에 담지 않고,
독립된 모듈로 존재할 수 있도록 하는것을 추천합니다. 이렇게 하면 다른 프로젝트에서도 쉽게 사용할 수 있고,
VCS를 통해 버전관리하기도 수월합니다.</li>
  <li><strong>모듈 디렉터리 내에 <code class="language-plaintext highlighter-rouge">main.tf</code>, <code class="language-plaintext highlighter-rouge">variables.tf</code>, <code class="language-plaintext highlighter-rouge">outputs.tf</code> 파일을 포함하기</strong> :
이 파일들은 테라폼 코드를 작성할 때 필수적으로 사용되는 파일들로, 모듈을 사용하는 사람이 쉽게 파악할 수 있도록 구성합니다.</li>
  <li><strong>언제나 모듈화가 가능한 구조로 작성하기</strong> : 테라폼 리소스 구성 파일을 작성시 항상 모듈화 할 가능성을 염두해두고<br />
작성합니다. 이렇게 하면 리소스 구성 파일을 모듈화 할 때 추가적인 작업이 줄어들고, 일관성을 유지할 수 있게 도와줍니다.</li>
</ul>

<p>이외에도 <strong>공개된 테라폼 레지스트리의 모듈 참고하기</strong>, <strong>작성된 모듈을 팀 또는 커뮤니티와 공유하기</strong>도 추천합니다.</p>

<p>모듈을 독립적으로 관리하기 위해 루트 모듈의 하위 디렉터리에 두기 보다는,
루트 모듈과 같은 레벨에 <code class="language-plaintext highlighter-rouge">modules</code> 디렉터리를 두고, 아래에 각각의 모듈을 관리하기를 추천합니다.
다음과 같이 표현 할 수 있습니다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 06-module-training
 ├── modules                    <span class="c"># child module home</span>
 │   └── terraform-random-pwgen
 │       ├── main.tf
 │       ├── outputs.tf
 │       └── variables.tf
 └── 06-01-basic                <span class="c"># root-module</span>
     └── main.tf
</code></pre></div></div>

<h3 id="모듈화-해보기">모듈화 해보기</h3>

<h4 id="실습-1-비밀번호-생성하기">실습 1. 비밀번호 생성하기</h4>

<p>모듈을 만드는 것을 실습하기 위해 비밀번호를 생성하는 모듈을 만들어 보겠습니다.</p>

<ul>
  <li>06-module-training/modules/terraform-random-pwgen/ 디렉터리에 main.tf, variable.tf, output.tf 파일을 생성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"random_pet"</span> <span class="s2">"name"</span> <span class="p">{</span>
  <span class="nx">keepers</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">ami_id</span> <span class="p">=</span> <span class="nx">timestamp</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"random_password"</span> <span class="s2">"password"</span> <span class="p">{</span>
  <span class="nx">length</span>           <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">isDB</span> <span class="err">?</span> <span class="mi">16</span> <span class="err">:</span> <span class="mi">10</span>
  <span class="nx">special</span>          <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">isDB</span> <span class="err">?</span> <span class="kc">true</span> <span class="err">:</span> <span class="kc">false</span>
  <span class="nx">override_special</span> <span class="p">=</span> <span class="s2">"!#</span><span class="err">$</span><span class="s2">%*?"</span>
<span class="p">}</span> 
</code></pre></div>    </div>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># variable.tf</span>
<span class="k">variable</span> <span class="s2">"isDB"</span> <span class="p">{</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="nx">bool</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="kc">false</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"패스워드 대상의 DB 여부"</span>
<span class="p">}</span>  
</code></pre></div>    </div>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># output.tf</span>
<span class="k">output</span> <span class="s2">"id"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">random_pet</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"pw"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">nonsensitive</span><span class="p">(</span><span class="nx">random_password</span><span class="p">.</span><span class="nx">password</span><span class="p">.</span><span class="nx">result</span><span class="p">)</span> 
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>자식 모듈 테스트
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan
  
<span class="c"># 변수 지정없이 apply</span>
  
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 2 added, 0 changed, 0 destroyed.</span>
<span class="c">#    Outputs:</span>
<span class="c">#    id = "awaited-dodo"</span>
<span class="c">#    pw = "1tz5Cf4cuL"        # var.isDB가 기본값 false 여서 10자리 비밀번호가 생성됨</span>
  
<span class="c"># var.isDB=true 로 하여 apply</span>
  
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span> <span class="nt">-var</span><span class="o">=</span><span class="nv">isDB</span><span class="o">=</span><span class="nb">true</span>
<span class="c"># =&gt; Apply complete! Resources: 2 added, 0 changed, 2 destroyed.</span>
<span class="c">#    Outputs:</span>
<span class="c">#    id = "flying-gorilla"</span>
<span class="c">#    pw = "8LMyxla5fK$WP8x?"  # var.isDB를 true로 주어 16자리 비밀번호가 생성됨</span>
  
<span class="c"># 상태 확인</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show random_pet.name
  
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"random_pet.name.id"</span> | terraform console
<span class="c"># =&gt; "flying-gorilla"</span>
  
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"random_pet.name.keepers"</span> | terraform console
<span class="c"># =&gt; tomap({</span>
<span class="c">#      "ami_id" = "2024-07-11T15:04:58Z"</span>
<span class="c">#    })</span>
  
<span class="nv">$ </span>terraform state show random_password.password
  
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"random_password.password.length"</span> | terraform console
<span class="c"># =&gt; 16</span>
  
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"random_password.password.special"</span> | terraform console
<span class="c"># =&gt; true</span>
  
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate| <span class="nb">grep </span>result
  
<span class="c"># 상태파일에는 현재 module 에 대한 내용이 없습니다.</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | <span class="nb">grep </span>module
  
<span class="c"># graph 확인</span>
<span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
</code></pre></div>    </div>
  </li>
</ul>
<div class="graphviz max-w-100 image-center"><svg width="970pt" viewbox="0.00 0.00 970.18 260.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 256)">
<polygon fill="white" stroke="none" points="-4,4 -4,-256 966.18,-256 966.18,4 -4,4"></polygon>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="node1" class="node">
<title>[root] provider["registry.terraform.io/hashicorp/random"]</title>
<polygon fill="none" stroke="black" points="353.04,-36 68.35,-18 353.04,0 637.74,-18 353.04,-36"></polygon>
<text text-anchor="middle" x="353.04" y="-12.95" font-family="Times,serif" font-size="14.00">provider["registry.terraform.io/hashicorp/random"]</text>
</g>
<!-- [root] random_password.password (expand) -->
<g id="node2" class="node">
<title>[root] random_password.password (expand)</title>
<polygon fill="none" stroke="black" points="686.29,-108 515.79,-108 515.79,-72 686.29,-72 686.29,-108"></polygon>
<text text-anchor="middle" x="601.04" y="-84.95" font-family="Times,serif" font-size="14.00">random_password.password</text>
</g>
<!-- [root] random_password.password (expand)&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="edge5" class="edge">
<title>[root] random_password.password (expand)-&gt;[root] provider["registry.terraform.io/hashicorp/random"]</title>
<path fill="none" stroke="black" d="M539.1,-71.52C500.97,-60.75 452.3,-47.02 414.3,-36.29"></path>
<polygon fill="black" stroke="black" points="415.41,-32.97 404.83,-33.62 413.51,-39.7 415.41,-32.97"></polygon>
</g>
<!-- [root] var.isDB -->
<g id="node4" class="node">
<title>[root] var.isDB</title>
<polygon fill="none" stroke="black" points="714.04,-36 656.04,-36 656.04,0 720.04,0 720.04,-30 714.04,-36"></polygon>
<polyline fill="none" stroke="black" points="714.04,-36 714.04,-30"></polyline>
<polyline fill="none" stroke="black" points="720.04,-30 714.04,-30"></polyline>
<text text-anchor="middle" x="688.04" y="-12.95" font-family="Times,serif" font-size="14.00">var.isDB</text>
</g>
<!-- [root] random_password.password (expand)&#45;&gt;[root] var.isDB -->
<g id="edge6" class="edge">
<title>[root] random_password.password (expand)-&gt;[root] var.isDB</title>
<path fill="none" stroke="black" d="M622.55,-71.7C633.11,-63.2 646.02,-52.81 657.58,-43.51"></path>
<polygon fill="black" stroke="black" points="659.71,-46.29 665.31,-37.3 655.32,-40.84 659.71,-46.29"></polygon>
</g>
<!-- [root] random_pet.name (expand) -->
<g id="node3" class="node">
<title>[root] random_pet.name (expand)</title>
<polygon fill="none" stroke="black" points="410.54,-108 295.54,-108 295.54,-72 410.54,-72 410.54,-108"></polygon>
<text text-anchor="middle" x="353.04" y="-84.95" font-family="Times,serif" font-size="14.00">random_pet.name</text>
</g>
<!-- [root] random_pet.name (expand)&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="edge7" class="edge">
<title>[root] random_pet.name (expand)-&gt;[root] provider["registry.terraform.io/hashicorp/random"]</title>
<path fill="none" stroke="black" d="M353.04,-71.7C353.04,-64.41 353.04,-55.73 353.04,-47.54"></path>
<polygon fill="black" stroke="black" points="356.54,-47.62 353.04,-37.62 349.54,-47.62 356.54,-47.62"></polygon>
</g>
<!-- [root] output.id (expand) -->
<g id="node5" class="node">
<title>[root] output.id (expand)</title>
<ellipse fill="none" stroke="black" cx="103.04" cy="-162" rx="103.04" ry="18"></ellipse>
<text text-anchor="middle" x="103.04" y="-156.95" font-family="Times,serif" font-size="14.00">[root] output.id (expand)</text>
</g>
<!-- [root] output.id (expand)&#45;&gt;[root] random_pet.name (expand) -->
<g id="edge1" class="edge">
<title>[root] output.id (expand)-&gt;[root] random_pet.name (expand)</title>
<path fill="none" stroke="black" d="M156.06,-146.15C193.48,-135.68 243.95,-121.55 284.44,-110.21"></path>
<polygon fill="black" stroke="black" points="285.16,-113.64 293.85,-107.57 283.28,-106.9 285.16,-113.64"></polygon>
</g>
<!-- [root] output.pw (expand) -->
<g id="node6" class="node">
<title>[root] output.pw (expand)</title>
<ellipse fill="none" stroke="black" cx="855.04" cy="-162" rx="107.14" ry="18"></ellipse>
<text text-anchor="middle" x="855.04" y="-156.95" font-family="Times,serif" font-size="14.00">[root] output.pw (expand)</text>
</g>
<!-- [root] output.pw (expand)&#45;&gt;[root] random_password.password (expand) -->
<g id="edge2" class="edge">
<title>[root] output.pw (expand)-&gt;[root] random_password.password (expand)</title>
<path fill="none" stroke="black" d="M800.87,-146.07C764.24,-135.98 715.42,-122.52 675.2,-111.44"></path>
<polygon fill="black" stroke="black" points="676.13,-108.06 665.56,-108.78 674.27,-114.81 676.13,-108.06"></polygon>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close) -->
<g id="node7" class="node">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)</title>
<ellipse fill="none" stroke="black" cx="477.04" cy="-162" rx="252.49" ry="18"></ellipse>
<text text-anchor="middle" x="477.04" y="-156.95" font-family="Times,serif" font-size="14.00">[root] provider["registry.terraform.io/hashicorp/random"] (close)</text>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close)&#45;&gt;[root] random_password.password (expand) -->
<g id="edge3" class="edge">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)-&gt;[root] random_password.password (expand)</title>
<path fill="none" stroke="black" d="M507.7,-143.7C523.64,-134.69 543.35,-123.57 560.53,-113.87"></path>
<polygon fill="black" stroke="black" points="562.01,-117.05 569,-109.09 558.57,-110.96 562.01,-117.05"></polygon>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close)&#45;&gt;[root] random_pet.name (expand) -->
<g id="edge4" class="edge">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)-&gt;[root] random_pet.name (expand)</title>
<path fill="none" stroke="black" d="M446.39,-143.7C430.45,-134.69 410.74,-123.57 393.55,-113.87"></path>
<polygon fill="black" stroke="black" points="395.52,-110.96 385.09,-109.09 392.08,-117.05 395.52,-110.96"></polygon>
</g>
<!-- [root] root -->
<g id="node8" class="node">
<title>[root] root</title>
<ellipse fill="none" stroke="black" cx="477.04" cy="-234" rx="49.3" ry="18"></ellipse>
<text text-anchor="middle" x="477.04" y="-228.95" font-family="Times,serif" font-size="14.00">[root] root</text>
</g>
<!-- [root] root&#45;&gt;[root] output.id (expand) -->
<g id="edge8" class="edge">
<title>[root] root-&gt;[root] output.id (expand)</title>
<path fill="none" stroke="black" d="M433.78,-224.9C372.47,-213.43 259.27,-192.24 182.58,-177.89"></path>
<polygon fill="black" stroke="black" points="183.5,-174.5 173.03,-176.1 182.21,-181.38 183.5,-174.5"></polygon>
</g>
<!-- [root] root&#45;&gt;[root] output.pw (expand) -->
<g id="edge9" class="edge">
<title>[root] root-&gt;[root] output.pw (expand)</title>
<path fill="none" stroke="black" d="M520.41,-224.97C582.05,-213.55 696.13,-192.43 773.78,-178.05"></path>
<polygon fill="black" stroke="black" points="774.28,-181.52 783.48,-176.25 773.01,-174.63 774.28,-181.52"></polygon>
</g>
<!-- [root] root&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close) -->
<g id="edge10" class="edge">
<title>[root] root-&gt;[root] provider["registry.terraform.io/hashicorp/random"] (close)</title>
<path fill="none" stroke="black" d="M477.04,-215.7C477.04,-208.41 477.04,-199.73 477.04,-191.54"></path>
<polygon fill="black" stroke="black" points="480.54,-191.62 477.04,-181.62 473.54,-191.62 480.54,-191.62"></polygon>
</g>
</g>
</svg></div>
<p><em class="image-caption">모듈 그래프</em></p>

<h4 id="실습-2-비밀번호-생성하는-모듈을-루트-모듈에서-호출하기">실습 2. 비밀번호 생성하는 모듈을 루트 모듈에서 호출하기</h4>

<ul>
  <li>자식 모듈을 호출하는 Root Module 생성하기 위해 06-module-training/06-01-basic/main.tf 파일을 생성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 06-module-training/06-01-basic/main.tf</span>
<span class="k">module</span> <span class="s2">"mypw1"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"../modules/terraform-random-pwgen"</span>
<span class="p">}</span>
  
<span class="k">module</span> <span class="s2">"mypw2"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"../modules/terraform-random-pwgen"</span>
  <span class="nx">isDB</span>   <span class="p">=</span> <span class="kc">true</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"mypw1"</span> <span class="p">{</span>
  <span class="nx">value</span>  <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">mypw1</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"mypw2"</span> <span class="p">{</span>
  <span class="nx">value</span>  <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">mypw2</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>실행
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 실행</span>
  
<span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 4 added, 0 changed, 0 destroyed.</span>
<span class="c">#    Outputs:</span>
<span class="c">#    mypw1 = {</span>
<span class="c">#      "id" = "absolute-goat"</span>
<span class="c">#      "pw" = "yntpOjuyqm"</span>
<span class="c">#    }</span>
<span class="c">#    mypw2 = {</span>
<span class="c">#      "id" = "intense-imp"</span>
<span class="c">#      "pw" = "0IlU7A?uqfKR0P81"</span>
<span class="c">#    } </span>
  
<span class="c"># 상태 확인</span>
<span class="nv">$ </span>terraform state list
  
<span class="c"># 모듈정보 확인. </span>
  
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | <span class="nb">grep </span>module
<span class="c"># =&gt; "module": "module.mypw1",   # 하위 모듈의 정보가 출력됩니다.	</span>
<span class="c">#    "module": "module.mypw1",</span>
<span class="c">#    "module": "module.mypw2",</span>
<span class="c">#    "module": "module.mypw2",</span>
  
<span class="c"># terraform init 시 생성되는 module.json 확인</span>
  
<span class="nv">$ </span>tree .terraform
<span class="c"># =&gt; .terraform</span>
<span class="c">#    ├── modules</span>
<span class="c">#    │   └── modules.json</span>
<span class="c">#    └── ...</span>
  
<span class="c"># module.json 내용 확인. 모듈 사용 정보가 출력됩니다.</span>
  
<span class="nv">$ </span><span class="nb">cat</span> .terraform/modules/modules.json | jq
<span class="c"># =&gt; {</span>
<span class="c">#      "Modules": [</span>
<span class="c">#        {</span>
<span class="c">#          "Key": "",</span>
<span class="c">#          "Source": "",</span>
<span class="c">#          "Dir": "."</span>
<span class="c">#        },</span>
<span class="c">#        {</span>
<span class="c">#          "Key": "mypw1",</span>
<span class="c">#          "Source": "../modules/terraform-random-pwgen",</span>
<span class="c">#          "Dir": "../modules/terraform-random-pwgen"</span>
<span class="c">#        },</span>
<span class="c">#        {</span>
<span class="c">#          "Key": "mypw2",</span>
<span class="c">#          "Source": "../modules/terraform-random-pwgen",</span>
<span class="c">#          "Dir": "../modules/terraform-random-pwgen"</span>
<span class="c">#        }</span>
<span class="c">#      ]</span>
<span class="c">#    }</span>
  
<span class="c"># 자식 모듈의 output 값은 module.&lt;모듈 이름&gt;.&lt;output 이름&gt;으로 조회 할 수 있습니다.</span>
  
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"module.mypw1.id"</span> | terraform console
<span class="c"># =&gt; "absolute-goat"</span>
  
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"module.mypw2.pw"</span> | terraform console
<span class="c"># =&gt; "0IlU7A?uqfKR0P81"</span>
  
<span class="c"># graph 확인</span>
<span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
</code></pre></div>    </div>
  </li>
</ul>

<div class="graphviz"><svg width="1917pt" viewbox="0.00 0.00 1917.02 476.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 472)">
<polygon fill="white" stroke="none" points="-4,4 -4,-472 1913.02,-472 1913.02,4 -4,4"></polygon>
<!-- [root] module.mypw1.random_password.password (expand) -->
<g id="node1" class="node">
<title>[root] module.mypw1.random_password.password (expand)</title>
<polygon fill="none" stroke="black" points="656.81,-180 396.31,-180 396.31,-144 656.81,-144 656.81,-180"></polygon>
<text text-anchor="middle" x="526.56" y="-156.95" font-family="Times,serif" font-size="14.00">module.mypw1.random_password.password</text>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="node5" class="node">
<title>[root] provider["registry.terraform.io/hashicorp/random"]</title>
<polygon fill="none" stroke="black" points="1030.56,-108 745.86,-90 1030.56,-72 1315.25,-90 1030.56,-108"></polygon>
<text text-anchor="middle" x="1030.56" y="-84.95" font-family="Times,serif" font-size="14.00">provider["registry.terraform.io/hashicorp/random"]</text>
</g>
<!-- [root] module.mypw1.random_password.password (expand)&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="edge6" class="edge">
<title>[root] module.mypw1.random_password.password (expand)-&gt;[root] provider["registry.terraform.io/hashicorp/random"]</title>
<path fill="none" stroke="black" d="M652.44,-143.52C739.32,-131.45 853.15,-115.64 933.13,-104.53"></path>
<polygon fill="black" stroke="black" points="933.26,-108.05 942.68,-103.2 932.3,-101.11 933.26,-108.05"></polygon>
</g>
<!-- [root] module.mypw1.var.isDB (expand) -->
<g id="node9" class="node">
<title>[root] module.mypw1.var.isDB (expand)</title>
<ellipse fill="none" stroke="black" cx="525.56" cy="-90" rx="163.95" ry="18"></ellipse>
<text text-anchor="middle" x="525.56" y="-84.95" font-family="Times,serif" font-size="14.00">[root] module.mypw1.var.isDB (expand)</text>
</g>
<!-- [root] module.mypw1.random_password.password (expand)&#45;&gt;[root] module.mypw1.var.isDB (expand) -->
<g id="edge5" class="edge">
<title>[root] module.mypw1.random_password.password (expand)-&gt;[root] module.mypw1.var.isDB (expand)</title>
<path fill="none" stroke="black" d="M526.31,-143.7C526.2,-136.41 526.08,-127.73 525.96,-119.54"></path>
<polygon fill="black" stroke="black" points="529.46,-119.57 525.82,-109.62 522.46,-119.67 529.46,-119.57"></polygon>
</g>
<!-- [root] module.mypw1.random_pet.name (expand) -->
<g id="node2" class="node">
<title>[root] module.mypw1.random_pet.name (expand)</title>
<polygon fill="none" stroke="black" points="881.06,-180 676.06,-180 676.06,-144 881.06,-144 881.06,-180"></polygon>
<text text-anchor="middle" x="778.56" y="-156.95" font-family="Times,serif" font-size="14.00">module.mypw1.random_pet.name</text>
</g>
<!-- [root] module.mypw1.random_pet.name (expand)&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="edge8" class="edge">
<title>[root] module.mypw1.random_pet.name (expand)-&gt;[root] provider["registry.terraform.io/hashicorp/random"]</title>
<path fill="none" stroke="black" d="M841.5,-143.52C880.41,-132.71 930.13,-118.9 968.81,-108.15"></path>
<polygon fill="black" stroke="black" points="969.26,-111.66 977.95,-105.61 967.38,-104.92 969.26,-111.66"></polygon>
</g>
<!-- [root] module.mypw1 (expand) -->
<g id="node10" class="node">
<title>[root] module.mypw1 (expand)</title>
<ellipse fill="none" stroke="black" cx="621.56" cy="-18" rx="128.63" ry="18"></ellipse>
<text text-anchor="middle" x="621.56" y="-12.95" font-family="Times,serif" font-size="14.00">[root] module.mypw1 (expand)</text>
</g>
<!-- [root] module.mypw1.random_pet.name (expand)&#45;&gt;[root] module.mypw1 (expand) -->
<g id="edge7" class="edge">
<title>[root] module.mypw1.random_pet.name (expand)-&gt;[root] module.mypw1 (expand)</title>
<path fill="none" stroke="black" d="M765.18,-143.83C750.1,-125.06 724.31,-94.62 698.56,-72 686.41,-61.33 672.06,-50.94 659.06,-42.23"></path>
<polygon fill="black" stroke="black" points="660.98,-39.31 650.7,-36.75 657.14,-45.16 660.98,-39.31"></polygon>
</g>
<!-- [root] module.mypw2.random_password.password (expand) -->
<g id="node3" class="node">
<title>[root] module.mypw2.random_password.password (expand)</title>
<polygon fill="none" stroke="black" points="1251.81,-180 991.31,-180 991.31,-144 1251.81,-144 1251.81,-180"></polygon>
<text text-anchor="middle" x="1121.56" y="-156.95" font-family="Times,serif" font-size="14.00">module.mypw2.random_password.password</text>
</g>
<!-- [root] module.mypw2.random_password.password (expand)&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="edge15" class="edge">
<title>[root] module.mypw2.random_password.password (expand)-&gt;[root] provider["registry.terraform.io/hashicorp/random"]</title>
<path fill="none" stroke="black" d="M1099.06,-143.7C1087.37,-134.7 1072.93,-123.6 1060.33,-113.9"></path>
<polygon fill="black" stroke="black" points="1062.8,-111.39 1052.74,-108.07 1058.54,-116.94 1062.8,-111.39"></polygon>
</g>
<!-- [root] module.mypw2.var.isDB (expand) -->
<g id="node14" class="node">
<title>[root] module.mypw2.var.isDB (expand)</title>
<ellipse fill="none" stroke="black" cx="1497.56" cy="-90" rx="163.95" ry="18"></ellipse>
<text text-anchor="middle" x="1497.56" y="-84.95" font-family="Times,serif" font-size="14.00">[root] module.mypw2.var.isDB (expand)</text>
</g>
<!-- [root] module.mypw2.random_password.password (expand)&#45;&gt;[root] module.mypw2.var.isDB (expand) -->
<g id="edge14" class="edge">
<title>[root] module.mypw2.random_password.password (expand)-&gt;[root] module.mypw2.var.isDB (expand)</title>
<path fill="none" stroke="black" d="M1215.47,-143.52C1273.48,-132.72 1347.6,-118.92 1405.31,-108.17"></path>
<polygon fill="black" stroke="black" points="1405.94,-111.62 1415.13,-106.34 1404.66,-104.73 1405.94,-111.62"></polygon>
</g>
<!-- [root] module.mypw2.random_pet.name (expand) -->
<g id="node4" class="node">
<title>[root] module.mypw2.random_pet.name (expand)</title>
<polygon fill="none" stroke="black" points="1679.06,-180 1474.06,-180 1474.06,-144 1679.06,-144 1679.06,-180"></polygon>
<text text-anchor="middle" x="1576.56" y="-156.95" font-family="Times,serif" font-size="14.00">module.mypw2.random_pet.name</text>
</g>
<!-- [root] module.mypw2.random_pet.name (expand)&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] -->
<g id="edge17" class="edge">
<title>[root] module.mypw2.random_pet.name (expand)-&gt;[root] provider["registry.terraform.io/hashicorp/random"]</title>
<path fill="none" stroke="black" d="M1473.86,-147.83C1376.39,-135.34 1230.71,-116.66 1133.25,-104.17"></path>
<polygon fill="black" stroke="black" points="1133.77,-100.7 1123.41,-102.9 1132.88,-107.65 1133.77,-100.7"></polygon>
</g>
<!-- [root] module.mypw2 (expand) -->
<g id="node15" class="node">
<title>[root] module.mypw2 (expand)</title>
<ellipse fill="none" stroke="black" cx="1593.56" cy="-18" rx="128.63" ry="18"></ellipse>
<text text-anchor="middle" x="1593.56" y="-12.95" font-family="Times,serif" font-size="14.00">[root] module.mypw2 (expand)</text>
</g>
<!-- [root] module.mypw2.random_pet.name (expand)&#45;&gt;[root] module.mypw2 (expand) -->
<g id="edge16" class="edge">
<title>[root] module.mypw2.random_pet.name (expand)-&gt;[root] module.mypw2 (expand)</title>
<path fill="none" stroke="black" d="M1628.7,-143.72C1645.02,-135.57 1661.2,-124.01 1670.56,-108 1678.63,-94.18 1678,-86.16 1670.56,-72 1664.07,-59.66 1653.26,-49.63 1641.76,-41.75"></path>
<polygon fill="black" stroke="black" points="1643.63,-38.79 1633.3,-36.44 1639.91,-44.72 1643.63,-38.79"></polygon>
</g>
<!-- [root] module.mypw1 (close) -->
<g id="node6" class="node">
<title>[root] module.mypw1 (close)</title>
<ellipse fill="none" stroke="black" cx="519.56" cy="-306" rx="120.96" ry="18"></ellipse>
<text text-anchor="middle" x="519.56" y="-300.95" font-family="Times,serif" font-size="14.00">[root] module.mypw1 (close)</text>
</g>
<!-- [root] module.mypw1.output.id (expand) -->
<g id="node7" class="node">
<title>[root] module.mypw1.output.id (expand)</title>
<ellipse fill="none" stroke="black" cx="519.56" cy="-234" rx="164.46" ry="18"></ellipse>
<text text-anchor="middle" x="519.56" y="-228.95" font-family="Times,serif" font-size="14.00">[root] module.mypw1.output.id (expand)</text>
</g>
<!-- [root] module.mypw1 (close)&#45;&gt;[root] module.mypw1.output.id (expand) -->
<g id="edge1" class="edge">
<title>[root] module.mypw1 (close)-&gt;[root] module.mypw1.output.id (expand)</title>
<path fill="none" stroke="black" d="M519.56,-287.7C519.56,-280.41 519.56,-271.73 519.56,-263.54"></path>
<polygon fill="black" stroke="black" points="523.06,-263.62 519.56,-253.62 516.06,-263.62 523.06,-263.62"></polygon>
</g>
<!-- [root] module.mypw1.output.pw (expand) -->
<g id="node8" class="node">
<title>[root] module.mypw1.output.pw (expand)</title>
<ellipse fill="none" stroke="black" cx="168.56" cy="-234" rx="168.56" ry="18"></ellipse>
<text text-anchor="middle" x="168.56" y="-228.95" font-family="Times,serif" font-size="14.00">[root] module.mypw1.output.pw (expand)</text>
</g>
<!-- [root] module.mypw1 (close)&#45;&gt;[root] module.mypw1.output.pw (expand) -->
<g id="edge2" class="edge">
<title>[root] module.mypw1 (close)-&gt;[root] module.mypw1.output.pw (expand)</title>
<path fill="none" stroke="black" d="M449.37,-291C394.11,-279.98 316.75,-264.56 257.22,-252.68"></path>
<polygon fill="black" stroke="black" points="257.92,-249.25 247.42,-250.73 256.55,-256.12 257.92,-249.25"></polygon>
</g>
<!-- [root] module.mypw1.output.id (expand)&#45;&gt;[root] module.mypw1.random_pet.name (expand) -->
<g id="edge3" class="edge">
<title>[root] module.mypw1.output.id (expand)-&gt;[root] module.mypw1.random_pet.name (expand)</title>
<path fill="none" stroke="black" d="M579.3,-216.85C616.17,-206.89 663.79,-194.02 703.23,-183.36"></path>
<polygon fill="black" stroke="black" points="703.92,-186.8 712.66,-180.81 702.1,-180.04 703.92,-186.8"></polygon>
</g>
<!-- [root] module.mypw1.output.pw (expand)&#45;&gt;[root] module.mypw1.random_password.password (expand) -->
<g id="edge4" class="edge">
<title>[root] module.mypw1.output.pw (expand)-&gt;[root] module.mypw1.random_password.password (expand)</title>
<path fill="none" stroke="black" d="M247.12,-217.64C299.7,-207.36 369.38,-193.73 426,-182.66"></path>
<polygon fill="black" stroke="black" points="426.52,-186.13 435.66,-180.77 425.17,-179.26 426.52,-186.13"></polygon>
</g>
<!-- [root] module.mypw1.var.isDB (expand)&#45;&gt;[root] module.mypw1 (expand) -->
<g id="edge9" class="edge">
<title>[root] module.mypw1.var.isDB (expand)-&gt;[root] module.mypw1 (expand)</title>
<path fill="none" stroke="black" d="M549.29,-71.7C561.26,-62.97 575.97,-52.24 588.98,-42.75"></path>
<polygon fill="black" stroke="black" points="590.86,-45.72 596.88,-37 586.73,-40.06 590.86,-45.72"></polygon>
</g>
<!-- [root] module.mypw2 (close) -->
<g id="node11" class="node">
<title>[root] module.mypw2 (close)</title>
<ellipse fill="none" stroke="black" cx="1393.56" cy="-306" rx="120.96" ry="18"></ellipse>
<text text-anchor="middle" x="1393.56" y="-300.95" font-family="Times,serif" font-size="14.00">[root] module.mypw2 (close)</text>
</g>
<!-- [root] module.mypw2.output.id (expand) -->
<g id="node12" class="node">
<title>[root] module.mypw2.output.id (expand)</title>
<ellipse fill="none" stroke="black" cx="1744.56" cy="-234" rx="164.46" ry="18"></ellipse>
<text text-anchor="middle" x="1744.56" y="-228.95" font-family="Times,serif" font-size="14.00">[root] module.mypw2.output.id (expand)</text>
</g>
<!-- [root] module.mypw2 (close)&#45;&gt;[root] module.mypw2.output.id (expand) -->
<g id="edge10" class="edge">
<title>[root] module.mypw2 (close)-&gt;[root] module.mypw2.output.id (expand)</title>
<path fill="none" stroke="black" d="M1463.74,-291C1519.19,-279.95 1596.88,-264.45 1656.5,-252.56"></path>
<polygon fill="black" stroke="black" points="1657.18,-255.99 1666.31,-250.61 1655.81,-249.13 1657.18,-255.99"></polygon>
</g>
<!-- [root] module.mypw2.output.pw (expand) -->
<g id="node13" class="node">
<title>[root] module.mypw2.output.pw (expand)</title>
<ellipse fill="none" stroke="black" cx="1393.56" cy="-234" rx="168.56" ry="18"></ellipse>
<text text-anchor="middle" x="1393.56" y="-228.95" font-family="Times,serif" font-size="14.00">[root] module.mypw2.output.pw (expand)</text>
</g>
<!-- [root] module.mypw2 (close)&#45;&gt;[root] module.mypw2.output.pw (expand) -->
<g id="edge11" class="edge">
<title>[root] module.mypw2 (close)-&gt;[root] module.mypw2.output.pw (expand)</title>
<path fill="none" stroke="black" d="M1393.56,-287.7C1393.56,-280.41 1393.56,-271.73 1393.56,-263.54"></path>
<polygon fill="black" stroke="black" points="1397.06,-263.62 1393.56,-253.62 1390.06,-263.62 1397.06,-263.62"></polygon>
</g>
<!-- [root] module.mypw2.output.id (expand)&#45;&gt;[root] module.mypw2.random_pet.name (expand) -->
<g id="edge12" class="edge">
<title>[root] module.mypw2.output.id (expand)-&gt;[root] module.mypw2.random_pet.name (expand)</title>
<path fill="none" stroke="black" d="M1704.32,-216.23C1681.74,-206.83 1653.31,-194.98 1629,-184.85"></path>
<polygon fill="black" stroke="black" points="1630.49,-181.68 1619.91,-181.07 1627.8,-188.14 1630.49,-181.68"></polygon>
</g>
<!-- [root] module.mypw2.output.pw (expand)&#45;&gt;[root] module.mypw2.random_password.password (expand) -->
<g id="edge13" class="edge">
<title>[root] module.mypw2.output.pw (expand)-&gt;[root] module.mypw2.random_password.password (expand)</title>
<path fill="none" stroke="black" d="M1330.81,-216.85C1291.93,-206.85 1241.65,-193.91 1200.13,-183.22"></path>
<polygon fill="black" stroke="black" points="1201.24,-179.89 1190.68,-180.79 1199.5,-186.67 1201.24,-179.89"></polygon>
</g>
<!-- [root] module.mypw2.var.isDB (expand)&#45;&gt;[root] module.mypw2 (expand) -->
<g id="edge18" class="edge">
<title>[root] module.mypw2.var.isDB (expand)-&gt;[root] module.mypw2 (expand)</title>
<path fill="none" stroke="black" d="M1521.29,-71.7C1533.26,-62.97 1547.97,-52.24 1560.98,-42.75"></path>
<polygon fill="black" stroke="black" points="1562.86,-45.72 1568.88,-37 1558.73,-40.06 1562.86,-45.72"></polygon>
</g>
<!-- [root] output.mypw1 (expand) -->
<g id="node16" class="node">
<title>[root] output.mypw1 (expand)</title>
<ellipse fill="none" stroke="black" cx="661.56" cy="-378" rx="124.03" ry="18"></ellipse>
<text text-anchor="middle" x="661.56" y="-372.95" font-family="Times,serif" font-size="14.00">[root] output.mypw1 (expand)</text>
</g>
<!-- [root] output.mypw1 (expand)&#45;&gt;[root] module.mypw1 (close) -->
<g id="edge19" class="edge">
<title>[root] output.mypw1 (expand)-&gt;[root] module.mypw1 (close)</title>
<path fill="none" stroke="black" d="M627.54,-360.23C608.31,-350.75 584.05,-338.8 563.41,-328.62"></path>
<polygon fill="black" stroke="black" points="565.16,-325.58 554.65,-324.3 562.07,-331.86 565.16,-325.58"></polygon>
</g>
<!-- [root] output.mypw2 (expand) -->
<g id="node17" class="node">
<title>[root] output.mypw2 (expand)</title>
<ellipse fill="none" stroke="black" cx="1250.56" cy="-378" rx="124.03" ry="18"></ellipse>
<text text-anchor="middle" x="1250.56" y="-372.95" font-family="Times,serif" font-size="14.00">[root] output.mypw2 (expand)</text>
</g>
<!-- [root] output.mypw2 (expand)&#45;&gt;[root] module.mypw2 (close) -->
<g id="edge20" class="edge">
<title>[root] output.mypw2 (expand)-&gt;[root] module.mypw2 (close)</title>
<path fill="none" stroke="black" d="M1284.81,-360.23C1304.18,-350.75 1328.6,-338.8 1349.4,-328.62"></path>
<polygon fill="black" stroke="black" points="1350.78,-331.84 1358.22,-324.3 1347.7,-325.55 1350.78,-331.84"></polygon>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close) -->
<g id="node18" class="node">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)</title>
<ellipse fill="none" stroke="black" cx="954.56" cy="-234" rx="252.49" ry="18"></ellipse>
<text text-anchor="middle" x="954.56" y="-228.95" font-family="Times,serif" font-size="14.00">[root] provider["registry.terraform.io/hashicorp/random"] (close)</text>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close)&#45;&gt;[root] module.mypw1.random_password.password (expand) -->
<g id="edge21" class="edge">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)-&gt;[root] module.mypw1.random_password.password (expand)</title>
<path fill="none" stroke="black" d="M856.63,-216.98C793.52,-206.66 711.1,-193.18 644.4,-182.27"></path>
<polygon fill="black" stroke="black" points="645.34,-178.88 634.91,-180.72 644.21,-185.79 645.34,-178.88"></polygon>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close)&#45;&gt;[root] module.mypw1.random_pet.name (expand) -->
<g id="edge22" class="edge">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)-&gt;[root] module.mypw1.random_pet.name (expand)</title>
<path fill="none" stroke="black" d="M911.5,-215.88C887.81,-206.46 858.19,-194.67 832.92,-184.62"></path>
<polygon fill="black" stroke="black" points="834.38,-181.44 823.79,-180.99 831.79,-187.94 834.38,-181.44"></polygon>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close)&#45;&gt;[root] module.mypw2.random_password.password (expand) -->
<g id="edge23" class="edge">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)-&gt;[root] module.mypw2.random_password.password (expand)</title>
<path fill="none" stroke="black" d="M995.41,-215.88C1017.78,-206.5 1045.74,-194.78 1069.65,-184.76"></path>
<polygon fill="black" stroke="black" points="1070.7,-188.11 1078.57,-181.02 1067.99,-181.66 1070.7,-188.11"></polygon>
</g>
<!-- [root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close)&#45;&gt;[root] module.mypw2.random_pet.name (expand) -->
<g id="edge24" class="edge">
<title>[root] provider["registry.terraform.io/hashicorp/random"] (close)-&gt;[root] module.mypw2.random_pet.name (expand)</title>
<path fill="none" stroke="black" d="M1086.09,-218.2C1197.71,-205.64 1356.22,-187.8 1462.54,-175.83"></path>
<polygon fill="black" stroke="black" points="1462.9,-179.31 1472.44,-174.72 1462.11,-172.36 1462.9,-179.31"></polygon>
</g>
<!-- [root] root -->
<g id="node19" class="node">
<title>[root] root</title>
<ellipse fill="none" stroke="black" cx="954.56" cy="-450" rx="49.3" ry="18"></ellipse>
<text text-anchor="middle" x="954.56" y="-444.95" font-family="Times,serif" font-size="14.00">[root] root</text>
</g>
<!-- [root] root&#45;&gt;[root] output.mypw1 (expand) -->
<g id="edge25" class="edge">
<title>[root] root-&gt;[root] output.mypw1 (expand)</title>
<path fill="none" stroke="black" d="M914.12,-439.34C868.06,-428.33 791.83,-410.12 735.15,-396.58"></path>
<polygon fill="black" stroke="black" points="736.1,-393.21 725.56,-394.29 734.48,-400.02 736.1,-393.21"></polygon>
</g>
<!-- [root] root&#45;&gt;[root] output.mypw2 (expand) -->
<g id="edge26" class="edge">
<title>[root] root-&gt;[root] output.mypw2 (expand)</title>
<path fill="none" stroke="black" d="M995.09,-439.41C1041.63,-428.41 1118.92,-410.13 1176.32,-396.56"></path>
<polygon fill="black" stroke="black" points="1177.12,-399.96 1186.04,-394.26 1175.51,-393.15 1177.12,-399.96"></polygon>
</g>
<!-- [root] root&#45;&gt;[root] provider[&quot;registry.terraform.io/hashicorp/random&quot;] (close) -->
<g id="edge27" class="edge">
<title>[root] root-&gt;[root] provider["registry.terraform.io/hashicorp/random"] (close)</title>
<path fill="none" stroke="black" d="M954.56,-431.85C954.56,-395.14 954.56,-308.66 954.56,-263.53"></path>
<polygon fill="black" stroke="black" points="958.06,-263.75 954.56,-253.75 951.06,-263.75 958.06,-263.75"></polygon>
</g>
</g>
</svg></div>

<h3 id="모듈-사용-방식">모듈 사용 방식</h3>

<h4 id="모듈과-프로바이더">모듈과 프로바이더</h4>

<ul>
  <li>모듈에서 사용되는 모든 리소스는 관련 프로바이더의 정의가 필요합니다. 프로바이더의 정의를 모듈 안에 두느냐, 루트 모듈에서 정의하느냐에 따라 모듈의 재사용성이 달라집니다.</li>
</ul>

<h5 id="유형-1-자식-모듈에서-프로바이더-정의">유형 1. 자식 모듈에서 프로바이더 정의</h5>

<ul>
  <li>모듈에서 사용하는 프로바이더의 버전과 상세 구성을 자식 모듈에 고정하는 방법입니다.
    <ul>
      <li>프로바이더 버전과 구성에 민감하거나, 루트 모듈과 관계없이 독립적인 구조일때 사용합니다.</li>
      <li>하지만 동일 프로바이더가 루트 모듈과 자식 모듈 양쪽, 또는 서로 다른 자식 모듈에 버전 조건 합의가 안 되면,
오류가 발생하고 모듈에서 반복문을 사용할 수 없다는 단점이 있어 잘 사용하지 않습니다.</li>
    </ul>
  </li>
</ul>

<h5 id="유형-2-루트-모듈에서-프로바이더-정의-추천">유형 2. 루트 모듈에서 프로바이더 정의 (추천)</h5>

<ul>
  <li>자식 모듈은 루트 모듈의 프로바이더에 종속되는 방식입니다.</li>
  <li>디렉터리 구조는 분리되어 있지만, 실행 단계에서는 동일 계층으로 해석되어서 <strong>프로바이더 버전과 구성은 루트 모듈의 설정이 적용</strong>됩니다.</li>
  <li>프로바이더를 모듈 내 리소스와 데이터 소스에 일괄 적용하고, 자식 모듈에 대한 반복문을 자유롭게 사용할 수 있는것이 장점입니다.</li>
</ul>

<h5 id="루트-모듈에서-프로바이더-정의-실습">루트 모듈에서 프로바이더 정의 실습</h5>

<ul>
  <li>실습을 위한 디렉터리 구성
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 06-module-training
 ├── modules                    <span class="c"># child module home</span>
 │   └── terraform-aws-ec2
 │       ├── main.tf
 │       ├── outputs.tf
 │       └── variables.tf
 └── multi_provider_for_module 	<span class="c"># root-module</span>
     ├── main.tf
     └── outputs.tf
</code></pre></div>    </div>
  </li>
  <li>06-module-traning/modules/terraform-aws-ec2/main.tf, variable.tf, output.tf 파일 생성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_default_vpc"</span> <span class="s2">"default"</span> <span class="p">{}</span>
  
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"default"</span> <span class="p">{</span>
  <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">owners</span>      <span class="p">=</span> <span class="p">[</span><span class="s2">"amazon"</span><span class="p">]</span>
  
  <span class="nx">filter</span> <span class="p">{</span>
    <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"owner-alias"</span>
    <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amazon"</span><span class="p">]</span>
  <span class="p">}</span>
  
  <span class="nx">filter</span> <span class="p">{</span>
    <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
    <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amzn2-ami-hvm*"</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"default"</span> <span class="p">{</span>
  <span class="nx">depends_on</span>    <span class="p">=</span> <span class="p">[</span><span class="nx">aws_default_vpc</span><span class="p">.</span><span class="nx">default</span><span class="p">]</span>
  <span class="nx">ami</span>           <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">default</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_type</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">instance_name</span>
  <span class="p">}</span>
<span class="p">}</span>  
</code></pre></div>    </div>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># variable.tf</span>
<span class="k">variable</span> <span class="s2">"instance_type"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"vm 인스턴스 타입 정의"</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"t2.micro"</span>
<span class="p">}</span>
  
<span class="k">variable</span> <span class="s2">"instance_name"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"vm 인스턴스 이름 정의"</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"my_ec2"</span>
<span class="p">}</span> 
</code></pre></div>    </div>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># output.tf</span>
<span class="k">output</span> <span class="s2">"private_ip"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">default</span><span class="p">.</span><span class="nx">private_ip</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>작성된 모듈을 사용할 루트모듈 06-module-traning/multi_provider_for_module/main.tf, output.tf 파일 생성</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
      <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-southeast-1"</span>  
  <span class="p">}</span>
	
  <span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
      <span class="nx">alias</span>  <span class="p">=</span> <span class="s2">"seoul"</span>
      <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>  
  <span class="p">}</span>
	
  <span class="k">module</span> <span class="s2">"ec2_singapore"</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"../modules/terraform-aws-ec2"</span>
  <span class="p">}</span>
	
  <span class="k">module</span> <span class="s2">"ec2_seoul"</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"../modules/terraform-aws-ec2"</span>
      <span class="nx">providers</span> <span class="p">=</span> <span class="p">{</span>
          <span class="nx">aws</span> <span class="p">=</span> <span class="nx">aws</span><span class="p">.</span><span class="nx">seoul</span>
      <span class="p">}</span>
      <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t3.small"</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># output.tf</span>
  <span class="k">output</span> <span class="s2">"module_output_singapore"</span> <span class="p">{</span>
      <span class="nx">value</span> <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">ec2_singapore</span><span class="p">.</span><span class="nx">private_ip</span>
  <span class="p">}</span>
	
  <span class="k">output</span> <span class="s2">"module_output_seoul"</span> <span class="p">{</span>
      <span class="nx">value</span> <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">ec2_seoul</span><span class="p">.</span><span class="nx">private_ip</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>실행</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
<span class="nv">$ </span><span class="nb">cat</span> .terraform/modules/modules.json | jq
<span class="c"># =&gt; {</span>
<span class="c">#      "Modules": [</span>
<span class="c">#        {</span>
<span class="c">#          "Key": "",</span>
<span class="c">#          "Source": "",</span>
<span class="c">#          "Dir": "."</span>
<span class="c">#        },</span>
<span class="c">#        {</span>
<span class="c">#          "Key": "ec2_seoul",</span>
<span class="c">#          "Source": "../modules/terraform-aws-ec2",</span>
<span class="c">#          "Dir": "../modules/terraform-aws-ec2"</span>
<span class="c">#        },</span>
<span class="c">#        {</span>
<span class="c">#          "Key": "ec2_singapore",</span>
<span class="c">#          "Source": "../modules/terraform-aws-ec2",</span>
<span class="c">#          "Dir": "../modules/terraform-aws-ec2"</span>
<span class="c">#        }</span>
<span class="c">#      ]</span>
<span class="c">#    }  </span>
  
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 4 added, 0 changed, 0 destroyed.</span>
<span class="c">#    Outputs:</span>
<span class="c">#    module_output_seoul = "172.31.0.75"</span>
<span class="c">#    module_output_singapore = "172.31.17.130"</span>
  
<span class="nv">$ </span>terraform output
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show module.ec2_seoul.data.aws_ami.default
  
<span class="c"># 상태파일에서 모듈 정보 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | <span class="nb">grep </span>module
<span class="c"># =&gt; "module_output_seoul": {</span>
<span class="c">#    "module_output_singapore": {</span>
<span class="c">#      "module": "module.ec2_seoul",</span>
<span class="c">#      "module": "module.ec2_seoul",</span>
<span class="c">#      "module": "module.ec2_seoul",</span>
<span class="c">#            "module.ec2_seoul.aws_default_vpc.default",</span>
<span class="c">#            "module.ec2_seoul.data.aws_ami.default"</span>
<span class="c">#      "module": "module.ec2_singapore",</span>
<span class="c">#      "module": "module.ec2_singapore",</span>
<span class="c">#      "module": "module.ec2_singapore",</span>
<span class="c">#            "module.ec2_singapore.aws_default_vpc.default",</span>
<span class="c">#            "module.ec2_singapore.data.aws_ami.default"</span>
  
<span class="c"># 그래프 확인</span>
<span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
</code></pre></div>    </div>
  </li>
</ul>

<div class="graphviz image-center"><svg width="379pt" viewbox="0.00 0.00 378.75 290.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 286)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-286 374.75,-286 374.75,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster_module.ec2_seoul</title>
<polygon fill="none" stroke="black" points="8,-8 8,-137 362.75,-137 362.75,-8 8,-8"></polygon>
<text text-anchor="middle" x="185.38" y="-119.7" font-family="sans-serif" font-size="14.00">module.ec2_seoul</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_module.ec2_singapore</title>
<polygon fill="none" stroke="black" points="8,-145 8,-274 362.75,-274 362.75,-145 8,-145"></polygon>
<text text-anchor="middle" x="185.38" y="-256.7" font-family="sans-serif" font-size="14.00">module.ec2_singapore</text>
</g>
<!-- module.ec2_seoul.data.aws_ami.default -->
<g id="node1" class="node">
<title>module.ec2_seoul.data.aws_ami.default</title>
<polygon fill="none" stroke="black" points="168.5,-52 24.25,-52 24.25,-16 168.5,-16 168.5,-52"></polygon>
<text text-anchor="middle" x="96.38" y="-28.2" font-family="sans-serif" font-size="14.00">data.aws_ami.default</text>
</g>
<!-- module.ec2_seoul.aws_default_vpc.default -->
<g id="node2" class="node">
<title>module.ec2_seoul.aws_default_vpc.default</title>
<polygon fill="none" stroke="black" points="176.75,-106 16,-106 16,-70 176.75,-70 176.75,-106"></polygon>
<text text-anchor="middle" x="96.38" y="-82.2" font-family="sans-serif" font-size="14.00">aws_default_vpc.default</text>
</g>
<!-- module.ec2_seoul.aws_instance.default -->
<g id="node3" class="node">
<title>module.ec2_seoul.aws_instance.default</title>
<polygon fill="none" stroke="black" points="354.75,-79 212.75,-79 212.75,-43 354.75,-43 354.75,-79"></polygon>
<text text-anchor="middle" x="283.75" y="-55.2" font-family="sans-serif" font-size="14.00">aws_instance.default</text>
</g>
<!-- module.ec2_seoul.aws_instance.default&#45;&gt;module.ec2_seoul.data.aws_ami.default -->
<g id="edge1" class="edge">
<title>module.ec2_seoul.aws_instance.default-&gt;module.ec2_seoul.data.aws_ami.default</title>
<path fill="none" stroke="black" d="M212.4,-50.75C201.84,-49.21 190.86,-47.62 180.06,-46.04"></path>
<polygon fill="black" stroke="black" points="180.8,-42.61 170.4,-44.64 179.79,-49.54 180.8,-42.61"></polygon>
</g>
<!-- module.ec2_seoul.aws_instance.default&#45;&gt;module.ec2_seoul.aws_default_vpc.default -->
<g id="edge2" class="edge">
<title>module.ec2_seoul.aws_instance.default-&gt;module.ec2_seoul.aws_default_vpc.default</title>
<path fill="none" stroke="black" d="M212.4,-71.25C204.54,-72.39 196.44,-73.57 188.36,-74.75"></path>
<polygon fill="black" stroke="black" points="187.87,-71.28 178.48,-76.19 188.88,-78.21 187.87,-71.28"></polygon>
</g>
<!-- module.ec2_singapore.data.aws_ami.default -->
<g id="node4" class="node">
<title>module.ec2_singapore.data.aws_ami.default</title>
<polygon fill="none" stroke="black" points="168.5,-189 24.25,-189 24.25,-153 168.5,-153 168.5,-189"></polygon>
<text text-anchor="middle" x="96.38" y="-165.2" font-family="sans-serif" font-size="14.00">data.aws_ami.default</text>
</g>
<!-- module.ec2_singapore.aws_default_vpc.default -->
<g id="node5" class="node">
<title>module.ec2_singapore.aws_default_vpc.default</title>
<polygon fill="none" stroke="black" points="176.75,-243 16,-243 16,-207 176.75,-207 176.75,-243"></polygon>
<text text-anchor="middle" x="96.38" y="-219.2" font-family="sans-serif" font-size="14.00">aws_default_vpc.default</text>
</g>
<!-- module.ec2_singapore.aws_instance.default -->
<g id="node6" class="node">
<title>module.ec2_singapore.aws_instance.default</title>
<polygon fill="none" stroke="black" points="354.75,-216 212.75,-216 212.75,-180 354.75,-180 354.75,-216"></polygon>
<text text-anchor="middle" x="283.75" y="-192.2" font-family="sans-serif" font-size="14.00">aws_instance.default</text>
</g>
<!-- module.ec2_singapore.aws_instance.default&#45;&gt;module.ec2_singapore.data.aws_ami.default -->
<g id="edge3" class="edge">
<title>module.ec2_singapore.aws_instance.default-&gt;module.ec2_singapore.data.aws_ami.default</title>
<path fill="none" stroke="black" d="M212.4,-187.75C201.84,-186.21 190.86,-184.62 180.06,-183.04"></path>
<polygon fill="black" stroke="black" points="180.8,-179.61 170.4,-181.64 179.79,-186.54 180.8,-179.61"></polygon>
</g>
<!-- module.ec2_singapore.aws_instance.default&#45;&gt;module.ec2_singapore.aws_default_vpc.default -->
<g id="edge4" class="edge">
<title>module.ec2_singapore.aws_instance.default-&gt;module.ec2_singapore.aws_default_vpc.default</title>
<path fill="none" stroke="black" d="M212.4,-208.25C204.54,-209.39 196.44,-210.57 188.36,-211.75"></path>
<polygon fill="black" stroke="black" points="187.87,-208.28 178.48,-213.19 188.88,-215.21 187.87,-208.28"></polygon>
</g>
</g>
</svg></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># aws cli로 ec2 확인</span>
<span class="nv">$ </span>aws ec2 describe-instances <span class="nt">--region</span> ap-northeast-2 <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].{PublicIPAdd:PublicIpAddress,InstanceName:Tags[?Key=='Name']|[0].Value,Status:State.Name}"</span> <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>instance-state-name,Values<span class="o">=</span>running <span class="nt">--output</span> text
<span class="c"># =&gt; my_ec2  43.202.2.105    running</span>

<span class="nv">$ </span>aws ec2 describe-instances <span class="nt">--region</span> ap-southeast-1 <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].{PublicIPAdd:PublicIpAddress,InstanceName:Tags[?Key=='Name']|[0].Value,Status:State.Name}"</span> <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>instance-state-name,Values<span class="o">=</span>running <span class="nt">--output</span> text
<span class="c"># =&gt; my_ec2  18.139.217.84   running</span>

<span class="c"># 실습 완료 후 리소스 삭제</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
</code></pre></div></div>

<h5 id="모듈의-반복문">모듈의 반복문</h5>

<ul>
  <li>모듈도 리소스에서 반복문을 사용할 수 있습니다.</li>
  <li>모듈이라는 잘 정의되고 테스트된 단위로 원하는 수량으로 프로비저닝을 할 수 있으므로, 모듈없이 구성하는것과 대비해서 리소스 종속성 관리와 유지보수에 장점이 있습니다. 
<code class="language-plaintext highlighter-rouge">count</code>를 사용한 반복문은 리소스와 유사하게 <code class="language-plaintext highlighter-rouge">module</code> 블록 내에 선언합니다.</li>
</ul>

<h6 id="count를-사용한-모듈-반복문-실습">count를 사용한 모듈 반복문 실습</h6>

<ul>
  <li>
    <p>06-module-traning/module_loop_count/main.tf 파일 생성</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>  
<span class="p">}</span>
  
<span class="k">module</span> <span class="s2">"ec2_seoul"</span> <span class="p">{</span>
  <span class="nx">count</span>  <span class="p">=</span> <span class="mi">2</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"../modules/terraform-aws-ec2"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t3.small"</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"module_output"</span> <span class="p">{</span>
  <span class="nx">value</span>  <span class="p">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">ec2_seoul</span><span class="p">[*].</span><span class="nx">private_ip</span>   
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>실행 : 모듈의 반복문 테스트</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init 
<span class="nv">$ </span><span class="nb">cat</span> .terraform/modules/modules.json | jq
  
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Apply complete! Resources: 4 added, 0 changed, 0 destroyed.</span>
<span class="c">#    Outputs:</span>
<span class="c">#    module_output = [</span>
<span class="c">#      "172.31.4.243",</span>
<span class="c">#      "172.31.8.11",</span>
<span class="c">#    ]  </span>
<span class="c"># count = 2 한만큼 2개의 EC2 인스턴스가 생성됨</span>
  
<span class="nv">$ </span>terraform output
<span class="nv">$ </span>terraform state list
  
<span class="c"># 상태파일에서 모듈정보 확인 </span>
<span class="c"># (앞서 살펴본 cat .terraform/modules/modules.json | jq 에서는 모듈이 1개만 나오지만, </span>
<span class="c">#  여기에서는 count 만큼 보여짐)</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | <span class="nb">grep </span>module
  
<span class="c"># 그래프 확인</span>
<span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
</code></pre></div>    </div>
  </li>
</ul>

<div class="graphviz image-center"><svg width="379pt" viewbox="0.00 0.00 378.75 153.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 149)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-149 374.75,-149 374.75,4 -4,4"></polygon>
<g id="clust1" class="cluster">
<title>cluster_module.ec2_seoul</title>
<polygon fill="none" stroke="black" points="8,-8 8,-137 362.75,-137 362.75,-8 8,-8"></polygon>
<text text-anchor="middle" x="185.38" y="-119.7" font-family="sans-serif" font-size="14.00">module.ec2_seoul</text>
</g>
<!-- module.ec2_seoul.data.aws_ami.default -->
<g id="node1" class="node">
<title>module.ec2_seoul.data.aws_ami.default</title>
<polygon fill="none" stroke="black" points="168.5,-52 24.25,-52 24.25,-16 168.5,-16 168.5,-52"></polygon>
<text text-anchor="middle" x="96.38" y="-28.2" font-family="sans-serif" font-size="14.00">data.aws_ami.default</text>
</g>
<!-- module.ec2_seoul.aws_default_vpc.default -->
<g id="node2" class="node">
<title>module.ec2_seoul.aws_default_vpc.default</title>
<polygon fill="none" stroke="black" points="176.75,-106 16,-106 16,-70 176.75,-70 176.75,-106"></polygon>
<text text-anchor="middle" x="96.38" y="-82.2" font-family="sans-serif" font-size="14.00">aws_default_vpc.default</text>
</g>
<!-- module.ec2_seoul.aws_instance.default -->
<g id="node3" class="node">
<title>module.ec2_seoul.aws_instance.default</title>
<polygon fill="none" stroke="black" points="354.75,-79 212.75,-79 212.75,-43 354.75,-43 354.75,-79"></polygon>
<text text-anchor="middle" x="283.75" y="-55.2" font-family="sans-serif" font-size="14.00">aws_instance.default</text>
</g>
<!-- module.ec2_seoul.aws_instance.default&#45;&gt;module.ec2_seoul.data.aws_ami.default -->
<g id="edge1" class="edge">
<title>module.ec2_seoul.aws_instance.default-&gt;module.ec2_seoul.data.aws_ami.default</title>
<path fill="none" stroke="black" d="M212.4,-50.75C201.84,-49.21 190.86,-47.62 180.06,-46.04"></path>
<polygon fill="black" stroke="black" points="180.8,-42.61 170.4,-44.64 179.79,-49.54 180.8,-42.61"></polygon>
</g>
<!-- module.ec2_seoul.aws_instance.default&#45;&gt;module.ec2_seoul.aws_default_vpc.default -->
<g id="edge2" class="edge">
<title>module.ec2_seoul.aws_instance.default-&gt;module.ec2_seoul.aws_default_vpc.default</title>
<path fill="none" stroke="black" d="M212.4,-71.25C204.54,-72.39 196.44,-73.57 188.36,-74.75"></path>
<polygon fill="black" stroke="black" points="187.87,-71.28 178.48,-76.19 188.88,-78.21 187.87,-71.28"></polygon>
</g>
</g>
</svg></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># aws cli로 ec2 확인</span>
  <span class="nv">$ </span>aws ec2 describe-instances <span class="nt">--region</span> ap-northeast-2 <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].{PublicIPAdd:PublicIpAddress,InstanceName:Tags[?Key=='Name']|[0].Value,Status:State.Name}"</span> <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>instance-state-name,Values<span class="o">=</span>running <span class="nt">--output</span> text
  
  <span class="c"># 실습 완료 후 리소스 삭제</span>
  <span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
</code></pre></div></div>

<h6 id="for_each를-사용한-모듈-반복문-실습">for_each를 사용한 모듈 반복문 실습</h6>

<ul>
  <li>
    <p>06-module-traning/module_loop_for_each/main.tf 파일 생성</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf </span>
<span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">env</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">dev</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">type</span> <span class="p">=</span> <span class="s2">"t3.nano"</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"dev_ec2"</span>
    <span class="p">}</span>
    <span class="nx">prod</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">type</span> <span class="p">=</span> <span class="s2">"t3.micro"</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"prod_ec2"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">module</span> <span class="s2">"ec2_seoul"</span> <span class="p">{</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">env</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"../modules/terraform-aws-ec2"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">type</span>
  <span class="nx">instance_name</span> <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">name</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"module_output"</span> <span class="p">{</span>
  <span class="nx">value</span>  <span class="p">=</span> <span class="p">[</span>
    <span class="nx">for</span> <span class="nx">k</span> <span class="nx">in</span> <span class="k">module</span><span class="p">.</span><span class="nx">ec2_seoul</span><span class="err">:</span> <span class="nx">k</span><span class="p">.</span><span class="nx">private_ip</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>실행 : for_each를 사용한 모듈 반복문 테스트</p>
  </li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform output
<span class="c"># =&gt; module_output = [</span>
<span class="c">#      "172.31.13.57",</span>
<span class="c">#      "172.31.12.95",</span>
<span class="c">#    ]</span>

<span class="nv">$ </span>terraform state list

<span class="c"># 상태파일에서 모듈정보 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | <span class="nb">grep </span>module

<span class="c"># aws cli로 ec2 확인</span>
<span class="nv">$ </span>aws ec2 describe-instances <span class="nt">--region</span> ap-northeast-2 <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].{PublicIPAdd:PublicIpAddress,InstanceName:Tags[?Key=='Name']|[0].Value,Status:State.Name}"</span> <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>instance-state-name,Values<span class="o">=</span>running <span class="nt">--output</span> text
<span class="c"># =&gt; dev_ec2    3.36.76.84      running</span>
<span class="c">#    prod_ec2   52.79.44.76     running</span>

<span class="c"># 실습 완료 후 리소스 삭제</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
</code></pre></div></div>

<h3 id="모듈-소스-관리">모듈 소스 관리</h3>

<ul>
  <li>모듈 소스 관리 방법은 크게 다음과 같이 나눌 수 있습니다.
    <ul>
      <li>로컬 디렉터리 경로</li>
      <li>테라폼 레지스트리 (Terraform Registry)</li>
      <li>VCS (Git, GitHub, GitLab, Bitbucket 등)</li>
      <li>HTTP urls</li>
      <li>Object Storage (S3 Bucket, GCS Bucket 등)</li>
    </ul>
  </li>
</ul>

<h4 id="참조-예제">참조 예제</h4>

<ul>
  <li>로컬 디렉터리
    <ul>
      <li>대상 모듈이 같은 로컬 파일 시스템에 있으므로 다운로드 없이 바로 사용할 수 있습니다.</li>
      <li>재사용성을 고려한다면 앞서 실습에서 처럼 상위 디렉터리에 modules 디렉터리를 만들고 별도로 관리하는것을 권장하며,<br />
항상 루트모듈과 함께 동작하는 경우 하위 디렉터리에 모듈을 정의해도 좋습니다.</li>
      <li>예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상위 디렉터리에 별도 관리시 예제 </span>
<span class="k">module</span> <span class="s2">"local_dir_module"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"../modules/terraform-aws-ec2"</span>
<span class="p">}</span>
    
<span class="c1"># 하위 디렉터리에 관리시 예제</span>
<span class="k">module</span> <span class="s2">"local_subdir_module"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"./terraform-aws-ec2"</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>테라폼 레지스트리
    <ul>
      <li>테라폼 레지스트리에 등록된 모듈을 사용하는 방법으로 공개 모듈과 Terraform Cloud, Terraform Enterprise의 비공개 모듈을 사용할 수 있습니다.</li>
      <li>공개된 모듈은 <a href="https://registry.terraform.io/browse/modules">https://registry.terraform.io/browse/modules</a> 에서 확인할 수 있습니다.</li>
      <li>모듈 명은 <code class="language-plaintext highlighter-rouge">&lt;네임스페이스&gt;/&lt;이름&gt;/&lt;프로바이더&gt;</code>의 형태를 따릅니다.</li>
      <li>예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"vpc"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"terraform-aws-modules/vpc/aws"</span>
  <span class="nx">version</span> <span class="p">=</span> <span class="s2">"5.1.0"</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>VCS 사용 (github 예시)
    <ul>
      <li>Git의 원격 저장소로 유명한 깃허브는 테라폼 구성에 대한 CI 로도 사용할 수 있고, 모듈 소스를 업로드 하여 사용 할 수 있습니다.</li>
      <li>앞서 만든 06-module-traning/modules/terraform-aws-ec2/ 를 깃허브에 업로드하는 과정
        <ol>
          <li>깃허브에 로그인</li>
          <li>새로운 깃허브 저장소 생성 [New repository]
            <ul>
              <li>Owner : 원하는 소유자 선택</li>
              <li>Repository name : 예시) <strong>terraform-module-repo</strong></li>
              <li>Public 선택</li>
              <li>Add .gitignore의 드롭박스에서 [Terraform]을 선택</li>
            </ul>
          </li>
          <li>맨 아래 [Create repository] 클릭</li>
          <li>해당 저장소에 예시) ‘<strong>terraform-aws-ec2</strong>’ 디렉터리 생성 후 main.tf , variable.tf, output.tf 추가 후 업로드</li>
        </ol>
      </li>
      <li>모듈 사용 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-southeast-1"</span>  
<span class="p">}</span>
    
<span class="k">module</span> <span class="s2">"ec2_seoul"</span> <span class="p">{</span>
  <span class="nx">source</span> <span class="p">=</span> <span class="s2">"github.com/sweetlittlebird/terraform-module-repo/terraform-aws-ec2"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t3.small"</span>
<span class="p">}</span>     
</code></pre></div>        </div>
      </li>
      <li>실행
        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
    
<span class="c"># 상태 확인</span>
<span class="nv">$ </span>tree .terraform/modules
.terraform/modules
├── ec2_seoul
│   └── terraform-aws-ec2
│       ├── main.tf
│       ├── output.tf
│       └── variable.tf
└── modules.json
    
<span class="c"># 배포</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Downloading git::https://github.com/sweetlittlebird/terraform-module-repo.git for ec2_seoul...</span>
<span class="c">#    ...</span>
<span class="c">#    Apply complete! Resources: 2 added, 0 changed, 0 destroyed.</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; module.ec2_seoul.data.aws_ami.default</span>
<span class="c">#    module.ec2_seoul.aws_default_vpc.default</span>
<span class="c">#    module.ec2_seoul.aws_instance.default</span>
    
<span class="c"># 실습 완료 후 삭제</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="마치며">마치며</h2>

<p>5주차는 두편으로 이어집니다. 첫번째 편에서는 모듈화에 대해 알아보고, 모듈을 만들고 사용하는 방법을 실습해 보았습니다.
두번째 편에서는 Terraform Runner에 대해 알아보겠습니다.</p>

<p><a href="/posts/2024-07-13-T101-Study-Terraform-Week-5b/">[T101 4기] Runner 바로가기</a></p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[이번 주에는 Module과 Runner에 대해 테라폼으로 시작하는 IaC를 통해 알아 보겠습니다.]]></summary></entry><entry><title type="html">[T101 4기] Provider &amp;amp; State</title><link href="https://sweetlittlebird.github.io/posts/2024-07-06-T101-Study-Terraform-Week-4/" rel="alternate" type="text/html" title="[T101 4기] Provider &amp;amp; State" /><published>2024-07-06T02:08:00+09:00</published><updated>2024-07-06T02:08:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%204</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-07-06-T101-Study-Terraform-Week-4/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>드디어 HCL 기본 문법 스터디가 끝나고 다른 주제로 넘어가게 되었습니다.
물론 HCL 문법을 계속 사용해야 하는 이상 지속적인 공부와 추가/변경되는 문법을 계속
팔로우 해야겠지만, 한 단계를 넘겼다는 느낌에 뿌듯합니다. :thumbsup:</p>

<p>이번 주에는 계속 사용은 해왔지만 잘은 모르고 있던 <code class="language-plaintext highlighter-rouge">Provider</code>와 <code class="language-plaintext highlighter-rouge">State</code>에 대해
<a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a>를 통해 알아 보겠습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="프로바이더-provider">프로바이더 (Provider)</h2>

<ul>
  <li>테라폼은 다양한 클라우드 서비스와 SaaS 등을 지원합니다. 이를 위해 사용하는 것이 <code class="language-plaintext highlighter-rouge">Provider</code>입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Provider</code>는 클라우드 서비스나 SaaS를 지원하는 테라폼의 플러그인이며 각 서비스의 API 와 통신하여 리소스를 관리합니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Provider</code>는 다음의 3가지 등급으로 나뉩니다.</p>

    <table>
      <thead>
        <tr>
          <th>등급</th>
          <th>설명</th>
          <th>네임스페이스</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Official</td>
          <td>테라폼 팀에서 제공하는 공식 플러그인입니다.</td>
          <td>hashicorp</td>
        </tr>
        <tr>
          <td>Partner</td>
          <td>테라폼과 파트너십을 맺은 회사에서 제공하는 플러그인으로 주로 해당 파트너의 클라우드/SaaS 제품에 대한 관리 기능을 제공합니다.<br />Partner 프로바이더가 되려면 HarshiCorp Technology Partnet Program 에 가입되어야 합니다.</td>
          <td>게시한 조직 이름<br />(mongodb/mongodbatlas)</td>
        </tr>
        <tr>
          <td>Community</td>
          <td>커뮤니티에서 제공하는 플러그인으로 개별 관리자와 그룹에서 등록한 프로바이더 입니다.<br />사용시 주의가 필요합니다.</td>
          <td>개인 및 조적 계정 이름<br />(DeviaVir/gsuite)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>추가적으로 <code class="language-plaintext highlighter-rouge">Archived</code> 등급이 있을 수 있으며, 더이상 유지보수 되지 않는 이전 버전을 의미합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Community</code> 제공 <code class="language-plaintext highlighter-rouge">Provider</code>는 <strong>충분히 검증되지 않거나, 신뢰성이 충분히 입증되지 않은</strong> 개인(또는 조직)이
등록한 경우도 있기 때문에 사용시 주의가 필요합니다. 특히 보안에 민감한 정보를 다루는 경우에는 특히 <strong>주의해야</strong> 합니다.
github의 star 수, issue, PR 등을 확인하여 신뢰성을 판단한 다음 사용하는 것이 좋습니다.</li>
  <li>사용가능한 <code class="language-plaintext highlighter-rouge">Provider</code>의 목록은 다음의 링크에서 확인할 수 있습니다.
    <ul>
      <li><a href="https://registry.terraform.io/browse/providers">Terraform Providers</a></li>
    </ul>
  </li>
</ul>

<h3 id="provider-설정">Provider 설정</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Provider</code> 설정은 다음과 같이 <code class="language-plaintext highlighter-rouge">provider</code> 블록을 사용하여 설정합니다. (1주차 참조)
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_version</span> <span class="p">=</span> <span class="s2">"~&gt; 1.3.0"</span> <span class="c1"># 테라폼 버전</span>
  
  <span class="nx">required_providers</span> <span class="p">{</span> <span class="c1"># 프로바이더 버전을 나열</span>
    <span class="nx">random</span> <span class="p">=</span> <span class="p">{</span>
      <span class="c1"># Official Tier는 source를 생략할 수 있습니다.</span>
    <span class="p">}</span>
    <span class="nx">architech-http</span> <span class="p">=</span> <span class="p">{</span>
      <span class="c1"># Official Tier 가 아닌 경우 source를 명시해야 합니다.</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"architect-team/http"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 3.0"</span>
    <span class="p">}</span>
    <span class="nx">my-peter-aws</span> <span class="p">=</span> <span class="p">{</span>   <span class="c1"># 프로바이더의 로컬 이름은 임의로 지정 가능합니다.</span>
                       <span class="c1"># 원래는 aws = { version = "~&gt; 5.56.1" } 과 같이</span>
                       <span class="c1"># 사용했겠지만 이렇게 이름을 바꿀 수 있습니다.</span>
      <span class="nx">source</span>  <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 5.56.1"</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="p">...</span> 
<span class="p">}</span> 
<span class="err">...</span>
</code></pre></div>    </div>
    <ul>
      <li>위의 예제에서 <code class="language-plaintext highlighter-rouge">random</code>은 Official Tier 이므로 <code class="language-plaintext highlighter-rouge">source</code>를 생략할 수 있습니다.</li>
      <li>하지만 <code class="language-plaintext highlighter-rouge">architech-team/http</code>는 Official Tier가 아니므로 <code class="language-plaintext highlighter-rouge">source</code>를 명시해야 합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">my-peter-aws</code> 처럼 provider는 로컬 이름을 임의로 지정할 수 있습니다. 하지만 특별한 이유가 없다면 <code class="language-plaintext highlighter-rouge">aws</code>와 같은 기본 이름을 사용하는 것이 좋습니다.</li>
    </ul>
  </li>
</ul>

<h4 id="로컬-이름과-명시적-프로바이더-지정">로컬 이름과 명시적 프로바이더 지정</h4>
<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">architect-http</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"architect-team/http"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 3.0"</span>
    <span class="p">}</span>
    <span class="nx">http</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/http"</span>
    <span class="p">}</span>
    <span class="nx">aws-http</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"terraform-aws-modules/http"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">data</span> <span class="s2">"http"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="k">provider</span> <span class="p">=</span> <span class="nx">aws-http</span>
  <span class="nx">url</span> <span class="p">=</span> <span class="s2">"https://checkpoint-api.hashicorp.com/v1/check/terraform"</span>

  <span class="nx">request_headers</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Accept</span> <span class="p">=</span> <span class="s2">"application/json"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>로컬이름
    <ul>
      <li>위의 예제에서 <code class="language-plaintext highlighter-rouge">architect-http = { ... }</code>의 <code class="language-plaintext highlighter-rouge">architect-http</code>, 
<code class="language-plaintext highlighter-rouge">http = { ... }</code>의 <code class="language-plaintext highlighter-rouge">http</code>, <code class="language-plaintext highlighter-rouge">aws-http = { ... }</code>의 <code class="language-plaintext highlighter-rouge">aws-http</code>는 로컬 이름입니다.</li>
      <li>앞서 말씀드린것 처럼 로컬이름은 임의로 지정할 수 있으나 특별한 이유가 없다면 “use provider”에서 권장하는 기본 이름을 사용하는 것이 좋습니다.</li>
    </ul>
  </li>
  <li>명시적 프로바이더 지정
    <ul>
      <li>위의 예제처럼 <code class="language-plaintext highlighter-rouge">http</code>라는 동일한 이름의 리소스를 가진 경우 <code class="language-plaintext highlighter-rouge">data</code> 나 <code class="language-plaintext highlighter-rouge">resource</code> 블록에서 <code class="language-plaintext highlighter-rouge">provider</code>를 명시적으로 지정할 수 있습니다.
        <ul>
          <li>위의 예제에서 <code class="language-plaintext highlighter-rouge">data.http.example</code>은 <code class="language-plaintext highlighter-rouge">aws-http</code>로 지정된 <code class="language-plaintext highlighter-rouge">provider</code>를 사용합니다.</li>
          <li>만약 <code class="language-plaintext highlighter-rouge">data "http" "example" {</code>에서 <code class="language-plaintext highlighter-rouge">provider = aws-http</code>를 생략했다면, 위의 <code class="language-plaintext highlighter-rouge">required_providers</code>에서 
<code class="language-plaintext highlighter-rouge">http</code>라는 로컬 이름을 지정한 <code class="language-plaintext highlighter-rouge">hashicorp/http</code> 프로바이더가 사용됩니다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="단일-프로바이더의-다중-정의">단일 프로바이더의 다중 정의</h4>

<ul>
  <li>동일한 프로바이더를 사용하지만 다른 설정을 필요로 하는 경우, 
리소스마다 별도로 선언된 프로바이더를 지정해야 하는 경우가 있습니다.</li>
  <li>예를들어서 <code class="language-plaintext highlighter-rouge">aws</code> 프로바이더를 사용할때 두개 이상의 <code class="language-plaintext highlighter-rouge">region</code>이나
<code class="language-plaintext highlighter-rouge">access_key</code>, <code class="language-plaintext highlighter-rouge">secret_key</code> 등이 다른 환경을 사용하는 경우가 있는데 이때 아래와 같이 정의 할 수 있습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-southeast-1"</span>
<span class="p">}</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">alias</span>  <span class="p">=</span> <span class="s2">"seoul"</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>

<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"app_server1"</span> <span class="p">{</span>
  <span class="nx">ami</span>           <span class="p">=</span> <span class="s2">"ami-06b79cf2aee0d5c92"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"app_server2"</span> <span class="p">{</span>
  <span class="k">provider</span>      <span class="p">=</span> <span class="nx">aws</span><span class="p">.</span><span class="nx">seoul</span>
  <span class="nx">ami</span>           <span class="p">=</span> <span class="s2">"ami-0ea4d4b8dc1e46212"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>
<span class="p">}</span>  
</code></pre></div>    </div>
    <p>첫 aws 프로바이더는 <code class="language-plaintext highlighter-rouge">alias</code> 없이 사용되고
두번째 aws 프로바이더는 “seoul”이라는 <code class="language-plaintext highlighter-rouge">alias</code>를 사용하였고, <code class="language-plaintext highlighter-rouge">aws.seoul</code>과 같이 사용할 수 있습니다.</p>
    <ul>
      <li>실행 결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply
<span class="nv">$ </span>terraform state list 
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_instance.app_server1.public_ip"</span> | terraform console
<span class="c"># =&gt; "13.215.47.148"</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_instance.app_server1.availability_zone"</span> | terraform console
<span class="c"># =&gt; "ap-southeast-1b"</span>
     
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_instance.app_server2.public_ip"</span> | terraform console
<span class="c"># =&gt; "43.203.243.238"</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_instance.app_server2.availability_zone"</span> | terraform console    
<span class="c"># =&gt; "ap-northeast-2a"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="프로바이더-요구사항-정의">프로바이더 요구사항 정의</h4>

<ul>
  <li>테라폼 실행시 요구되는 프로바이더 요구사항은 <code class="language-plaintext highlighter-rouge">terraform</code>블록의 <code class="language-plaintext highlighter-rouge">required_providers</code> 블록에 여러개를 정의할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">source</code>에는 프로바이더 다운로드 경로를 지정하고 <code class="language-plaintext highlighter-rouge">version</code>은 버전 제약을 명시합니다.</li>
  <li>프로바이더 요구사항 정의 블록
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="err">&lt;프로바이더</span> <span class="err">로컬</span> <span class="err">이름&gt;</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="p">[</span><span class="err">&lt;호스트</span> <span class="err">주소&gt;</span><span class="p">/]</span><span class="err">&lt;네임스페이스&gt;</span><span class="p">/</span><span class="err">&lt;유형&gt;</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="err">&lt;버전</span> <span class="err">제약&gt;</span>
    <span class="p">}</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">source</code> : 프로바이더가 호스팅되는 주소와 네임스페이스, 유형을 지정합니다.
        <ul>
          <li>호스트 주소 : 프로바이더가 호스팅되는 주소로, 필수는 아니며 기본값은 <code class="language-plaintext highlighter-rouge">registry.terraform.io</code> 입니다.</li>
          <li>네임스페이스 : 프로바이더의 네임스페이스로, 공개된 레지스트리 및 Terraform Cloud의 비공개 레지스트리의 프로바이더를 게시하는 조직을 나타냅니다..</li>
          <li>유형 : 프로바이더에서 관리되는 플랫폼이나 서비스 이름입니다.</li>
          <li>예제)
            <ul>
              <li><code class="language-plaintext highlighter-rouge">source = "hashicorp/aws"</code> 는 <code class="language-plaintext highlighter-rouge">hashicorp</code> 네임스페이스의 <code class="language-plaintext highlighter-rouge">aws</code> 프로바이더를 의미합니다. 호스트 주소가 생략되어 <code class="language-plaintext highlighter-rouge">registry.terraform.io</code>로 간주됩니다.</li>
              <li><code class="language-plaintext highlighter-rouge">source = "mycorp.com/myns/mytype"</code> 는 <code class="language-plaintext highlighter-rouge">mycorp.com</code> 호스트 주소의 <code class="language-plaintext highlighter-rouge">myns</code> 네임스페이스의 <code class="language-plaintext highlighter-rouge">mytype</code>라는 프로바이더를 의미합니다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">version</code> : 버전 제약은 <a href="/posts/2024-06-11-T101-Study-Terraform-Week-1/#terraform-%EB%B8%94%EB%A1%9D">1주차</a>에서 설명한 것과 동일합니다.</li>
    </ul>
  </li>
</ul>

<h4 id="프로바이더-설치">프로바이더 설치</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">terraform init</code> 명령을 실행시 지정된 <code class="language-plaintext highlighter-rouge">source</code>에서 <code class="language-plaintext highlighter-rouge">version</code>의 버전 제약에 맞는 프로바이더를 다운로드 합니다.</li>
  <li>항상 지정한 특정 버전을 사용하려면 <code class="language-plaintext highlighter-rouge">terraform</code> 블록에서 정의하거나 <code class="language-plaintext highlighter-rouge">.terraform.lock.hcl</code> 잠금파일을 코드 저장소에 공유하는 등의 방법이 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">required_providers</code> 블록을 사용하면 실제로 리소스를 사용하지 않더라도 설치가 되며, <code class="language-plaintext highlighter-rouge">required_providers</code> 블록을 사용하지 않으면 리소스를 사용할 때 테라폼이 추론해서 최신 버전의 프로바이더를 설치가 진행됩니다.</li>
</ul>

<h4 id="프로바이더-간-전환-여부">프로바이더 간 전환 여부</h4>

<ul>
  <li>AWS, GCP 같은 클라우드 서비스와 같이 유사한 서비스들을 제공하는 경우 프로바이더를 바꿔서 쉽게 사용할 수 있을까요? 불가능합니다.</li>
  <li>각 프로바이더 별로 리소스 이름도 다르고 설정도 다르기 때문에 프로바이더를 바꾸는 것은 쉽지 않습니다.</li>
  <li>하지만 1:1로 매칭 되지는 않지만, 유사 프로바이더 간에는 리소스 명이나 옵션에도 유사점이 있기 때문에
이점은 있습니다.</li>
</ul>

<h3 id="프로바이더-에코-시스템">프로바이더 에코 시스템</h3>

<ul>
  <li>테라폼의 에코시스템은 사용자가 사용하는 방식과 구조에 따라 테라폼을 적용할 수 있도록 설계되었습니다.
<img src="/assets/2024/t101-4th/20240704_terraform_w4_provider_ecosystem.png" alt="img.png" /></li>
  <li>테라폼의 에코시스템을 구성하는 파트너는 크게 워크플로우 파트너와 인프라스트럭쳐 파트너로 나뉩니다.
    <ul>
      <li>워크플로우 파트너 : 테라폼 클라우드와 테라폼 엔터프라이즈에 대한 지원을 제공하는 파트너로, 주로 자신들의
기존 플랫폼을 테라폼에서 사용할 수 있도록 돕는 파트너입니다.
대표적으로 Github, Gitlab, Jenkins, CircleCI, TravisCI, Datadog, NewRelic 등이 있습니다.
        <ul>
          <li>워크 플로우 파트너의 유형
            <ul>
              <li><strong>코드 스캐닝</strong> : IaC 구성을 검토하여 오류나 보안 문제를 방지하는 도구를 제공하는 파트너</li>
              <li><strong>비용 관리</strong> : 새로운 인프라의 비용 영향을 분석하고 비용 관리를 적용하는 파트너</li>
              <li><strong>관찰성/모니터링</strong> : 성능의 가시성을 제공하거나 인프라 변경을 자동으로 감지하여 최적의 관찰성을 보장하는 데 중점을 둔 파트너</li>
              <li><strong>보안</strong> : 보안 및 준수 정책에 맞지 않는 Terraform 구성 오류를 감지하는 파트너</li>
              <li><strong>감사</strong> : 멀티 클라우드 인프라 자원을 관리하여 서비스 중단을 방지하고, 거버넌스를 개선하며, 효율성을 높이는 데 도움을 주는 파트너</li>
              <li><strong>노 코드/로우 코드</strong> : IT, 공급망, 운영 관리, 비즈니스 관리 및 기타 워크플로우의 구현, 배포 및 전달에 중점을 둔 파트너</li>
              <li><strong>SSO(Single Sign On)</strong> : 최종 사용자가 안전하게 로그인할 수 있도록 인증에 중점을 둔 파트너</li>
              <li><strong>CI/CD</strong> : 지속적 통합 및 지속적 전달/배포에 중점을 둔 파트너</li>
              <li><strong>VCS</strong> : 소프트웨어 코드 변경을 추적하고 관리하는 데 중점을 둔 파트너</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>인프라스트럭처 파트너 : 모든 테라폼 에디션을 지원하며, 자신들의 플랫폼의 API를 통해 리소스를 활용할 수 있게
하는 파트너입니다. 대표적으로 퍼블릭 클라우드 서비스 업체인 AWS, Azure, GCP와 PaaS 인 Heroku, SaaS 서비스인
DNSimple, CloudFlare 등이 있습니다.
        <ul>
          <li>워크 플로우 파트너의 유형
            <ul>
              <li><strong>퍼블릭 클라우드</strong> : 대규모 글로벌 클라우드 제공업체로 IaaS, SaaS, PaaS를 포함한 다양한 서비스를 제공</li>
              <li><strong>컨테이너 오케스트레이션</strong> : 컨테이너 프로비저닝 및 배포를 관리</li>
              <li><strong>IaaS(Infrastructure-as-a-Service)</strong> : 스토리지, 네트워킹, 가상화와 같은 솔루션을 제공하는 인프라 및 IaaS 제공</li>
              <li><strong>보안 및 인증</strong> : 인증 및 보안 모니터링 플랫폼을 제공</li>
              <li><strong>자산 관리</strong> : 소프트웨어 라이선스, 하드웨어 자산, 클라우드 리소스를 포함한 주요 조직 및 IT 리소스의 자산 관리를 제공</li>
              <li><strong>CI/CD</strong> : 지속적 통합 및 지속적 전달/배포</li>
              <li><strong>로깅 및 모니터링</strong> : 로거, 메트릭 도구, 모니터링 서비스와 같은 서비스를 구성하고 관리</li>
              <li><strong>유틸리티</strong> : 랜덤 값 생성, 파일 생성, http 상호작용, 시간 기반 리소스와 같은 도움 기능을 제공</li>
              <li><strong>클라우드 자동화</strong> : 구성 관리와 같은 특수 클라우드 인프라 자동화 관리</li>
              <li><strong>데이터 관리</strong> : 데이터 센터 저장소, 백업, 복구 솔루션 제공</li>
              <li><strong>네트워킹</strong> : 라우팅, 스위칭, 방화벽, SD-WAN 솔루션과 같은 네트워크 특정 하드웨어 및 가상화 제품과 통합</li>
              <li><strong>VCS(Version Control System)</strong> : Terraform 내에서 VCS 프로젝트, 팀, 저장소에 중점을 둠</li>
              <li><strong>통신 및 메시징</strong> : 통신, 이메일, 메시징 플랫폼과 통합</li>
              <li><strong>데이터베이스</strong> : 데이터베이스 리소스를 프로비저닝하고 구성할 수 있는 기능을 제공</li>
              <li><strong>PaaS(Platform-as-a-Service)</strong> : 이들은 하드웨어, 소프트웨어, 애플리케이션 개발 도구를 포함한 다양한 범위를 제공하는 플랫폼 및 PaaS 제공</li>
              <li><strong>웹 서비스</strong> : 웹 호스팅, 웹 성능, CDN 및 DNS 서비스</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="상태-state">상태 (State)</h2>

<h3 id="state의-목적과-의미">State의 목적과 의미</h3>

<p>테라폼의 <code class="language-plaintext highlighter-rouge">State</code>는 테라폼이 관리하는 인프라의 현재 상태를 저장하는 파일입니다.
그 동작의 특징을 알아 보기위해서 다음과 같이 <code class="language-plaintext highlighter-rouge">State</code>의 목적과 의미를 알아보겠습니다.
기본적으로 `terraform.tfstate 파일에 저장되며, 이 파일은 JSON 형식으로 저장됩니다.</p>
<ul>
  <li>실습
    <ul>
      <li>main.tf 생성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span>  <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span>       <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
    
<span class="c"># 상태 파일 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate  
<span class="c"># =&gt; ...</span>
<span class="c">#    "serial": 1,</span>
<span class="c">#    ...</span>
<span class="c">#    "instances": [ </span>
<span class="c">#       { "id": "vpc-0bebcf57eff3753a3",</span>
<span class="c">#         "tags": { "Name": "t101-study" }, </span>
<span class="c">#    ...</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.id"</span> | terraform console
<span class="c"># =&gt; "vpc-0bebcf57eff3753a3"</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.tags.Name"</span> | terraform console
<span class="c"># =&gt; "t101-study"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">main.tf</code>의 태그 수정 수정
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span>  <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span>       <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Warmachine Rox"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
    
<span class="c"># 상태 파일 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate  
<span class="c"># =&gt; ...</span>
<span class="c">#    "serial": 1,</span>
<span class="c">#    ...</span>
<span class="c">#    "instances": [ </span>
<span class="c">#       { "id": "vpc-0bebcf57eff3753a3",</span>
<span class="c">#         "tags": { "Name": "Warmachine Rox" }, </span>
<span class="c">#    ...</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.id"</span> | terraform console
<span class="c"># =&gt; "vpc-0bebcf57eff3753a3"</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.tags.Name"</span> | terraform console
<span class="c"># =&gt; "Warmachine Rox"</span>
</code></pre></div>        </div>
      </li>
      <li>상태비교
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>diff terraform.tfstate terraform.tfstate.backup
4c4
&lt;   <span class="s2">"serial"</span>: 3,
<span class="nt">---</span>
<span class="o">&gt;</span>   <span class="s2">"serial"</span>: 1,
39c39
&lt;               <span class="s2">"Name"</span>: <span class="s2">"Warmachine Rox"</span>
<span class="nt">---</span>
<span class="o">&gt;</span>               <span class="s2">"Name"</span>: <span class="s2">"t101-study"</span>
42c42
&lt;               <span class="s2">"Name"</span>: <span class="s2">"Warmachine Rox"</span>
<span class="nt">---</span>
<span class="o">&gt;</span>               <span class="s2">"Name"</span>: <span class="s2">"t101-study"</span> 
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>위와 같이 상태가 관리되는 파일인 <code class="language-plaintext highlighter-rouge">terraform.tfstate</code>에 최근 적용 상태가 적용됩니다.</li>
</ul>

<h4 id="멱등성-idempotency">멱등성 (Idempotency)</h4>
<ul>
  <li>이렇게 저장된 상태는 멱등성를 제공하는데 활용됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform plan</code>이나 <code class="language-plaintext highlighter-rouge">terraform apply</code>를 했을때, 프로비저닝된 리소스와 <code class="language-plaintext highlighter-rouge">.tf</code> 파일의 리소스가 일치하지 않으면
테라폼은 <code class="language-plaintext highlighter-rouge">.tf</code> 파일의 리소스를 프로비저닝된 리소스와 일치하도록 변경합니다.
이때 프로비저닝된 리소스와 <code class="language-plaintext highlighter-rouge">.tf</code> 파일의 리소스가 같은 리소스를 가리키고 있는지 아는데
<code class="language-plaintext highlighter-rouge">id</code>값 등을 사용합니다.</li>
  <li>즉, 상태 파일에 문제가 생길 경우 기존에 생성된 리소스에 대한 추적이 불가능해져서
실제로는 리소스가 존재해도 테라폼 입장에서는 없는것과 마찬가지가 됩니다.</li>
  <li>이렇게 중요하기 때문에 상태 파일은 테라폼에서만 관리되도록 하고,
<strong>직접 편집하거나 작성하거나 삭제하면 안됩</strong>니다.</li>
</ul>

<h4 id="상태-파일을-팀-단위에서-테라폼-운영시-문제점">상태 파일을 팀 단위에서 테라폼 운영시 문제점</h4>
<ul>
  <li>로컬의 상태 파일은 팀 단위에서 운영시 다음과 같은 어려움이 있습니다.
    <ul>
      <li>상태 파일은 최종 상태를 갖고 있어야 하기 때문에 모든 팀원들이 동일한 상태 파일을 갖고 있어야 합니다.</li>
      <li>두명이상이 동시에 적용하는것을 막기 위해 상태 파일을 잠그는 기능이 필요합니다.</li>
      <li>개발 단계, 스테이징 단계, 프로덕션 단계 등 다양한 환경에서 각 환경별로 상태파일을 격리할 필요가 있습니다.</li>
      <li>상태파일에는 <code class="language-plaintext highlighter-rouge">sensitive=true</code>인 민감한 값도 평문으로 저장됩니다.</li>
    </ul>
  </li>
  <li>상태파일을 VCS로 관리하는 것의 문제점
    <ul>
      <li>수동 오류
        <ul>
          <li>상태 파일의 최신 변경 사항을 가져오거나, 변경 되었을때 push 하는것을 잊기 쉽습니다.</li>
          <li>상태 파일을 잘못 병합하거나, 잘못된 상태 파일을 사용하는 경우가 발생할 수 있습니다.</li>
        </ul>
      </li>
      <li>잠금
        <ul>
          <li>VCS 사용시 잠금 기능을 사용할 수 없습니다.</li>
        </ul>
      </li>
      <li>민감한 정보
        <ul>
          <li>민감한 정보가 평문으로 저장되어 VCS 에 권한이 있는 사람은 누구나 볼 수 있어서 노출 위협이 있습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>이러한 문제점을 해결하기 위해 테라폼 클라우드에서는 안전하게 상태를 관리하는 기능을 제공합니다.</li>
</ul>

<h4 id="원격지원-백엔드">원격지원 백엔드</h4>
<ul>
  <li>테라폼 클라우드를 사용하지 않는 경우는 원격 백엔드를 사용하면 어느정도 해결이 가능합니다.
    <ul>
      <li>수동 오류 해결 : plan/apply 시 백엔드에 최신의 상태가 저장 됩니다.</li>
      <li>잠금 : 백엔드에서 잠금 기능을 제공합니다. <code class="language-plaintext highlighter-rouge">-lock-timeout=&lt;TIME&gt;</code>로 잠금 대기 시간을 설정할 수 있습니다.</li>
      <li>민감한 정보 : 대부분의 백엔드는 민감한 정보를 암호화하여 저장합니다. 또한 권한관리 기능으로 상태 파일에 대한 접근을 차단할 수 있습니다.</li>
    </ul>
  </li>
  <li>원격 백엔드 종류 : AWS S3, Azure Blob Storage, Google Cloud Storage, HashiCorp Consul 등</li>
</ul>

<h4 id="state-동기화">State 동기화</h4>

<ul>
  <li>테라폼은 구성 파일과 기존 State와 실제 리소스 구성을 비교하여 변경 사항을 찾아내고 적용합니다.
    <ul>
      <li>테라폼 구성과 State 흐름
<img src="/assets/2024/t101-4th/20240704_terraform_w4_state_sync.png" alt="img.png" />
출처 : <a href="https://kschoi728.tistory.com/135">https://kschoi728.tistory.com/135</a>
        <ul>
          <li>plan과 apply 중 리소스에 발생할 수 있는 네 가지 변경 사항이 있고, 아래의 출력 기호로 표시 되었습니다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">+ create</code> : 리소스의 생성</li>
              <li><code class="language-plaintext highlighter-rouge">- destroy</code> : 리소스의 삭제</li>
              <li><code class="language-plaintext highlighter-rouge">-/+ replace</code> : 삭제 후 생성 (<code class="language-plaintext highlighter-rouge">lifecycle</code>의 <code class="language-plaintext highlighter-rouge">create_before_destroy</code> 설정시 생성 후 삭제 설정이 가능합니다.)</li>
              <li><code class="language-plaintext highlighter-rouge">~ update in-place</code> : 리소스가 있는 상태에서 일부 상태만 업데이트</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>유형별 실습 + 문제사항 -&gt; 복구 import
    <ul>
      <li>
        <p>테라폼 구성에 추가된 리소스와 State에 따라 어떤 동작이 발생하는지 표로 정리하였습니다.</p>

        <table>
          <thead>
            <tr>
              <th>유형</th>
              <th>구성 리소스 정의(.tf)</th>
              <th>State 구성 데이터</th>
              <th>실제 리소스</th>
              <th>기본 예상 동작</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td>있음</td>
              <td> </td>
              <td> </td>
              <td>리소스 생성</td>
            </tr>
            <tr>
              <td>2</td>
              <td>있음</td>
              <td>있음</td>
              <td> </td>
              <td>리소스 생성</td>
            </tr>
            <tr>
              <td>3</td>
              <td>있음</td>
              <td>있음</td>
              <td>있음</td>
              <td>동작 없음</td>
            </tr>
            <tr>
              <td>4</td>
              <td> </td>
              <td>있음</td>
              <td>있음</td>
              <td>리소스 삭제</td>
            </tr>
            <tr>
              <td>5</td>
              <td> </td>
              <td> </td>
              <td>있음</td>
              <td>동작 없음</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>유형 1 : 신규 리소스 정의 -&gt; Apply -&gt; 리소스 생성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"peter_test"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_iam_user"</span> <span class="s2">"peter_iamuser1"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">name</span><span class="k">}</span><span class="s2">1"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_iam_user"</span> <span class="s2">"peter_iamuser2"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">name</span><span class="k">}</span><span class="s2">2"</span>
<span class="p">}</span>     
</code></pre></div>        </div>
        <ul>
          <li>실행
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 첫번째 실행. 기존에 iam 이 없기 때문에 리소스가 생성됩니다.</span>
      
<span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Apply complete! Resources: 2 added, 0 changed, 0 destroyed.</span>
      
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> terraform.tfstate
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq 
      
<span class="c"># main.tf 수정없이 두번째 실행. 변경사항이 없기 때문에 아무런 동작을 하지 않습니다. (유형 3)</span>
      
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; No changes. Your infrastructure matches the configuration.</span>
<span class="c">#    ...</span>
<span class="c">#    Apply complete! Resources: 0 added, 0 changed, 0 destroyed.</span>
      
<span class="c"># iam 사용자 리스트 확인</span>
<span class="nv">$ </span>aws iam list-users | jq
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>유형 2 : 실제 리소스 수동제거 -&gt; Apply =&gt; 리소스 생성
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 실제 리소스 수동 제거</span>
<span class="nv">$ </span>aws iam delete-user <span class="nt">--user-name</span> peter_test1
<span class="nv">$ </span>aws iam delete-user <span class="nt">--user-name</span> peter_test2
    
<span class="c"># iam 사용자 리스트에서 실제 삭제됨을 확인 </span>
<span class="nv">$ </span>aws iam list-users | jq
    
<span class="nv">$ </span>terraform plan
<span class="c"># =&gt; ...</span>
<span class="c">#    Plan: 2 to add, 0 to change, 0 to destroy.</span>
</code></pre></div>        </div>
        <p>이와 같이 리소스 구성정의(main.tf)을 수정하지 않고 실제 리소스가 제거되면
테라폼이 실제 리소스와 상태 파일을 비교해서 차이를 인지하고 동일하게 상태를 만들기위해 
리소스를 생성하려 합니다.</p>
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform plan <span class="nt">-refresh</span><span class="o">=</span><span class="nb">false</span>
<span class="c"># =&gt; No changes. Your infrastructure matches the configuration.</span>
</code></pre></div>        </div>
        <p>하지만 <code class="language-plaintext highlighter-rouge">-refresh=false</code> 옵션을 주어 강제로 실제 리소스를 refresh 하지 않도록 하면
리소스 구성정의와 상태 파일만을 비교하게 됩니다.
<code class="language-plaintext highlighter-rouge">-refresh=false</code> 을 준 상태에서는 상태파일과 리소스 구성정의가 일치하므로 변경사항이 없습니다.</p>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Apply complete! Resources: 2 added, 0 changed, 0 destroyed. </span>
</code></pre></div>        </div>
        <p><code class="language-plaintext highlighter-rouge">-refresh=false</code> 옵션을 주지 않고 <code class="language-plaintext highlighter-rouge">apply</code> 시키면 테라폼이 똑똑하게 실제 리소스와의 차이를 인식하여
수동 제거된 리소스를 생성합니다.</p>
      </li>
      <li>유형 3 : 코드, 상태, 실제 리소스가 일치하는 경우
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq .serial
<span class="c"># =&gt; 8 </span>

<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq .serial
<span class="c"># =&gt; 8 </span>

<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq .serial
<span class="c"># =&gt; 8 </span>
</code></pre></div>        </div>
        <p>코드, 상태, 실제 리소스가 일치하는 경우 아무 동작을 하지 않으며 상태파일의 <code class="language-plaintext highlighter-rouge">serial</code>도 변하지 않습니다.</p>
      </li>
      <li>유형 4 : 리소스 구성정의에서 일부 리소스 삭제 -&gt; Apply
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf </span>
<span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"peter_test"</span>
<span class="p">}</span>
      
<span class="k">resource</span> <span class="s2">"aws_iam_user"</span> <span class="s2">"peter_iamuser1"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">name</span><span class="k">}</span><span class="s2">1"</span>
<span class="p">}</span>
      
<span class="c1"># peter_test2 리소스를 구성정의에서 삭제</span>
</code></pre></div>        </div>
        <ul>
          <li>실행
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Apply complete! Resources: 0 added, 0 changed, 1 destroyed.</span>
        
<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.tfstate
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
             
<span class="c"># iam 사용자 리스트에서 삭제됨을 확인</span>
<span class="nv">$ </span>aws iam list-users | jq
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>유형 5 : 실제 리소스만 존재하는 경우
상태파일에는 리소스가 존재하지 않지만 실제 리소스는 존재하는 경우
테라폼과 연결고리가 없기 때문에, 실제 존재하는 리소스는 테라폼에서는 없는 것으로 보입니다.
또한 리소스 구성정의 파일에도 없기 때문에 아무런 동작을 하지 않습니다.</li>
      <li>유형 6 : 실수로 tfstate 파일이 삭제 된 경우
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform state list
<span class="c"># =&gt; aws_iam_user.peter_iamuser1</span>
    
<span class="c"># 상태 파일 삭제</span>
<span class="nv">$ </span><span class="nb">rm </span>terraform.tfstate<span class="k">*</span>
    
<span class="c"># terraform plan시 실제 리소스에 연결고리가 없기 때문에, 실제 리소스가 없다고 판한하고 리소스를 생성하려 합니다.</span>
<span class="nv">$ </span>terraform plan
<span class="c"># =&gt; Plan: 1 to add, 0 to change, 0 to destroy.</span>
    
<span class="c"># 실제 리소스를 확인해보면 존재합니다.</span>
<span class="nv">$ </span>aws iam list-users | jq 
    
<span class="c"># 현재 상태에서 적용시 이미 존재하는 IAM을 만들려한다고 오류가 발생합니다.</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Error: creating IAM User (peter_test1): operation error IAM: CreateUser, ...</span>
    
<span class="c"># 상태 보기를 하면 상태 파일이 없는것을 확인할 수 있습니다.</span>
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; No state file was found!</span>
</code></pre></div>        </div>
        <p>상태 파일이 삭제되면 연결고리가 없어지면서 리소스를 생성하려 하지만, 실제 리소스에 동일한 이름의 IAM이 존재하여 실패하게 됩니다.</p>
        <ul>
          <li>해결 방법 : <code class="language-plaintext highlighter-rouge">import</code> 명령을 사용하여 state 파일을 복구합니다.</li>
        </ul>
      </li>
      <li>유형 7 : 실수로 삭제된 tfstate를 import로 복구
        <ul>
          <li><code class="language-plaintext highlighter-rouge">terraform import</code> 명령은 기존에 생성된 리소스를 테라폼의 상태 파일에 추가하는 명령입니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 실제 IAM 사용자 리스트 확인</span>
<span class="nv">$ </span>aws iam list-users | jq
      
<span class="c"># 실제 IAM 사용자의 이름을 가져와서 import 명령을 실행합니다.</span>
<span class="nv">$ </span>terraform import aws_iam_user.peter_iamuser1 peter_test1
<span class="c"># =&gt; aws_iam_user.peter_iamuser1: Importing from ID "peter_test1"...</span>
<span class="c">#    aws_iam_user.peter_iamuser1: Import prepared!</span>
<span class="c">#    Prepared aws_iam_user for import</span>
<span class="c">#    aws_iam_user.peter_iamuser1: Refreshing state... [id=peter_test1]</span>
<span class="c">#    </span>
<span class="c">#    Import successful!</span>
<span class="c">#    </span>
<span class="c">#    The resources that were imported are shown above. These resources are now in</span>
<span class="c">#    your Terraform state and will henceforth be managed by Terraform.</span>
      
<span class="c"># 상태 파일 확인하면 상태파일이 있고, aws_iam_user 리소스가 추가된것을 확인할 수 있습니다.</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq
      
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; aws_iam_user.peter_iamuser1</span>
      
<span class="c"># 실제 리소스와 상태 파일이 일치하여 변경사항이 없습니다.</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
</code></pre></div>            </div>
            <p>이와 같이 <code class="language-plaintext highlighter-rouge">terraform import</code> 명령을 사용하여 실수로 삭제된 상태 파일을 복구할 수 있습니다.
하지만 <code class="language-plaintext highlighter-rouge">import</code> 명령은 지정한 리소스만 복구할 수 있기 때문에, <strong>여러 리소스를 복구할 경우 어려움</strong>이 따릅니다.</p>
          </li>
          <li>따라서 상태파일을 S3의 버전관리 기능을 사용하는 등 <strong>잃어버리지 않도록 주의</strong>해야 합니다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="terraform-backend--aws-s3--dynamodb">Terraform Backend : AWS S3 + DynamoDB</h3>

<ul>
  <li>앞서 언급한것 처럼 로컬에서 상태파일을 관리할 경우 여러 문제점이 있어서 그것을 해결하기 위해 AWS S3 백엔드를 사용하여 
모든 팀원들이 하나의 상태를 공유하도록 할 수 있습니다.</li>
  <li>단, AWS <strong>S3만 사용시 동시성 잠금 관리가 되지 않기</strong> 때문에, <strong>DynamoDB 를 사용하여 잠금을 수행하여 보완</strong>할 수 있습니다.</li>
</ul>

<h4 id="악분님-실습-따라하기">악분님 실습 따라하기</h4>

<p>AWS S3와 DynamoDB를 사용한 상태 파일 관리를 악분님이 정리해주신 실습을 따라하며 살펴보겠습니다.
<a href="https://malwareanalysis.tistory.com/633#8.-state-%EB%B0%B1%EC%97%94%EB%93%9C">악분님 블로그 링크</a></p>

<ul>
  <li>사전준비 리모트 공용 저장소 AWS S3 생성
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/sungwook-practice/t101-study.git example
<span class="nv">$ </span><span class="nb">cd </span>example/state/step3_remote_backend/s3_backend 
  
<span class="c"># terraform.tfvars 파일을 수정하여 버킷명을 bucket_name = "&lt;닉네임&gt;-hello-tf1014-remote-backend" 로 수정합니다.</span>
<span class="c"># 저의 경우는 bucket_name = "peter-hello-tf1014-remote-backend" 가 되겠습니다.</span>
  
<span class="c"># S3 버킷 생성</span>
<span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
  
<span class="c"># 확인</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>aws s3 <span class="nb">ls</span>
<span class="c"># =&gt; 2024-07-XX 01:07:50 peter-hello-tf1014-remote-backend </span>
</code></pre></div>    </div>
  </li>
  <li>테라폼 백엔드를 AWS S3로 설정
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ../vpc
<span class="nv">$ </span><span class="nb">ls</span>
<span class="nv">$ </span><span class="nb">cat </span>provider.tf
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">provider.tf</code> 파일을 수정하여 백엔드를 S3로 설정합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">...</span>
<span class="nx">backend</span> <span class="s2">"s3"</span> <span class="p">{</span>
  <span class="c1"># bucket       = "&lt;닉네임&gt;-hello-tf1014-remote-backend"</span>
  <span class="nx">bucket</span>         <span class="p">=</span> <span class="s2">"peter-hello-tf1014-remote-backend"</span>
  <span class="nx">key</span>            <span class="p">=</span> <span class="s2">"terraform/state-test/terraform.tfstate"</span>
  <span class="nx">region</span>         <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
  <span class="c1"># dynamodb_table = "terraform-lock"</span>
<span class="p">}</span>
<span class="err">...</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">terraform init</code> 명령을 실행하면 백엔드 설정이 적용됩니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
<span class="c"># =&gt; Initializing the backend...</span>
<span class="c">#    Successfully configured the backend "s3"! Terraform will automatically</span>
<span class="c">#    ...    </span>
    
<span class="c"># 리소스 생성 </span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
    
<span class="nv">$ </span>terraform state list
    
<span class="c"># 상태는 있지만 상태파일(terraform.tfstate)이 없음을 확인</span>
<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.tfstate
<span class="c"># =&gt; 파일이 없습니다.</span>
    
<span class="c"># AWS S3 버킷 내에 tfstate 파일 확인</span>
<span class="nv">$ MYBUCKET</span><span class="o">=</span>peter-hello-tf1014-remote-backend
<span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://<span class="nv">$MYBUCKET</span> <span class="nt">--recursive</span> <span class="nt">--human-readable</span> <span class="nt">--summarize</span>
<span class="c"># =&gt; 2024-07-07 01:23:35    1.7 KiB terraform/state-test/terraform.tfstate</span>
<span class="c">#    Total Objects: 1</span>
<span class="c">#    Total Size: 1.7 KiB</span>
</code></pre></div>        </div>
        <p>상태가 로컬 파일이 아닌 S3에 저장됨을 확인하였습니다. 하지만 이 상태에서는 동시성 문제가 발생할 수 있기 때문에 DynamoDB를 추가하여 잠금을 설정하겠습니다.</p>
      </li>
    </ul>
  </li>
  <li>DynamoDB 생성
    <ul>
      <li>테라폼에서 DynamoDB 잠금을 사용하기 위해서는 LockID 라는 기본 키가 있는 테이블을 생성해야 됩니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ../dynamodb
<span class="nv">$ </span><span class="nb">ls</span> 
<span class="nv">$ </span><span class="nb">cat </span>main.tf  
  
<span class="c"># DynamoDB 생성</span>
<span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
  
<span class="c"># 확인</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show aws_dynamodb_table.terraform_state_lock
  
<span class="c"># DynamoDB 테이블 확인</span>
<span class="nv">$ </span>aws dynamodb list-tables <span class="nt">--output</span> text
<span class="c"># =&gt; TABLENAMES   terraform-lock</span>
<span class="nv">$ </span>aws dynamodb describe-table <span class="nt">--table-name</span> terraform-lock | jq
<span class="nv">$ </span>aws dynamodb describe-table <span class="nt">--table-name</span> terraform-lock <span class="nt">--output</span> table
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>테라폼 백엔드 설정에 dynamodb_table 속성을 적용
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ../vpc 
  
<span class="c"># vscode에서 provider.tf 수정</span>
<span class="nv">$ </span>code provider.tf 
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">provider.tf</code> 파일을 수정하여 <code class="language-plaintext highlighter-rouge">dynamodb_table = "terraform-lock"</code>을 추가합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">...</span>
<span class="nx">backend</span> <span class="s2">"s3"</span> <span class="p">{</span>
  <span class="nx">bucket</span>         <span class="p">=</span> <span class="s2">"peter-hello-tf1014-remote-backend"</span>
  <span class="nx">key</span>            <span class="p">=</span> <span class="s2">"terraform/state-test/terraform.tfstate"</span>
  <span class="nx">region</span>         <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
  <span class="nx">dynamodb_table</span> <span class="p">=</span> <span class="s2">"terraform-lock"</span>   <span class="c1"># 추가</span>
<span class="p">}</span>
<span class="err">...</span>
</code></pre></div>        </div>
      </li>
      <li>백엔드 설정이 바꼈으므로 <code class="language-plaintext highlighter-rouge">terraform init</code> 명령을 실행합니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="nt">-migrate-state</span>
<span class="c"># =&gt; Initializing the backend...</span>
<span class="c">#    Backend configuration changed!</span>
<span class="c">#    ...</span>
</code></pre></div>        </div>
      </li>
      <li>VPC의 tag 수정 후 apply와 Locking 확인
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf 수정 </span>
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"main"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">vpc_cidr</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="c1"># Name = "terraform VPC"</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"terraform VPC 2"</span> <span class="c1"># 2추가</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">apply</code>를 실행하고 “Enter a value:”에서 대기하면서 Dynamo DB 테이블을 확인합니다.
            <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply
<span class="c"># =&gt; ...</span>
<span class="c">#    Enter a value: &lt;입력하지 않고 대기&gt;</span>
</code></pre></div>            </div>
          </li>
          <li>
            <p>AWS Console에서 DynamoDB의 lock 테이블을 확인합니다.
<img src="/assets/2024/t101-4th/20240704_terraform_w4_dynamo_lock.png" alt="20240704_terraform_w4_dynamo_lock.png" /></p>

            <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"ID"</span><span class="p">:</span><span class="s2">"d210a853-3361-527a-dc34-8f6b310ba77b"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Operation"</span><span class="p">:</span><span class="s2">"OperationTypeApply"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Info"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Who"</span><span class="p">:</span><span class="s2">"peter"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Version"</span><span class="p">:</span><span class="s2">"1.8.5"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Created"</span><span class="p">:</span><span class="s2">"2024-07-XXT16:38:55.21022Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Path"</span><span class="p">:</span><span class="s2">"peter-hello-tf1014-remote-backend/terraform/state-test/terraform.tfstate"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>            </div>
          </li>
          <li><code class="language-plaintext highlighter-rouge">apply</code>의 “Enter a value:”에 <code class="language-plaintext highlighter-rouge">yes</code>를 입력하여 apply하면 락이 해제됩니다. 이 상태에서 dynamodb를 확인하면 lock이 해제된것을 확인할 수 있습니다.
<img src="/assets/2024/t101-4th/20240704_terraform_w4_dynamo_unlock.png" alt="20240704_terraform_w4_dynamo_unlock.png" /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>S3 버저닝 정보 확인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># S3 버킷의 파일 확인</span>
<span class="nv">$ </span>aws s3 <span class="nb">ls </span>s3://<span class="nv">$MYBUCKET</span> <span class="nt">--recursive</span> <span class="nt">--human-readable</span> <span class="nt">--summarize</span>
<span class="c"># =&gt; 2024-07-07 01:50:50    1.7 KiB terraform/state-test/terraform.tfstate</span>
<span class="c"># </span>
<span class="c">#    Total Objects: 1</span>
<span class="c">#    Total Size: 1.7 KiB</span>
  
<span class="c"># 버저닝된 파일 확인</span>
<span class="nv">$ </span>aws s3api list-object-versions <span class="nt">--bucket</span> <span class="nv">$MYBUCKET</span> | jq
<span class="c"># =&gt; {</span>
<span class="c">#      "Versions": [</span>
<span class="c">#        {</span>
<span class="c">#          "ETag": "\"f223f4da33dcd26ee1ee736212d57604\"",</span>
<span class="c">#          ...</span>
<span class="c">#          "Key": "terraform/state-test/terraform.tfstate",</span>
<span class="c">#          "VersionId": "wMK8alO1E2luobYHL1Bqj4RdbV1rLrv3",</span>
<span class="c">#          "IsLatest": true,</span>
<span class="c">#          "LastModified": "2024-07-XXT16:50:50+00:00",</span>
<span class="c">#          ...</span>
<span class="c">#        },</span>
<span class="c">#        {</span>
<span class="c">#          "ETag": "\"16bd360e57c83dee7ad657086cc8fc49\"",</span>
<span class="c">#          ...</span>
<span class="c">#          "Key": "terraform/state-test/terraform.tfstate",</span>
<span class="c">#          "VersionId": "8iagh8nWNMXeI.Ax5oEZJ38N684s5N3D",</span>
<span class="c">#          "IsLatest": false,</span>
<span class="c">#          "LastModified": "2024-07-XXT16:23:35+00:00",</span>
<span class="c">#          ...</span>
<span class="c">#        }</span>
<span class="c">#      ],</span>
<span class="c">#      "RequestCharged": null</span>
<span class="c">#    }</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">apply</code> 되어 상태가 변경 되면 S3에 버저닝된 파일이 생성됨을 확인 할 수 있습니다.</li>
      <li>S3 콘솔의 버킷에서도 버전 표시를 확인할 수 있습니다.
<img src="/assets/2024/t101-4th/20240704_terraform_w4_backend_s3.png" alt="20240704_terraform_w4_backend_s3" /></li>
    </ul>
  </li>
  <li>실습 리소스 삭제 : 리소스를 삭제하지 않으면 비용이 발생할 수 있습니다. 꼼꼼하게 잘 삭제하여 요금 폭탄을 막읍시다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># vpc 삭제 : 현재 vpc 디렉터리</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
  
<span class="c"># dynamoDB 삭제</span>
<span class="nv">$ </span><span class="nb">cd</span> ../dynamodb
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
  
<span class="c"># S3 삭제</span>
<span class="nv">$ </span><span class="nb">cd</span> ../s3_backend
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Error : (버킷이 비어있지 않다며 오류 발생합니다.)</span>
  
<span class="c"># 버킷 내용을 먼저 삭제 합니다.</span>
<span class="nv">$ </span>aws s3api delete-objects <span class="se">\</span>
    <span class="nt">--bucket</span> <span class="nv">$MYBUCKET</span> <span class="se">\</span>
    <span class="nt">--delete</span> <span class="s2">"</span><span class="si">$(</span>aws s3api list-object-versions <span class="se">\</span>
    <span class="nt">--bucket</span> <span class="s2">"</span><span class="nv">$MYBUCKET</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--output</span><span class="o">=</span>json <span class="se">\</span>
    <span class="nt">--query</span><span class="o">=</span><span class="s1">'{Objects: Versions[].{Key:Key,VersionId:VersionId}}'</span><span class="si">)</span><span class="s2">"</span>
  
<span class="c"># S3 버킷에 삭제마커 삭제</span>
<span class="nv">$ </span>aws s3api delete-objects <span class="nt">--bucket</span> <span class="nv">$MYBUCKET</span> <span class="se">\</span>
    <span class="nt">--delete</span> <span class="s2">"</span><span class="si">$(</span>aws s3api list-object-versions <span class="nt">--bucket</span> <span class="s2">"</span><span class="nv">$MYBUCKET</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--query</span><span class="o">=</span><span class="s1">'{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}'</span><span class="si">)</span><span class="s2">"</span>
  
<span class="c"># S3 삭제</span>
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="테라폼-백엔드의-단점">테라폼 백엔드의 단점</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">backend</code> 블록에는 변수나 참조를 사용할 수 없습니다.</li>
  <li>따라서 S3 버킷 이름, 리전, DynamoDB 테이블 이름을 하드코딩해야 합니다. 심지어 key 값은 중복이 되면 안 되며 고유해야 합니다.</li>
  <li>하지만 partial configuration 을 사용하여 일부 매개 변수를 전달하여 사용할 수 있습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># backend.hcl</span>
<span class="nx">bucket</span> <span class="err">=</span> <span class="s2">"terraform-up-and-running-state"</span>
<span class="nx">region</span> <span class="err">=</span> <span class="s2">"us-east-2"</span>
<span class="nx">dynamodb_table</span> <span class="err">=</span> <span class="s2">"terraform-Up-and-running-locks"</span>
<span class="nx">encrypt</span> <span class="err">=</span> <span class="kc">true</span> 
</code></pre></div>    </div>
    <ul>
      <li>이 경우에도 모듈마다 다른 key 값을 가져야 하므로 key 매개 변수는 테라폼 코드에 있어야 합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">backend</span> <span class="s2">"s3"</span> <span class="p">{</span>
    <span class="nx">key</span> <span class="p">=</span> <span class="s2">"example/terraform.tfstate"</span>
  <span class="p">}</span>
<span class="p">}</span>   
</code></pre></div>        </div>
      </li>
      <li>부분적으로 구성한 것을 사용하려면 <code class="language-plaintext highlighter-rouge">terraform init -backend-config=backend.hcl</code> 명령을 사용합니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="nt">-backend-config</span><span class="o">=</span>backend.hcl
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>이러한 단점을 보완해주는 오픈 소스 테라그런트(Terragrunt)가 있습니다. 다음 <a href="https://terragrunt.gruntwork.io/">링크</a>를 참고하십시오.</li>
</ul>

<h3 id="워크스페이스">워크스페이스</h3>

<ul>
  <li>인프라를 구축할때는 dev(개발), stage(스테이지), prod(프로덕션) 등 개발 단계별로 각각 다른 환경을 구축해야 할 필요가 있습니다.</li>
  <li>이러한 환경을 구분하기 위해서는 파일 레이아웃을 사용하여 격리하거나 테라폼의 워크스페이스 기능을 사용할 수 있습니다.</li>
  <li>파일 레이아웃을 이용한 격리 (Isolation via file layout)
    <ul>
      <li>파일 레이아웃을 사용하여 각 환경별로 디렉터리를 나누어 구성하면 각 환경별로 구성을 분리할 수 있습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree
<span class="c"># =&gt; .</span>
<span class="c">#    ├── common</span>
<span class="c">#    │   └── variables.tf</span>
<span class="c">#    ├── dev</span>
<span class="c">#    │   ├── vpc</span>
<span class="c">#    │   │   ├── main.tf</span>
<span class="c">#    │   │   └── variables.tf</span>
<span class="c">#    │   ├── main.tf</span>
<span class="c">#    │   └── variables.tf</span>
<span class="c">#    ├── prod</span>
<span class="c">#    │   ├── vpc</span>
<span class="c">#    │   │   ├── main.tf</span>
<span class="c">#    │   │   └── variables.tf</span>
<span class="c">#    │   ├── main.tf</span>
<span class="c">#    │   └── variables.tf</span>
<span class="c">#    └── stage</span>
<span class="c">#        ├── vpc</span>
<span class="c">#        │   ├── main.tf</span>
<span class="c">#        │   └── variables.tf</span>
<span class="c">#        ├── main.tf</span>
<span class="c">#        └── variables.tf</span>
</code></pre></div>        </div>
      </li>
      <li>환경별로 완전히 독립시켜 원하는 데로 구성할 수 있는 강력한 방법이지만, 
동일한 파일도 환경별로 복사해야 할 수 있으며, 따라서 리소스 수가 많아지면 관리가 어려울 수 있습니다.</li>
      <li>공용 .tf 파일을 만들어서 각 환경별로 사용하면 중복을 줄일 수 있습니다.</li>
    </ul>
  </li>
  <li>테라폼 워크스페이스 기능을 통한 격리 (Isolation via workspaces)
    <ul>
      <li>동일한 구성에서 빠르고 격리된 환경을 만들 수 있습니다.</li>
      <li>실습
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 현재 워크스페이스 목록 확인</span>
<span class="nv">$ </span>terraform workspace list 
<span class="c"># =&gt; * default</span>
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">main.tf</code> 생성
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"peter_srv1"</span> <span class="p">{</span>
  <span class="nx">ami</span>           <span class="p">=</span> <span class="s2">"ami-0ea4d4b8dc1e46212"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>            </div>
          </li>
          <li>실행
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
      
<span class="nv">$ </span>terraform state list 
      
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq <span class="nt">-r</span> <span class="s1">'.resources[0].instances[0].attributes.public_ip'</span>
<span class="c"># =&gt; 43.201.149.141</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq <span class="nt">-r</span> <span class="s1">'.resources[0].instances[0].attributes.private_ip'</span>
<span class="c"># =&gt; 172.31.8.91</span>
      
<span class="c"># 워크스페이스 확인</span>
<span class="nv">$ </span>terraform workspace list
<span class="c"># =&gt; * default</span>
      
<span class="c"># graph 확인</span>
<span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
</code></pre></div>            </div>

            <svg width="173pt" height="44pt" viewBox="0.00 0.00 173.25 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<polygon fill="white" stroke="none" points="-4,4 -4,-40 169.25,-40 169.25,4 -4,4" />
<!-- aws_instance.peter_srv1 -->
<g id="node1" class="node">
<polygon fill="none" stroke="black" points="165.25,-36 0,-36 0,0 165.25,0 165.25,-36" />
<text text-anchor="middle" x="82.62" y="-12.2" font-family="sans-serif" font-size="14.00">aws_instance.peter_srv1</text>
</g>
</g>
</svg>
          </li>
          <li>신규 워크스페이스 생성
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 새 작업 공간 workspace 생성 : mywork1</span>
<span class="nv">$ </span>terraform workspace new mywork1
<span class="nv">$ </span>terraform workspace show               
<span class="c"># =&gt; mywork1</span>
      
<span class="c"># 서브 디렉터리 확인</span>
<span class="nv">$ </span>tree terraform.tfstate.d
<span class="c"># =&gt; terraform.tfstate.d</span>
<span class="c">#    └── mywork1</span>
      
<span class="c"># plan 시 새로운 작업공간이라서 별도의 상태파일을 사용하여 리소스를 생성하는 계획이 만들어집니다.</span>
<span class="nv">$ </span>terraform plan
<span class="c"># =&gt; ...</span>
<span class="c">#    Plan: 1 to add, 0 to change, 0 to destroy.</span>
      
<span class="c"># apply 해보겠습니다.</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
            
<span class="c"># 워크스페이스 확인</span>
<span class="nv">$ </span>terraform workspace list
<span class="c"># =&gt;   default</span>
<span class="c">#    * mywork1</span>
      
<span class="c"># 상태 파일을 확인합니다.</span>
<span class="c"># default(기본) 워크스페이스의 상태 파일은 terraform.tfstate이고, mywork1 워크스페이스의 상태 파일은 terraform.tfstate.d/mywork1/terraform.tfstate 로 생성됩니다.</span>
      
<span class="c"># default 워크스페이스의 상태 파일에서 ip 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq <span class="nt">-r</span> <span class="s1">'.resources[0].instances[0].attributes.public_ip'</span>
<span class="c"># =&gt; 43.201.149.141          </span>
      
<span class="c"># mywork1 워크스페이스의 상태 파일에서 ip 확인</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate.d/mywork1/terraform.tfstate | jq <span class="nt">-r</span> <span class="s1">'.resources[0].instances[0].attributes.public_ip'</span>
<span class="c"># =&gt; 13.125.64.96</span>
      
<span class="c"># graph 확인</span>
<span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
            
<span class="c"># 새 작업 공간 workspace 생성 : mywork2</span>
<span class="nv">$ </span>terraform workspace new mywork2
      
<span class="c"># 서브 디렉터리 확인</span>
<span class="nv">$ </span>tree terraform.tfstate.d
<span class="c"># =&gt; terraform.tfstate.d</span>
<span class="c">#    ├── mywork1</span>
<span class="c">#    │   └── terraform.tfstate</span>
<span class="c">#    └── mywork2</span>
      
<span class="c"># plan &amp; apply</span>
<span class="nv">$ </span>terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
      
<span class="c"># mywork2에서 apply 후 서브 디렉터리 확인</span>
<span class="nv">$ </span>tree terraform.tfstate.d
<span class="c"># =&gt; terraform.tfstate.d</span>
<span class="c">#    ├── mywork1</span>
<span class="c">#    │   └── terraform.tfstate</span>
<span class="c">#    └── mywork2</span>
<span class="c">#        └── terraform.tfstate</span>
      
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate | jq <span class="nt">-r</span> <span class="s1">'.resources[0].instances[0].attributes.public_ip'</span>
<span class="c"># =&gt; 43.201.149.141</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate.d/mywork1/terraform.tfstate | jq <span class="nt">-r</span> <span class="s1">'.resources[0].instances[0].attributes.public_ip'</span>
<span class="c"># =&gt; 13.125.64.96</span>
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate.d/mywork2/terraform.tfstate | jq <span class="nt">-r</span> <span class="s1">'.resources[0].instances[0].attributes.public_ip'</span>
<span class="c"># =&gt; 13.124.42.129</span>
      
<span class="c"># workspace 정보 확인</span>
<span class="nv">$ </span>terraform workspace show
<span class="c"># =&gt; mywork2</span>
<span class="nv">$ </span>terraform workspace list
<span class="c"># =&gt;   default</span>
<span class="c">#      mywork1</span>
<span class="c">#    * mywork2</span>
      
<span class="c"># 실습 리소스 삭제</span>
<span class="nv">$ </span>terraform workspace <span class="k">select </span>default
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
      
<span class="nv">$ </span>terraform workspace <span class="k">select </span>mywork1
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
      
<span class="nv">$ </span>terraform workspace <span class="k">select </span>mywork2
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>      
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><strong>장점</strong>
        <ul>
          <li>하나의 <strong>루트 모듈</strong>에서 다른 환경을 위한 리소스를 동일한 <strong>테라폼 구성</strong>으로 프로비저닝하고 관리합니다.</li>
          <li>기존 프로비저닝된 환경에 영향을 주지 않고 변경 사항 실험 가능합니다.</li>
          <li>깃의 브랜치 전략처럼 동일한 구성에서 서로 다른 리소스 결과 관리 가능합니다.</li>
        </ul>
      </li>
      <li><strong>단점</strong>
        <ul>
          <li>State가 동일한 저장소(로컬 또는 백엔드)에 저장되어 State 접근 권한 관리가 불가능합니다.</li>
          <li>모든 환경이 동일한 리소스를 요구하지 않을 수 있으므로 테라폼 구성에 분기 처리가 다수 발생 가능이 있습니다.</li>
          <li>프로비저닝 대상에 대한 인증 요소를 완벽히 분리할 수 없습니다.</li>
          <li>가장 <strong>큰 단점은 완벽한 격리가 불가능</strong>하다는 것입니다.
            <ul>
              <li>보완 방법
                <ol>
                  <li>해결하기 위해 루트 모듈을 별도로 구성하는 디렉터리 기반의 레이아웃을 사용</li>
                  <li>Terraform Cloud 환경의 워크스페이스를 활용</li>
                </ol>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="마치며">마치며</h2>

<p>이번 주에는 프로바이더와 상태에 대해 보다 자세히 살펴보았습니다.
3주 동안 막연하게 사용하던 프로바이더와 상태에 대해 좀더 명확하게 이해할 수 있었습니다.</p>

<p>상태 관리에 대해서는 실무에서 팀, 회사 단위에서 테라폼을 사용할때 어려움을 많이 겪을 수 있겠다 라는 생각이 들었습니다.
반복된 교육과 사용으로 내제화 되기전에는 시행 착오를 많이 거쳐야할 것 같습니다. 
이번 스터디를 통해서 상당수의 시행 착오는 단축할 수 있었던거 같습니다.</p>

<p>정말 좋은 스터디를 진행해 주시는 Gasida님과 실습을 만들어주신 악분님께 감사드립니다. :pray:</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[드디어 HCL 기본 문법 스터디가 끝나고 다른 주제로 넘어가게 되었습니다. 물론 HCL 문법을 계속 사용해야 하는 이상 지속적인 공부와 추가/변경되는 문법을 계속 팔로우 해야겠지만, 한 단계를 넘겼다는 느낌에 뿌듯합니다.]]></summary></entry><entry><title type="html">[T101 4기] 테라폼 기본 사용법 3/3</title><link href="https://sweetlittlebird.github.io/posts/2024-06-30-T101-Study-Terraform-Week-3/" rel="alternate" type="text/html" title="[T101 4기] 테라폼 기본 사용법 3/3" /><published>2024-06-30T02:08:00+09:00</published><updated>2024-06-30T02:08:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%203</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-06-30-T101-Study-Terraform-Week-3/"><![CDATA[<ul id="toc" class="section-nav">
</ul>

<h2 id="들어가며">들어가며</h2>

<p>테라폼 기초 입문 실습 스터디 3주차이고, 기본 사용법 마지막 주차입니다.
이번 주에도 학습해야 하는 내용이 많아서 부지런히 달려보겠습니다.
“테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="hcl-계속">HCL (계속)</h2>

<p>이번주에도 HCL(HashiCorp Configuration Language) 의 문법에 대해 알아보겠습니다.</p>

<h3 id="반복문-22">반복문 (2/2)</h3>

<h4 id="for_each">for_each</h4>

<ul>
  <li>반복문이며 선언된 key 값 개수만큼 리소스를 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">for_each</code> 는 <code class="language-plaintext highlighter-rouge">count</code> 와 비슷하지만, <code class="language-plaintext highlighter-rouge">count</code> 는 인덱스를 사용하고 <code class="language-plaintext highlighter-rouge">for_each</code> 는 키를 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">each</code> object 를 사용하여 <code class="language-plaintext highlighter-rouge">key</code> 와 <code class="language-plaintext highlighter-rouge">value</code> 를 사용할 수 있습니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">each.key</code> : <code class="language-plaintext highlighter-rouge">key</code> 값</li>
      <li><code class="language-plaintext highlighter-rouge">each.value</code> : <code class="language-plaintext highlighter-rouge">value</code> 값 (<code class="language-plaintext highlighter-rouge">set</code> 타입을 사용하면 <code class="language-plaintext highlighter-rouge">each.key</code> 와 같습니다.)</li>
    </ul>
  </li>
  <li>for_each 는 <strong><code class="language-plaintext highlighter-rouge">map</code>과 <code class="language-plaintext highlighter-rouge">set</code> 타입만을 허용</strong>합니다. 따라서 <code class="language-plaintext highlighter-rouge">map</code>과 <code class="language-plaintext highlighter-rouge">set</code> 타입이 아닌 표현식은 <code class="language-plaintext highlighter-rouge">tomap()</code>, <code class="language-plaintext highlighter-rouge">toset()</code> 등을 통해 변환해서 사용할 수 있습니다.</li>
  <li>실습 1. <code class="language-plaintext highlighter-rouge">for_each</code> 사용하기
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="c1"># map 타입으로 선언</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">tomap</span><span class="p">({</span>
    <span class="nx">a</span> <span class="p">=</span> <span class="s2">"content a"</span>
    <span class="nx">b</span> <span class="p">=</span> <span class="s2">"content b"</span>
  <span class="p">})</span>
  
  <span class="c1"># 파일 제목은 key 값으로 설정 (a, b)</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>

  <span class="c1"># 파일 내용은 value 값으로 설정 (content a, content b)</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>

<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="c1"># toset() 함수를 사용하여 set 타입으로 변환</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">toset</span><span class="p">([</span><span class="s2">"ccc"</span><span class="p">,</span> <span class="s2">"ddd"</span><span class="p">,</span> <span class="s2">"eee"</span><span class="p">])</span>
  
  <span class="c1"># 파일 제목은 key 값으로 설정</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
  
  <span class="c1"># 파일 내용은 value 값으로 설정 (set의 경우 value와 key가 같음)</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc["a"]</span>
<span class="c">#    local_file.abc["b"]</span>
<span class="c">#    local_file.def["ccc"]</span>
<span class="c">#    local_file.def["ddd"]</span>
<span class="c">#    local_file.def["eee"]</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.abc["a"]'</span> | terraform console
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.abc["a"].content'</span> | terraform console
<span class="c"># =&gt; "content a"</span>
    
<span class="nv">$ </span><span class="nb">cat </span>a.txt
<span class="c"># =&gt; content a</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.def["ccc"].content'</span> | terraform console
<span class="nv">$ </span><span class="nb">cat </span>ccc.txt
<span class="c"># =&gt; "ccc"   # key와 value가 같음을 확인할 수 있음  </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>실습 2. <code class="language-plaintext highlighter-rouge">variable</code> 블록을 사용해 선언된 변수를 사용하여 <code class="language-plaintext highlighter-rouge">local_file.abc</code> 리소스를 생성하고, <code class="language-plaintext highlighter-rouge">local_file.abc</code> 리소스를 사용하여 <code class="language-plaintext highlighter-rouge">local_file.def</code> 리소스를 생성합니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"names"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="p">=</span> <span class="s2">"content a"</span>
    <span class="nx">b</span> <span class="p">=</span> <span class="s2">"content b"</span>
    <span class="nx">c</span> <span class="p">=</span> <span class="s2">"content c"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">names</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="c1"># 앞에서 만든 local_file.abc 리소스를 사용</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span>  
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc["a"]</span>
<span class="c">#    local_file.abc["b"]</span>
<span class="c">#    local_file.abc["c"]</span>
<span class="c">#    local_file.def["a"]</span>
<span class="c">#    local_file.def["b"]</span>
<span class="c">#    local_file.def["c"]</span>
    
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-1</span> <span class="k">*</span>.txt
<span class="c"># =&gt; abc-a.txt</span>
<span class="c">#    abc-b.txt    </span>
<span class="c">#    abc-c.txt    </span>
<span class="c">#    def-a.txt    </span>
<span class="c">#    def-b.txt    </span>
<span class="c">#    def-c.txt</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.abc["a"].content'</span> | terraform console
<span class="c"># =&gt; "content a"    </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>실습 3. “실습 2”에서 <code class="language-plaintext highlighter-rouge">names</code> 변수의 b 값을 삭제하고 <code class="language-plaintext highlighter-rouge">terraform apply</code> 명령어를 실행합니다. 
<code class="language-plaintext highlighter-rouge">count</code>와는 달리 중간의 항목이 삭제되어도 제대로 동작하는것을 확인할 수 있습니다.</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"names"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="p">=</span> <span class="s2">"content a"</span>
    <span class="nx">c</span> <span class="p">=</span> <span class="s2">"content c"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">names</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="c1"># 앞에서 만든 local_file.abc 리소스를 사용</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span>  
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#      # local_file.abc["b"] will be destroyed</span>
<span class="c">#    ...</span>
<span class="c">#      # local_file.def["b"] will be destroyed</span>
<span class="c">#    ...</span>
<span class="c">#    Apply complete! Resources: 0 added, 0 changed, 2 destroyed.</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc["a"]</span>
<span class="c">#    local_file.abc["c"]</span>
<span class="c">#    local_file.def["a"]</span>
<span class="c">#    local_file.def["c"]</span>
    
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-1</span> <span class="k">*</span>.txt
<span class="c"># =&gt; abc-a.txt</span>
<span class="c">#    abc-c.txt</span>
<span class="c">#    def-a.txt</span>
<span class="c">#    def-c.txt    </span>
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">count</code>와는 다르게 중간의 항목이 삭제되어도 제대로 동작하여 키가 <code class="language-plaintext highlighter-rouge">b</code>인 것에 관련된 항목이 삭제되었음을 확인할 수 있습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="for-expression">for Expression</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">for</code> Expression은 <code class="language-plaintext highlighter-rouge">for</code> 문을 사용하여 <code class="language-plaintext highlighter-rouge">set</code>이나 <code class="language-plaintext highlighter-rouge">list</code>, <code class="language-plaintext highlighter-rouge">map</code>의 항목들에 대해 반복적으로 작업을 수행할 수 있습니다.</li>
  <li>python의 <code class="language-plaintext highlighter-rouge">list comprehension</code>과 비슷한 기능을 제공합니다.</li>
  <li>기본적인 사용법은 아래와 같습니다.
    <ul>
      <li>리턴 타입이 tuple 인 경우
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">for</span> <span class="err">&lt;항목의</span> <span class="err">변수명&gt;</span> <span class="nx">in</span> <span class="err">&lt;</span><span class="nx">set</span><span class="p">,</span> <span class="nx">list</span><span class="p">,</span> <span class="nx">map</span> <span class="err">등의</span> <span class="err">콜렉션&gt;</span> <span class="err">:</span> <span class="err">&lt;항목의</span> <span class="err">변수명을</span> <span class="err">가공하는</span> <span class="err">표현식&gt;</span><span class="p">]</span>
</code></pre></div>        </div>
      </li>
      <li>리턴 타입이 object 인 경우
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nx">for</span> <span class="err">&lt;항목의</span> <span class="err">변수명&gt;</span> <span class="nx">in</span> <span class="err">&lt;</span><span class="nx">set</span><span class="p">,</span> <span class="nx">list</span><span class="p">,</span> <span class="nx">map</span> <span class="err">등의</span> <span class="err">콜렉션&gt;</span> <span class="err">:</span> <span class="err">&lt;결과</span> <span class="err">키&gt;</span> <span class="p">=</span><span class="err">&gt;</span> <span class="err">&lt;결과</span> <span class="err">값&gt;</span><span class="p">}</span>
</code></pre></div>        </div>
        <p>리턴되는 키와 값은 <code class="language-plaintext highlighter-rouge">=&gt;</code> 로 구분합니다.</p>
      </li>
      <li>콜렉션이 <code class="language-plaintext highlighter-rouge">list</code> 유형인 경우 <code class="language-plaintext highlighter-rouge">&lt;항목의 변수명&gt;</code>이 <strong>하나인 경우 값</strong>을, <strong>두개인 경우 “,” (쉼표)로 구분하여, 앞의 인수가 인덱스, 뒤의 인수가 값</strong>을 반환합니다.
        <ul>
          <li>관용적으로 인덱스는 <code class="language-plaintext highlighter-rouge">i</code>, 값은 <code class="language-plaintext highlighter-rouge">v</code>로 표현합니다.
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
      
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tolist</span><span class="p">([</span><span class="s2">"aa"</span><span class="p">,</span> <span class="s2">"bb"</span><span class="p">,</span> <span class="s2">"cc"</span><span class="p">,</span> <span class="s2">"dd"</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [ "Aa", "Bb", "Cc", "Dd" ]    </span>
      
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tolist</span><span class="p">([</span><span class="s2">"aa"</span><span class="p">,</span> <span class="s2">"bb"</span><span class="p">,</span> <span class="s2">"cc"</span><span class="p">,</span> <span class="s2">"dd"</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">i</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [ "0 =&gt; Aa", "1 =&gt; Bb", "2 =&gt; Cc", "3 =&gt; Dd" ]    </span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>콜렉션이 <code class="language-plaintext highlighter-rouge">map</code> 유형인 경우 <code class="language-plaintext highlighter-rouge">&lt;항목의 변수명&gt;</code>이 <strong>하나인 경우 값</strong>을, <strong>두개인 경우 “,” (쉼표)로 구분하여, 앞의 인수가 키, 뒤의 인수가 값</strong>을 반환합니다.
        <ul>
          <li>관용적으로 키는 <code class="language-plaintext highlighter-rouge">k</code>, 값은 <code class="language-plaintext highlighter-rouge">v</code>로 표현합니다.
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>

<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [</span>
<span class="c1">#      "234",</span>
<span class="c1">#      "GILDONG"</span>
<span class="c1">#    ]</span>
            
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [</span>
<span class="c1">#      "AGE =&gt; 234",</span>
<span class="c1">#      "NAME =&gt; Gildong",</span>
<span class="c1">#    ]</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">if</code> 를 통해 특정 조건을 만족하는 값만 가공하여 리턴 할 수 있습니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
    
<span class="c1"># 짝수인 경우만 제곱한 값을 리턴</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tolist</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">pow</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span> <span class="nx">if</span> <span class="nx">v</span> <span class="err">%</span> <span class="mi">2</span> <span class="err">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="c1"># =&gt; [ 4, 16 ]</span>
    
<span class="c1"># 키가 "age"인 경우 제외하고 가공</span>
<span class="err">&gt;</span> <span class="p">{</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="nx">upper</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="nx">if</span> <span class="nx">k</span> <span class="err">!</span><span class="p">=</span> <span class="s2">"age"</span><span class="p">}</span>
<span class="c1"># =&gt; { "NAME" = "Gildong" }</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>실습
    <ul>
      <li>간단한 for 표현식 실습
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
    
<span class="c1"># 1. tuple 타입을 사용하여 for 표현식 사용</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">value</span> <span class="nx">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="err">:</span> <span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">value</span> <span class="p">*</span> <span class="nx">value</span><span class="p">)</span> <span class="p">]</span>
<span class="c1"># =&gt; [ 1, 2, 16, 512 ]</span>
    
<span class="c1"># 2. set 타입을 사용하여 for 표현식 사용</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">name</span> <span class="nx">in</span> <span class="nx">toset</span><span class="p">([</span><span class="s2">"gildong"</span><span class="p">,</span> <span class="s2">"sejong"</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"Hi, </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="k">}</span><span class="s2">!"</span> <span class="p">]</span>
<span class="c1"># =&gt; [ "Hi, Gildong!", "Hi, Sejong!", ]</span>
    
<span class="c1"># 3. map 타입을 사용하여 for 표현식 사용</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [</span>
<span class="c1">#      "AGE =&gt; 234",</span>
<span class="c1">#      "NAME =&gt; Gildong",</span>
<span class="c1">#    ]</span>
    
<span class="c1"># 4. 타입 확인</span>
<span class="err">&gt;</span> <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span><span class="err">)</span>
<span class="c1"># =&gt; tuple([</span>
<span class="c1">#      string,</span>
<span class="c1">#      string,</span>
<span class="c1">#    ])</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>악분님 for expression 실습</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># main.tf </span>
 <span class="k">variable</span> <span class="s2">"fruits_set"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">set</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>
   <span class="nx">description</span> <span class="p">=</span> <span class="s2">"fruit example"</span>
 <span class="p">}</span>
      
 <span class="k">variable</span> <span class="s2">"fruits_list"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>
   <span class="nx">description</span> <span class="p">=</span> <span class="s2">"fruit example"</span>
 <span class="p">}</span>
      
 <span class="k">variable</span> <span class="s2">"fruits_map"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">{</span><span class="s2">"first"</span><span class="err">:</span> <span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"second"</span><span class="err">:</span> <span class="s2">"banana"</span><span class="p">}</span>
   <span class="nx">description</span> <span class="p">=</span> <span class="s2">"fruit example"</span>
 <span class="p">}</span>  
</code></pre></div>        </div>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
      
 <span class="kd">var</span><span class="err">.</span><span class="nx">fruits_set</span>                                        <span class="c1"># =&gt; toset(["apple", "banana"]) </span>
 <span class="kd">var</span><span class="err">.</span><span class="nx">fruits_list</span>                                       <span class="c1"># =&gt; tolist(["apple", "banana"]) </span>
 <span class="kd">var</span><span class="err">.</span><span class="nx">fruits_map</span>                                        <span class="c1"># =&gt; tomap({"first" = "apple", "second" = "banana"})</span>
                                                            
 <span class="nx">type</span><span class="err">(</span><span class="kd">var</span><span class="err">.</span><span class="nx">fruits_set</span><span class="err">)</span>                                  <span class="c1"># =&gt; set(string)</span>
 <span class="nx">type</span><span class="err">(</span><span class="kd">var</span><span class="err">.</span><span class="nx">fruits_list</span><span class="err">)</span>                                 <span class="c1"># =&gt; list(string)</span>
 <span class="nx">type</span><span class="err">(</span><span class="kd">var</span><span class="err">.</span><span class="nx">fruits_map</span><span class="err">)</span>                                  <span class="c1"># =&gt; map(string)</span>
      
 <span class="c1"># for item in var.fruits_set: item                    # 오류 발생! []로 감싸야함 </span>
 <span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span>                    <span class="c1"># =&gt; ["apple", "banana"]</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span><span class="err">)</span>              <span class="c1"># =&gt; tuple([string, string])</span>
      
 <span class="c1"># {for item in var.fruits_set: item}                  # 오류 발생! {}로 감싸졌으나 결과 값이 key, value 형태가 아님</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span>       <span class="c1"># =&gt; { "apple" = "apple", "banana" = "banana" }</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span><span class="err">)</span> <span class="c1"># =&gt; object({apple: string, banana: string})</span>
      
 <span class="c1"># for item in var.fruits_list: item                   # 오류 발생! []로 감싸야함</span>
 <span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span>                   <span class="c1"># =&gt; ["apple", "banana"]</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span><span class="err">)</span>             <span class="c1"># =&gt; tuple([string, string])</span>
      
 <span class="c1"># {for item in var.fruits_list: item}                 # 오류 발생! {}로 감싸졌으나 결과 값이 key, value 형태가 아님</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span>      <span class="c1"># =&gt; { "0" = "apple", "1" = "banana" }</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">i</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span>                 <span class="c1"># =&gt; { "0" = "apple", "1" = "banana" }</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">{</span><span class="nx">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">i</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span><span class="err">)</span>           <span class="c1"># =&gt; object({0: string, 1: string})</span>
          
 <span class="c1"># for item in var.fruits_map: item                    # 오류 발생! []로 감싸야함</span>
 <span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span>                    <span class="c1"># =&gt; ["apple", "banana"]</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span><span class="err">)</span>              <span class="c1"># =&gt; tuple([string, string])</span>
          
 <span class="c1"># {for item in var.fruits_map: item}                  # 오류 발생! {}로 감싸졌으나 결과 값이 key, value 형태가 아님</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span>       <span class="c1"># =&gt; { "first" = "apple", "second" = "banana" }</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">k</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span>                  <span class="c1"># =&gt; { "first" = "apple", "second" = "banana" }</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">{</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">k</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span><span class="err">)</span>            <span class="c1"># =&gt; object({first: string, second: string}) </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="dynamic">dynamic</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">count</code>나 <code class="language-plaintext highlighter-rouge">for_each</code>를 사용하여 리소스 전체를 여러개 생성하는것 외에도 리소스 내부의 속성 블록을 동적으로 생성할 수 있습니다.</li>
  <li>예를 들어 archive 프로바이더의 <code class="language-plaintext highlighter-rouge">archive_file</code> 리소스의 <code class="language-plaintext highlighter-rouge">source</code> 속성에 여러 파일을 동적으로 지정할 수 있습니다.
    <ul>
      <li>dynamic을 사용하지 않았을 때
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"archive_file"</span> <span class="s2">"files"</span> <span class="p">{</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="s2">"zip"</span>
  <span class="nx">output_path</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/files.zip"</span>
    
  <span class="nx">source</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"hello a"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"a.txt"</span>
  <span class="p">}</span>
    
  <span class="nx">source</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"hello b"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"b.txt"</span>
  <span class="p">}</span>
    
  <span class="nx">source</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"hello c"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"c.txt"</span>
  <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div>        </div>
        <ul>
          <li>실행 후 확인
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show data.archive_file.files

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].filename"</span> | terraform console
<span class="c"># =&gt; "a.txt"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].content"</span> | terraform console
<span class="c"># =&gt; "hello a"      </span>
<span class="nv">$ </span>unzip files.zip
<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.txt
<span class="c"># =&gt; a.txt b.txt c.txt</span>
<span class="nv">$ </span><span class="nb">cat </span>a.txt
<span class="c"># =&gt; hello a</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>dynamic을 사용했을 때
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"files"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">object</span><span class="p">({</span> <span class="nx">content</span>  <span class="p">=</span> <span class="nx">string</span> <span class="p">}))</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
    <span class="s2">"a.txt"</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">content</span> <span class="p">=</span> <span class="s2">"hello a"</span> <span class="p">}</span>
    <span class="s2">"b.txt"</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">content</span> <span class="p">=</span> <span class="s2">"hello b"</span> <span class="p">}</span>
    <span class="s2">"c.txt"</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">content</span> <span class="p">=</span> <span class="s2">"hello c"</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">data</span> <span class="s2">"archive_file"</span> <span class="s2">"files"</span> <span class="p">{</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="s2">"zip"</span>
  <span class="nx">output_path</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/files.zip"</span>
    
  <span class="nx">dynamic</span> <span class="s2">"source"</span> <span class="p">{</span>
    <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">files</span>
    
    <span class="nx">content</span> <span class="p">{</span>
      <span class="nx">filename</span> <span class="p">=</span> <span class="nx">source</span><span class="p">.</span><span class="nx">key</span>
      <span class="nx">content</span>  <span class="p">=</span> <span class="nx">source</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>실행 후 확인
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show data.archive_file.files

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].filename"</span> | terraform console
<span class="c"># =&gt; "a.txt"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].content"</span> | terraform console
<span class="c"># =&gt; "hello a"      </span>
<span class="nv">$ </span>unzip files.zip
<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.txt
<span class="c"># =&gt; a.txt b.txt c.txt</span>
<span class="nv">$ </span><span class="nb">cat </span>a.txt
<span class="c"># =&gt; hello a</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>이와 같이 <code class="language-plaintext highlighter-rouge">dynamic</code>을 사용하면 반복되는 수가 많아져도 데이터만 바꾸면 되니 코드 중복을 줄일 수 있고, 유지보수가 용이해집니다.
    <ul>
      <li>또한 <code class="language-plaintext highlighter-rouge">dynamic</code>은 다음과 같이 <code class="language-plaintext highlighter-rouge">dynamic</code>안에 또 <code class="language-plaintext highlighter-rouge">dynamic</code>을 사용하여 중첩할 수 있어서 상당히 편리합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">...</span>
  <span class="nx">dynamic</span> <span class="s2">"origin_group"</span> <span class="p">{</span>
    <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">load_balancer_origin_groups</span>
    <span class="nx">content</span> <span class="p">{</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="nx">origin_group</span><span class="p">.</span><span class="nx">key</span>
  
      <span class="nx">dynamic</span> <span class="s2">"origin"</span> <span class="p">{</span>
        <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">origin_group</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">origins</span>
        <span class="nx">content</span> <span class="p">{</span>
          <span class="nx">hostname</span> <span class="p">=</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">hostname</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span> 
  <span class="err">...</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="조건문-conditional-expression">조건문 (Conditional Expression)</h3>
<ul>
  <li>조건문은 테라폼에서는 다음과 같이 3항 연산자 형태로 사용할 수 있습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;</span><span class="nx">condition</span><span class="err">&gt;</span> <span class="err">?</span> <span class="err">&lt;</span><span class="nx">condition</span><span class="err">이</span> <span class="err">참일때</span> <span class="err">값&gt;</span> <span class="err">:</span> <span class="err">&lt;</span><span class="nx">condition</span><span class="err">이</span> <span class="err">거짓일때</span> <span class="err">값&gt;</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">?</code>를 기준으로 좌측에는 조건이며, 우측에는 <code class="language-plaintext highlighter-rouge">:</code> 기호룰 기준으로 좌측은 조건에 대해 참일 때의 값, 우측은 거짓일 때의 값을 나타냅니다.</li>
      <li>즉 <code class="language-plaintext highlighter-rouge">?</code> 좌측의 조건이 참일때는 <code class="language-plaintext highlighter-rouge">:</code> 앞의 참 값을, 거짓 일때는 <code class="language-plaintext highlighter-rouge">:</code> 뒤의 거짓 값을 반환합니다.</li>
      <li>다음의 예에서 var.a 가 빈 문자열이 아니면 var.a를, 빈 문자열이면 “default”를 반환합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">...</span>
<span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">!=</span> <span class="s2">""</span> <span class="err">?</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">:</span> <span class="s2">"default"</span>
<span class="err">...</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>실습
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
  
<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">1</span> <span class="err">?</span> <span class="s2">"1과 1은 같다"</span> <span class="err">:</span> <span class="s2">"1과 1은 다르다"</span>
<span class="c1"># =&gt; "1과 1은 같다" </span>

<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">2</span> <span class="err">?</span> <span class="s2">"1과 2는 같다"</span> <span class="err">:</span> <span class="s2">"1과 2는 다르다"</span>
<span class="c1"># =&gt; "1과 2는 다르다"</span>
</code></pre></div>    </div>
  </li>
  <li>조건이 참일때의 값과 거짓일때의 값의 타입이 다를 경우, 테라폼은 자동으로 문자열 타입으로 변환하여 반환합니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>

<span class="err">&gt;</span> <span class="mi">3</span> <span class="err">==</span> <span class="mi">4</span> <span class="err">?</span> <span class="mi">3</span> <span class="err">:</span> <span class="mi">4</span>
<span class="c1"># =&gt; 4</span>
  
<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">1</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="s2">"two"</span>
<span class="c1"># =&gt; "1"</span>
  
<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">2</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="s2">"two"</span>
<span class="c1"># =&gt; "two"</span>
</code></pre></div>    </div>
    <p>위의 예제와 같이 1 == 1 일때 값이 숫자 1이지만 문자열 “1”을 반환함을 확인할 수 있습니다.</p>
  </li>
  <li>가능하면 명시적으로 타입을 지정하여 사용하는 것이 좋습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
  
<span class="err">&gt;</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="s2">"two"</span>            <span class="c1"># 비권장</span>
<span class="err">&gt;</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">?</span> <span class="s2">"1"</span> <span class="err">:</span> <span class="s2">"two"</span>          <span class="c1"># 권장</span>
<span class="err">&gt;</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">?</span> <span class="nx">tostring</span><span class="err">(</span><span class="mi">1</span><span class="err">)</span> <span class="err">:</span> <span class="s2">"two"</span>  <span class="c1"># 권장</span>
</code></pre></div>    </div>
  </li>
  <li>조건문을 사용하여 리소스 생성 여부를 결정할 수 있습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"enable"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="kc">true</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">enable</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="mi">0</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"content abc"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc[0]</span>
<span class="nv">$ </span><span class="nb">cat </span>abc.txt
<span class="c"># =&gt; content abc</span>
    
<span class="c"># 변수의 default 보다 우선순위가 높은 환경변수를 통해 enable 변수를 false로 변경</span>
    
<span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_VAR_enable</span><span class="o">=</span><span class="nb">false</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; 없음</span>
<span class="nv">$ </span><span class="nb">cat </span>abc.txt
<span class="c"># =&gt; cat: abc.txt: No such file or directory </span>
</code></pre></div>        </div>
        <p>위와 같이 var.enable 변수 값에 따라 true 일때는 파일이 생성되고, false 일때는 파일이 생성되지 않음을 확인할 수 있습니다.</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="함수-function">함수 (Function)</h3>

<ul>
  <li>테라폼에서는 프로그래밍 언어 처럼 값의 유형을 변경하거나 가공할 수 있는 다양한 내장 함수를 제공합니다.</li>
  <li>전체 함수 목록은 <a href="https://www.terraform.io/docs/language/functions/index.html">공식문서</a>에서 확인할 수 있습니다.</li>
  <li>사용자 정의 함수는 지원하지 않으며, 숫자, 문자열, 컬렉션, 인코딩, 날짜, 파일, 네트워크 등 다양한 함수를 제공합니다.</li>
  <li>실습
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
  
<span class="err">&gt;</span> <span class="nx">upper</span><span class="err">(</span><span class="s2">"hello"</span><span class="err">)</span>                          <span class="c1"># =&gt; "HELLO"</span>
<span class="err">&gt;</span> <span class="nx">title</span><span class="err">(</span><span class="s2">"hello world"</span><span class="err">)</span>                    <span class="c1"># =&gt; "Hello World"</span>
<span class="err">&gt;</span> <span class="nx">max</span><span class="err">(</span><span class="mi">1</span><span class="err">,</span> <span class="mi">20</span><span class="err">,</span> <span class="mi">3</span><span class="err">,</span> <span class="mi">40</span><span class="err">,</span> <span class="mi">5</span><span class="err">)</span>                    <span class="c1"># =&gt; 40</span>
<span class="err">&gt;</span> <span class="nx">cidrnetmask</span><span class="err">(</span><span class="s2">"172.16.0.0/12"</span><span class="err">)</span>            <span class="c1"># =&gt; "255.240.0.0"</span>
<span class="err">&gt;</span> <span class="nx">cidrsubnet</span><span class="err">(</span><span class="s2">"1.1.1.0/24"</span><span class="err">,</span> <span class="mi">1</span><span class="err">,</span> <span class="mi">0</span><span class="err">)</span>          <span class="c1"># =&gt; "1.1.1.0/25"</span>
<span class="err">&gt;</span> <span class="nx">cidrsubnet</span><span class="err">(</span><span class="s2">"1.1.1.0/24"</span><span class="err">,</span> <span class="mi">1</span><span class="err">,</span> <span class="mi">1</span><span class="err">)</span>          <span class="c1"># =&gt; "1.1.1.128/25"</span>
<span class="err">&gt;</span> <span class="nx">cidrsubnets</span><span class="err">(</span><span class="s2">"10.1.0.0/16"</span><span class="err">,</span> <span class="mi">4</span><span class="err">,</span> <span class="mi">4</span><span class="err">,</span> <span class="mi">8</span><span class="err">,</span> <span class="mi">4</span><span class="err">)</span>  <span class="c1"># =&gt; tolist([</span>
                                          <span class="c1">#      "10.1.0.0/20",</span>
                                          <span class="c1">#      "10.1.16.0/20",</span>
                                          <span class="c1">#      "10.1.32.0/24",</span>
                                          <span class="c1">#      "10.1.48.0/20",</span>
                                          <span class="c1">#    ])  </span>
<span class="err">&gt;</span> <span class="nx">timestamp</span><span class="err">()</span>                             <span class="c1"># =&gt; "2024-06-27T14:00:00Z"</span>
<span class="err">&gt;</span> <span class="s2">"</span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="s2">"hello world again"</span><span class="p">)</span><span class="k">}</span><span class="s2">!!"</span>       <span class="c1"># =&gt; "Hello World Again!!"</span>
  
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">a</span> <span class="nx">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="err">:</span> <span class="nx">cidrsubnet</span><span class="p">(</span><span class="s2">"1.1.1.0/24"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">a</span><span class="p">)]</span>  <span class="c1"># =&gt; [</span>
                                                         <span class="c1">#      "1.1.1.0/26",</span>
                                                         <span class="c1">#      "1.1.1.64/26",</span>
                                                         <span class="c1">#      "1.1.1.128/26",</span>
                                                         <span class="c1">#      "1.1.1.192/26",</span>
                                                         <span class="c1">#    ]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="프로비저너-provisioner">프로비저너 (provisioner)</h3>
<ul>
  <li>프로비저너는 리소스가 생성된 후에 리소스에 대한 추가적인 설정이나 초기화 작업을 수행하는 기능입니다.</li>
  <li>프로바이더로 실행되지 않는 명령어 실행과 파일 복사 같은 역할을 수행할 수 있습니다.</li>
  <li>단, 프로비저너를 통한 작업은 <strong>상태(state)가 관리 되지 않으며</strong>, <strong>프로비저닝에 대한 결과가 항상 같다고 보장할 수 없기에</strong>
다른 방안이 없을때 최후의 수단으로만 사용해야 합니다.
    <ul>
      <li>프로비저너의 대안
        <ul>
          <li>AWS EC2의 경우 테라폼 코드 <code class="language-plaintext highlighter-rouge">user_data</code> 사용
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="err">...</span>
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>           <span class="p">=</span> <span class="s2">"..."</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>
      
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
  #!/bin/bash
  echo "Hello, World" &gt; index.html
  nohup busybox httpd -f -p 8080 &amp;
</span><span class="no">  EOF
</span><span class="p">}</span>   
</code></pre></div>            </div>
          </li>
          <li><a href="https://developer.hashicorp.com/terraform/tutorials/provision/cloud-init">cloud-init</a>,
<a href="https://developer.hashicorp.com/terraform/tutorials/provision/packer">packer</a>,
<a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/connection">provisioner connections</a> 등을 사용</li>
          <li>별도의 설정 관리툴 사용 (Ansible, Chef, Puppet 등)</li>
        </ul>
      </li>
      <li>이전에는 <code class="language-plaintext highlighter-rouge">local-exec</code> 프로비저너를 통해서 ansible과 연동하여 인프라 프로비저닝 후 구성을 관리하였으나, 
최근에는 이를 개선하여 <a href="https://registry.terraform.io/providers/ansible/ansible/latest/docs">terraform-provider-ansible</a>을 사용합니다.</li>
    </ul>
  </li>
</ul>

<h4 id="local-exec-프로비저너">local-exec 프로비저너</h4>
<ul>
  <li>테라폼이 실행되는 로컬에서 실행되는 명령어를 실행할 수 있습니다.</li>
  <li>리눅스나 윈도우 등 실행 환경에 맞게 커맨드를 정의해야 하며, 다음의 인수 값을 사용합니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">command</code> (필수) : 실행할 명령어를 정의합니다. «EOF를 사용하여 여러줄로 정의할 수 있습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">working_dir</code> (선택) : 명령어를 실행할 디렉토리를 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">interpreter</code> (선택) : 배열로 명령어를 실행할 인터프리터를 지정합니다. 첫번째 인수는 인터프리터 명령어 이름이고, 두번째 부터는 인수 값입니다.</li>
      <li><code class="language-plaintext highlighter-rouge">environment</code> (선택) : 실행시의 환경 변수에 추가적인 환경 변수를 설정합니다. key = value 형태로 정의합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">on_failure</code> (선택) : 명령어 실행이 실패했을 때 실행할 명령어를 정의합니다.</li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>Unix/Linux/macOS
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="k">provisioner</span> <span class="s2">"local-exec"</span> <span class="p">{</span>
    <span class="nx">command</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
      echo "Hello, World $FOO"
</span><span class="no">      EOF
</span>    <span class="nx">interpreter</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"bash"</span><span class="p">,</span> <span class="s2">"-c"</span><span class="p">]</span>
    <span class="nx">working_dir</span> <span class="p">=</span> <span class="s2">"/tmp"</span>
    <span class="nx">environment</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">FOO</span> <span class="p">=</span> <span class="s2">"bar"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>실행결과
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    null_resource.example: Provisioning with 'local-exec'...</span>
<span class="c">#    null_resource.example (local-exec): Executing: ["bash" "-c" "          echo \"Hello, World $FOO\"\n"]</span>
<span class="c">#    null_resource.example (local-exec): Hello, World bar</span>
      
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show null_resource.example
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate 
</code></pre></div>            </div>
            <p>명령이 실행은 되나 상태 파일에는 프로비저닝에 대한 정보가 저장되지 않음을 확안 할 수 있습니다.</p>
          </li>
        </ul>
      </li>
      <li>Windows
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="k">provisioner</span> <span class="s2">"local-exec"</span> <span class="p">{</span>
    <span class="nx">command</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
      echo "Hello, World %FOO%"
</span><span class="no">      EOF
</span>    <span class="nx">interpreter</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"PowerShell"</span><span class="p">,</span> <span class="s2">"-Command"</span><span class="p">]</span>
    <span class="nx">working_dir</span> <span class="p">=</span> <span class="s2">"C:</span><span class="se">\\</span><span class="s2">windows</span><span class="se">\\</span><span class="s2">temp"</span>
    <span class="nx">environment</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">FOO</span> <span class="p">=</span> <span class="s2">"bar"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="원격지-연결">원격지 연결</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">remote-exec</code>와 <code class="language-plaintext highlighter-rouge">file</code> 프로비저너를 사용하여 원격지 서버에 명령어를 실행하거나 파일을 복사하려면 원격지 연결할 SSH 또는 WinRM (windows 서버의 경우) 연결 정의가 필요합니다.
    <ul>
      <li><a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/connection">참조 문서 링크</a></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">connection</code> 블록은 리소스 내에서 선언시 해당 블록 내의 프로비저너에서 공통으로 사용가능하며, 프로비저너 내에서 선언 되는 경우 해당 프로비저너에서만 사용 가능합니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="c1"># connection 블록으로 원격지 연결 정의</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"example1"</span> <span class="p">{</span>
    
  <span class="nx">connection</span> <span class="p">{</span>
    <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"ssh"</span>
    <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"root"</span>
    <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">root_password</span>
    <span class="nx">host</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">host</span>
  <span class="p">}</span>
    
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/myapp.conf"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/etc/myapp.conf"</span>
  <span class="p">}</span>
    
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/myapp.conf"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"C:/App/myapp.conf"</span>
      
    <span class="nx">connection</span> <span class="p">{</span>
        <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"winrm"</span>
        <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"Administrator"</span>
        <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">admin_password</span>
        <span class="nx">host</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">host</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>   
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">connection</code> 적용 인수와 설명</p>

    <table>
      <thead>
        <tr>
          <th>인수</th>
          <th>연결 타입</th>
          <th>설명</th>
          <th>기본값</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>type</td>
          <td>SSH/WinRM</td>
          <td>연결 유형으로 ssh 또는 winrm</td>
          <td>ssh</td>
        </tr>
        <tr>
          <td>user</td>
          <td>SSH/WinRM</td>
          <td>연결에 사용되는 사용자</td>
          <td>ssh: root, winrm: Administrator</td>
        </tr>
        <tr>
          <td>password</td>
          <td>SSH/WinRM</td>
          <td>연결에 사용되는 비밀번호</td>
          <td> </td>
        </tr>
        <tr>
          <td>host</td>
          <td>SSH/WinRM</td>
          <td>(필수) 연결 대상 주소</td>
          <td> </td>
        </tr>
        <tr>
          <td>port</td>
          <td>SSH/WinRM</td>
          <td>연결 대상의 타입별 사용 포트</td>
          <td>ssh: 22, winrm: 5985</td>
        </tr>
        <tr>
          <td>timeout</td>
          <td>SSH/WinRM</td>
          <td>연결 시도에 대한 대기 값</td>
          <td>5m</td>
        </tr>
        <tr>
          <td>script_path</td>
          <td>SSH/WinRM</td>
          <td>스크립트 복제 시 생성되는 경로</td>
          <td> </td>
        </tr>
        <tr>
          <td>private_key</td>
          <td>SSH</td>
          <td>연결 시 사용할 SSH key를 지정하며, password 인수보다 우선함</td>
          <td> </td>
        </tr>
        <tr>
          <td>certificate</td>
          <td>SSH</td>
          <td>서명된 CA 인증서로 사용 시 private_key와 함께 사용</td>
          <td> </td>
        </tr>
        <tr>
          <td>agent</td>
          <td>SSH</td>
          <td>ssh-agent를 사용해 인증하지 않는 경 우 false로 설정하며 Windows의 경우 Pageant만 사용 가능</td>
          <td> </td>
        </tr>
        <tr>
          <td>agent_identity</td>
          <td>SSH</td>
          <td>인증을 위한 ssh-agent의 기본 사용자</td>
          <td> </td>
        </tr>
        <tr>
          <td>host_key</td>
          <td>SSH</td>
          <td>원격 호스트 또는 서명된 CA의 연결을 확인 하는 데 사용되는 공개키</td>
          <td> </td>
        </tr>
        <tr>
          <td>target_platform</td>
          <td>SSH</td>
          <td>연결 대상 플랫폼으로 windows 또는 unix</td>
          <td>unix</td>
        </tr>
        <tr>
          <td>https</td>
          <td>WinRM</td>
          <td>true인 경우 HTTPS로 연결</td>
          <td>false</td>
        </tr>
        <tr>
          <td>insecure</td>
          <td>WinRM</td>
          <td>true인 경우 HTTPS 유효성 무시</td>
          <td>false</td>
        </tr>
        <tr>
          <td>use_ntlm</td>
          <td>WinRM</td>
          <td>true인 경우 NTLM 인증을 사용</td>
          <td>false</td>
        </tr>
        <tr>
          <td>cacert</td>
          <td>WinRM</td>
          <td>유효성 검증을 위한 CA 인증서</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>원격연결이 요구되는 프로비저너의 경우 스크립트 파일을 원격 시스템에 업로드하여 해당 시스템의 기본 쉘에서 실행하도록 하므로 
<code class="language-plaintext highlighter-rouge">script_path</code>에 적절한 위치를 지정해야 합니다. 경로는 난수인 %RAND% 경로가 포함되어 생성됩니다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unix/Linux/macOS : /tmp/terraform_%RAND%.sh
Windows(cmd) : C:/windows/temp/terraform_%RAND%.cmd
Windows(PowerShell) : C:/windows/temp/terraform_%RAND%.ps1
</code></pre></div>    </div>
  </li>
  <li>
    <p>베스천 호스트를 통한 연결의 경우 관련 인수를 제공합니다. <a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/connection#connecting-through-a-bastion-host-with-ssh">참고자료 링크</a></p>

    <table>
      <thead>
        <tr>
          <th>인수</th>
          <th>설명</th>
          <th>기본값</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>bastion_host</td>
          <td>설정하게 되면 배스천 호스트 연결이 활성화되며, 연결 대상 호스트를 지정</td>
          <td> </td>
        </tr>
        <tr>
          <td>bastion_host_key</td>
          <td>호스트 연결을 위한 공개키</td>
          <td> </td>
        </tr>
        <tr>
          <td>bastion_port</td>
          <td>배스천 호스트에 연결할 포트</td>
          <td>port 인수 값</td>
        </tr>
        <tr>
          <td>bastion_user</td>
          <td>배스천 호스트에 연결할 사용자</td>
          <td>user 인수 값</td>
        </tr>
        <tr>
          <td>bastion_password</td>
          <td>배스천 호스트 연결에 사용할 비밀번호</td>
          <td>password 인수 값</td>
        </tr>
        <tr>
          <td>bastion_private key</td>
          <td>배스천 호스트 연결에 사용할 SSH 키파일</td>
          <td>private key 인수 값</td>
        </tr>
        <tr>
          <td>bastion_certificate</td>
          <td>서명된 CA 인증서 내용으로 bastion_private_key와 함께 사용</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h4 id="file-프로비저너">file 프로비저너</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">file</code> 프로비저너는 로컬 파일이나 디렉터리를 원격지 서버로 복사하는 기능을 제공합니다.</li>
  <li>사용되는 인수
    <ul>
      <li><code class="language-plaintext highlighter-rouge">source</code> (선택) : 로컬 파일 또는 디렉터리의 경로를 지정하며 <strong>상대 경로 또는 절대 경로</strong>로 지정할 수 있습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">content</code> (선택) : 파일의 내용을 직접 지정할 수 있으며, <code class="language-plaintext highlighter-rouge">source</code>와 <code class="language-plaintext highlighter-rouge">content</code> 중 하나만 사용할 수 있습니다. 대상이 디렉터리인 경우 tf-file-content 파일로 생성되고, 대상이 파일인 경우 해당 파일에 내용이 기록됩니다.</li>
      <li><code class="language-plaintext highlighter-rouge">destination</code> (필수) : 원격지 서버에 복사될 파일 또는 디렉터리의 경로를 지정합니다. 항상 <strong>절대 경로</strong>를 지정해야 합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">destination</code> 지정시 주의할 점은 ssh 연결의 경우 디렉터리가 존재해야 하며, WinRM 연결의 경우 디렉터리가 존재하지 않으면 자동으로 생성합니다.</li>
  <li>또한 디렉터리를 대상으로 할 경우 <code class="language-plaintext highlighter-rouge">source</code> 경로에 따라 파일 또는 디렉터리로 복사됩니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">destination</code>이 /tmp 일 때 <code class="language-plaintext highlighter-rouge">source</code>가 디렉터리로 <code class="language-plaintext highlighter-rouge">/foo</code> 처럼 마지막에 <code class="language-plaintext highlighter-rouge">/</code> 가 없는 경우 대상 디렉터리에 지정된 디렉터리가 업로드 되어 /tmp/foo 형태로 업로드 됩니다.</li>
      <li><code class="language-plaintext highlighter-rouge">destination</code>이 /tmp 일 때 <code class="language-plaintext highlighter-rouge">source</code>가 디렉터리로 <code class="language-plaintext highlighter-rouge">/foo/</code> 처럼 마지막에 <code class="language-plaintext highlighter-rouge">/</code> 가 있는 경우 대상 디렉터리에 지정된 디렉터리가 업로드 되어 /tmp/foo 형태로 업로드 됩니다.</li>
    </ul>
  </li>
  <li>예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"foo"</span> <span class="p">{</span>    
  <span class="c1"># connection 블록으로 원격지 정의</span>
  <span class="nx">connection</span> <span class="p">{</span>
    <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"ssh"</span>
    <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"root"</span>
    <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">root_password</span>
    <span class="nx">host</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">host</span>
  <span class="p">}</span>
  
  <span class="c1"># myapp.conf 파일이 /etc/myapp.conf 로 업로드</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/myapp.conf"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/etc/myapp.conf"</span>
  <span class="p">}</span>
    
  <span class="c1"># content의 내용이 /tmp/file.log 파일로 생성</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">content</span>     <span class="p">=</span> <span class="s2">"ami used: ami"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/tmp/file.log"</span>
  <span class="p">}</span>
    
  <span class="c1"># configs.d 디렉터리가 /etc/configs.d 로 업로드</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/configs.d"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/etc"</span>
  <span class="p">}</span>
    
  <span class="c1"># apps/app1 디렉터리 내의 파일들만 D:/IIS/webapp1 디렉터리 내에 업로드</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"apps/app1/"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"D:/IIS/webapp1"</span>
  <span class="p">}</span>
<span class="p">}</span>  
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="remote_exec-프로비저너">remote_exec 프로비저너</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">remote-exec</code> 프로비저너는 원격지 서버에 명령어를 실행하는 기능을 제공합니다. 예를들어 AWS의 EC2 인스턴스를 생성하고 해당 VM에서 명령을 실행할 때 사용합니다.</li>
  <li>사용하는 인수는 다음과 같고, 상호 배타적으로 하나만 사용 가능합니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">inline</code> : 명령어에 대한 목록으로 [ ] 블록 내에 “ “ 로 묶인 다수의 명령을 , 로 구분하여 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">script</code> : 실행할 스크립트 파일의 경로를 지정합니다. 스크립트 파일은 로컬 파일로 지정하며, 원격지 서버로 복사되어 실행됩니다.</li>
      <li><code class="language-plaintext highlighter-rouge">scripts</code> : 실행할 스크립트 파일의 목록으로 [ ] 블록 내에 “ “ 로 묶인 다수의 파일을 , 로 구분하여 지정합니다. 마찬가지로 로컬 파일로 지정하며, 원격지 서버로 복사되어 실행됩니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">script</code>나 <code class="language-plaintext highlighter-rouge">scripts</code>는 인수를 지정할 수 없으므로, 인수가 필요한 경우 <code class="language-plaintext highlighter-rouge">file</code> 프로바이더로 스크립트를 업로드하고 <code class="language-plaintext highlighter-rouge">inline</code> 인수로 스크립트에 인수를 추가하여 실행합니다.</li>
  <li>예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="c1"># ...</span>
  
  <span class="c1"># Establishes connection to be used by all</span>
  <span class="c1"># generic remote provisioners (i.e. file/remote-exec)</span>
  <span class="nx">connection</span> <span class="p">{</span>
    <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"ssh"</span>
    <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"root"</span>
    <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">root_password</span>
    <span class="nx">host</span>     <span class="p">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="p">}</span>
  
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"script.sh"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/tmp/script.sh"</span>
  <span class="p">}</span>
  
  <span class="k">provisioner</span> <span class="s2">"remote-exec"</span> <span class="p">{</span>
    <span class="nx">inline</span> <span class="p">=</span> <span class="p">[</span>
      <span class="s2">"chmod +x /tmp/script.sh"</span><span class="p">,</span>
      <span class="s2">"/tmp/script.sh args"</span><span class="p">,</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="null_resource와-terraform_data">null_resource와 terraform_data</h3>
<h4 id="null_resource">null_resource</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">null_resource</code> 블록은 자체적으로는 아무것도 수행하지 않는 리소스를 생성할 때 사용합니다.
    <ul>
      <li>이런 리소스가 필요한 이유는 사용자가 의도적으로 프로비저닝 동작을 조율해야 하는 상황에서, 프로바이더가 제공하는 리소스 수명주기관리만으로는 해결하기 어려울 때 사용합니다.</li>
      <li>주로 사용되는 시나리오는 다음과 같습니다.
        <ul>
          <li>프로비저닝 수행 과정에서 명령어 실행</li>
          <li>프로비저너와 함께 사용</li>
          <li>모듈, 반복문, 데이터 소스, 로컬 변수와 함께 사용</li>
          <li>출력을 위한 데이터 가공</li>
        </ul>
      </li>
      <li>예제
        <ul>
          <li>다음 상황을 가정
            <ul>
              <li>AWS EC2 인스턴스를 프로비저닝하면서 웹서비스를 실행시키고 싶다.</li>
              <li>웹서비스 설정에는 노출되어야 하는 고정된 외부 IP가 포함된 구성이 필요하다. 따라서 aws_eip 리소스를 생성해야 한다.</li>
            </ul>
          </li>
          <li>AWS EC2 인스턴스를 프로비저닝하기 위해 aws_instance 리소스 구성 시 앞서 확인한 프로비저너를 활용하여 웹서비스를 실행하고자 한다</li>
          <li>1차 시도
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
      
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"instance"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"t101sg"</span>
      
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
      
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
      
<span class="p">}</span>
      
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="s2">"ami-0c9c942bd7bf113a2"</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">subnet_id</span>              <span class="p">=</span> <span class="s2">"subnet-dbc571b0"</span>  <span class="c1"># 각자 default VPC에 subnet ID 아무거나</span>
  <span class="nx">private_ip</span>             <span class="p">=</span> <span class="s2">"172.31.1.100"</span>
  <span class="nx">vpc_security_group_ids</span> <span class="p">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
      
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              echo "Hello, T101 Study" &gt; index.html
              nohup busybox httpd -f -p 80 &amp;
</span><span class="no">              EOF
      
</span>  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Single-WebSrv"</span>
  <span class="p">}</span>
      
  <span class="k">provisioner</span> <span class="s2">"remote-exec"</span> <span class="p">{</span>
    <span class="nx">inline</span> <span class="p">=</span> <span class="p">[</span>
      <span class="s2">"echo </span><span class="k">${</span><span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span><span class="k">}</span><span class="s2">"</span>
     <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
      
<span class="k">resource</span> <span class="s2">"aws_eip"</span> <span class="s2">"myeip"</span> <span class="p">{</span>
  <span class="c1">#vpc = true</span>
  <span class="nx">instance</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">associate_with_private_ip</span> <span class="p">=</span> <span class="s2">"172.31.1.100"</span>
<span class="p">}</span>
      
<span class="k">output</span> <span class="s2">"public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span>      
</code></pre></div>            </div>
            <ul>
              <li>aws_eip가 생성되는 고정된 IP를 할당하기 위해서는 대상인 aws_instance의 id값이 필요합니다.</li>
              <li>aws_instance의 프로비저너 동작에서는 aws_eip가 생성하는 속성 값인 public_ip가 필요합니다.</li>
              <li>apply시 aws_eip와 aws_instance가 서로를 참조하여 순환 참조 오류가 발생합니다.
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
<span class="nv">$ </span>terraform plan 
<span class="c"># =&gt; Error: Cycle: aws_eip.myeip, aws_instance.example</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
          <li>2차 시도
            <ul>
              <li>둘중의 하나의 실행 시점을 뒤로 미뤄야 합니다.</li>
              <li>이럴때 null_resource를 사용하여 둘 중 하나의 리소스를 뒤로 미뤄 순환 참조를 막을 수 있습니다.
                <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"instance"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"t101sg"</span>
        
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
        
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
        
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="s2">"ami-0c9c942bd7bf113a2"</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">subnet_id</span>              <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">private_ip</span>             <span class="p">=</span> <span class="s2">"172.31.0.100"</span>
  <span class="nx">key_name</span>               <span class="p">=</span> <span class="s2">"aws-ec2"</span> <span class="c1"># 각자 자신의 EC2 SSH Keypair 이름 지정</span>
  <span class="nx">vpc_security_group_ids</span> <span class="p">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
        
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              echo "Hello, T101 4th Study" &gt; index.html
              nohup busybox httpd -f -p 80 &amp;
</span><span class="no">              EOF
        
</span>  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Single-WebSrv"</span>
  <span class="p">}</span>
        
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"aws_eip"</span> <span class="s2">"myeip"</span> <span class="p">{</span>
  <span class="c1">#vpc = true</span>
  <span class="nx">instance</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">associate_with_private_ip</span> <span class="p">=</span> <span class="s2">"172.31.0.100"</span>
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"echomyeip"</span> <span class="p">{</span>
  <span class="k">provisioner</span> <span class="s2">"remote-exec"</span> <span class="p">{</span>
    <span class="nx">connection</span> <span class="p">{</span>
      <span class="nx">host</span> <span class="p">=</span> <span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span>
      <span class="nx">type</span> <span class="p">=</span> <span class="s2">"ssh"</span>
      <span class="nx">user</span> <span class="p">=</span> <span class="s2">"ubuntu"</span>
      <span class="nx">private_key</span> <span class="p">=</span>  <span class="nx">file</span><span class="p">(</span><span class="s2">"/Users/admin/.ssh/aws-ec2-key.cer"</span><span class="p">)</span> <span class="c1"># 각자 자신의 EC2 SSH Keypair 파일 위치 지정</span>
      <span class="c1">#password = "qwe123"</span>
    <span class="p">}</span>
    <span class="nx">inline</span> <span class="p">=</span> <span class="p">[</span>
      <span class="s2">"echo </span><span class="k">${</span><span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span><span class="k">}</span><span class="s2">;"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
        
<span class="k">output</span> <span class="s2">"public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span>
        
<span class="k">output</span> <span class="s2">"eip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The EIP of the Instance"</span>
<span class="p">}</span>
</code></pre></div>                </div>
              </li>
              <li>위와 같이 null_resource를 사용하여 aws_eip 리소스를 뒤로 미루고, aws_instance 리소스가 먼저 생성되도록 하여 순환 참조 오류를 해결할 수 있습니다.</li>
              <li>실행 결과
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Outputs:</span>
<span class="c">#    </span>
<span class="c">#    eip = "43.202.208.93"</span>
<span class="c">#    public_ip = "43.202.208.93"</span>
        
<span class="nv">$ </span>terraform state list

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_eip.myeip.private_ip"</span> | terraform console
<span class="c"># =&gt; "172.31.0.100"</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_eip.myeip.public_ip"</span> | terraform console
<span class="c"># =&gt; "43.202.208.93"</span>

<span class="nv">$ </span>terraform output
<span class="c"># =&gt; eip = "43.202.208.93"</span>
<span class="c">#    public_ip = "43.202.208.93" </span>
        
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<svg width="1076pt" height="206pt" viewBox="0.00 0.00 1075.75 206.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 202)">
<polygon fill="white" stroke="none" points="-4,4 -4,-202 1071.75,-202 1071.75,4 -4,4" />
<!-- aws_eip.myeip -->
<g id="node1" class="node">
<polygon fill="none" stroke="black" points="865,-36 759,-36 759,0 865,0 865,-36" />
<text text-anchor="middle" x="812" y="-12.2" font-family="sans-serif" font-size="14.00">aws_eip.myeip</text>
</g>
<!-- aws_instance.example -->
<g id="node2" class="node">
<polygon fill="none" stroke="black" points="645.75,-36 492.5,-36 492.5,0 645.75,0 645.75,-36" />
<text text-anchor="middle" x="569.12" y="-12.2" font-family="sans-serif" font-size="14.00">aws_instance.example</text>
</g>
<!-- aws_eip.myeip&#45;&gt;aws_instance.example -->
<g id="edge1" class="edge">
<path fill="none" stroke="black" d="M758.73,-18C729.15,-18 691.38,-18 657.42,-18" />
<polygon fill="black" stroke="black" points="657.58,-14.5 647.58,-18 657.58,-21.5 657.58,-14.5" />
</g>
<!-- aws_security_group.instance -->
<g id="node7" class="node">
<polygon fill="none" stroke="black" points="368.38,-36 178.38,-36 178.38,0 368.38,0 368.38,-36" />
<text text-anchor="middle" x="273.38" y="-12.2" font-family="sans-serif" font-size="14.00">aws_security_group.instance</text>
</g>
<!-- aws_instance.example&#45;&gt;aws_security_group.instance -->
<g id="edge2" class="edge">
<path fill="none" stroke="black" d="M492.1,-18C457.97,-18 417.14,-18 380.1,-18" />
<polygon fill="black" stroke="black" points="380.26,-14.5 370.26,-18 380.26,-21.5 380.26,-14.5" />
</g>
<!-- aws_subnet.peter_subnet -->
<g id="node8" class="node">
<polygon fill="none" stroke="black" points="358.62,-90 188.12,-90 188.12,-54 358.62,-54 358.62,-90" />
<text text-anchor="middle" x="273.38" y="-66.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet</text>
</g>
<!-- aws_instance.example&#45;&gt;aws_subnet.peter_subnet -->
<g id="edge3" class="edge">
<path fill="none" stroke="black" d="M492.1,-31.98C454.88,-38.82 409.69,-47.12 370.15,-54.39" />
<polygon fill="black" stroke="black" points="369.58,-50.94 360.37,-56.19 370.84,-57.83 369.58,-50.94" />
</g>
<!-- aws_internet_gateway.peter_igw -->
<g id="node3" class="node">
<polygon fill="none" stroke="black" points="379.25,-198 167.5,-198 167.5,-162 379.25,-162 379.25,-198" />
<text text-anchor="middle" x="273.38" y="-174.2" font-family="sans-serif" font-size="14.00">aws_internet_gateway.peter_igw</text>
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node9" class="node">
<polygon fill="none" stroke="black" points="131.5,-117 0,-117 0,-81 131.5,-81 131.5,-117" />
<text text-anchor="middle" x="65.75" y="-93.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_internet_gateway.peter_igw&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge4" class="edge">
<path fill="none" stroke="black" d="M192.43,-161.56C183.92,-158.97 175.47,-156.11 167.5,-153 146.54,-144.82 124.38,-133.3 106.2,-122.99" />
<polygon fill="black" stroke="black" points="107.99,-119.98 97.58,-118.02 104.49,-126.05 107.99,-119.98" />
</g>
<!-- aws_route.peter_defaultroute -->
<g id="node4" class="node">
<polygon fill="none" stroke="black" points="664.88,-184 473.38,-184 473.38,-148 664.88,-148 664.88,-184" />
<text text-anchor="middle" x="569.12" y="-160.2" font-family="sans-serif" font-size="14.00">aws_route.peter_defaultroute</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_internet_gateway.peter_igw -->
<g id="edge5" class="edge">
<path fill="none" stroke="black" d="M473.16,-170.53C446.93,-171.78 418.18,-173.15 390.88,-174.45" />
<polygon fill="black" stroke="black" points="391.03,-170.94 381.21,-174.91 391.36,-177.93 391.03,-170.94" />
</g>
<!-- aws_route_table.peter_rt -->
<g id="node5" class="node">
<polygon fill="none" stroke="black" points="356,-144 190.75,-144 190.75,-108 356,-108 356,-144" />
<text text-anchor="middle" x="273.38" y="-120.2" font-family="sans-serif" font-size="14.00">aws_route_table.peter_rt</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_route_table.peter_rt -->
<g id="edge6" class="edge">
<path fill="none" stroke="black" d="M473.16,-153.07C439.27,-148.45 401.16,-143.26 367.44,-138.67" />
<polygon fill="black" stroke="black" points="368.06,-135.22 357.68,-137.34 367.12,-142.16 368.06,-135.22" />
</g>
<!-- aws_route_table.peter_rt&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge7" class="edge">
<path fill="none" stroke="black" d="M190.52,-115.25C174.83,-113.19 158.47,-111.04 142.98,-109.01" />
<polygon fill="black" stroke="black" points="143.74,-105.58 133.37,-107.75 142.83,-112.52 143.74,-105.58" />
</g>
<!-- aws_route_table_association.peter_rtassociation -->
<g id="node6" class="node">
<polygon fill="none" stroke="black" points="723,-117 415.25,-117 415.25,-81 723,-81 723,-117" />
<text text-anchor="middle" x="569.12" y="-93.2" font-family="sans-serif" font-size="14.00">aws_route_table_association.peter_rtassociation</text>
</g>
<!-- aws_route_table_association.peter_rtassociation&#45;&gt;aws_route_table.peter_rt -->
<g id="edge8" class="edge">
<path fill="none" stroke="black" d="M414.8,-113.09C398.72,-114.57 382.75,-116.04 367.66,-117.43" />
<polygon fill="black" stroke="black" points="367.44,-113.93 357.8,-118.33 368.08,-120.9 367.44,-113.93" />
</g>
<!-- aws_route_table_association.peter_rtassociation&#45;&gt;aws_subnet.peter_subnet -->
<g id="edge9" class="edge">
<path fill="none" stroke="black" d="M414.8,-84.91C399.65,-83.51 384.59,-82.13 370.27,-80.81" />
<polygon fill="black" stroke="black" points="370.75,-77.34 360.47,-79.91 370.11,-84.31 370.75,-77.34" />
</g>
<!-- aws_security_group.instance&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge10" class="edge">
<path fill="none" stroke="black" d="M192.43,-36.44C183.92,-39.03 175.47,-41.89 167.5,-45 146.54,-53.18 124.38,-64.7 106.2,-75.01" />
<polygon fill="black" stroke="black" points="104.49,-71.95 97.58,-79.98 107.99,-78.02 104.49,-71.95" />
</g>
<!-- aws_subnet.peter_subnet&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge11" class="edge">
<path fill="none" stroke="black" d="M187.85,-83.1C172.93,-85.06 157.48,-87.09 142.82,-89.01" />
<polygon fill="black" stroke="black" points="142.73,-85.49 133.27,-90.26 143.64,-92.43 142.73,-85.49" />
</g>
<!-- null_resource.echomyeip -->
<g id="node10" class="node">
<polygon fill="none" stroke="black" points="1067.75,-36 901,-36 901,0 1067.75,0 1067.75,-36" />
<text text-anchor="middle" x="984.38" y="-12.2" font-family="sans-serif" font-size="14.00">null_resource.echomyeip</text>
</g>
<!-- null_resource.echomyeip&#45;&gt;aws_eip.myeip -->
<g id="edge12" class="edge">
<path fill="none" stroke="black" d="M900.68,-18C892.59,-18 884.48,-18 876.62,-18" />
<polygon fill="black" stroke="black" points="876.84,-14.5 866.84,-18 876.84,-21.5 876.84,-14.5" />
</g>
</g>
</svg>

<ul>
  <li><code class="language-plaintext highlighter-rouge">null_resource</code>는 정의된 속성이 <code class="language-plaintext highlighter-rouge">id</code>가 전부이므로, 선언된 내부의 구성이 변경되더라도 새로운 Plan 과정에서 실행 계획에 포함되지 못합니다.</li>
  <li>따라서 사용자가 <code class="language-plaintext highlighter-rouge">null_resource에</code> 정의된 내용을 강제로 다시 실행하기 위한 인수로 <code class="language-plaintext highlighter-rouge">trigger</code>가 제공됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">trigger</code>는 임의의 <code class="language-plaintext highlighter-rouge">string</code> 형태의 <code class="language-plaintext highlighter-rouge">map</code> 데이터를 정의하는데, 정의된 값이 변경되면 <code class="language-plaintext highlighter-rouge">null_resource</code> 내부에 정의된 행위를 다시 실행합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">trigger</code> 정의와 동작 예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"foo"</span> <span class="p">{</span>
  <span class="nx">triggers</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">ec2_id</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">bar</span><span class="p">.</span><span class="nx">id</span> <span class="c1"># instance의 id가 변경되는 경우 재실행</span>
  <span class="p">}</span>
  <span class="p">...</span><span class="err">생략</span><span class="p">...</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"bar"</span> <span class="p">{</span>
  <span class="nx">triggers</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">ec2_id</span> <span class="p">=</span> <span class="nx">time</span><span class="p">()</span> <span class="c1"># 테라폼으로 실행 계획을 생성할 떄마다 재실행</span>
  <span class="p">}</span>
  <span class="p">...</span><span class="err">생략</span><span class="p">...</span>
<span class="p">}</span>  
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="terraform_data">terraform_data</h4>
<ul>
  <li>테라폼 1.4 이후에는 <code class="language-plaintext highlighter-rouge">null_resource</code> 대신 <code class="language-plaintext highlighter-rouge">terraform_data</code>를 사용하여 아무 작업도 수행하지 않는 리소스 구현이 가능합니다.</li>
  <li>이후에는 가능한 <code class="language-plaintext highlighter-rouge">null_resource</code> 대신 <code class="language-plaintext highlighter-rouge">terraform_data</code>를 사용하는 것이 좋습니다.</li>
  <li>이 리소스 또한 자체적으로 아무것도 수행하지 않지만 <code class="language-plaintext highlighter-rouge">null_resource</code>는 <strong>별도의 프로바이더 구성이 필요</strong>하다는 점과 비교하여 추가 프로바이더 없이 테라폼 자체에 포함된 <strong>기본 수명주기 관리자</strong>가 제공된다는 것이 장점입니다.</li>
  <li>사용 시나리오는 기본 null_resourcr와 동일하며 강제 재실행을 위한 <code class="language-plaintext highlighter-rouge">trigger_replace</code>와 상태 저장을 위한 <code class="language-plaintext highlighter-rouge">input</code> 인수와 <code class="language-plaintext highlighter-rouge">input</code>에 저장된 값을 출력하는 <code class="language-plaintext highlighter-rouge">output</code> 속성이 제공됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">triggers_replace</code>에 정의되는 값이 기존 <code class="language-plaintext highlighter-rouge">map</code> 형태에서 <code class="language-plaintext highlighter-rouge">tuple</code>로 변경되어 쓰임이 더 간단해졌습니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">terraform_data</code> 리소스의 <code class="language-plaintext highlighter-rouge">trigger_replace</code> 정의와 동작 예제</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="c1"># ...</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"database"</span> <span class="p">{</span>
  <span class="c1"># ...</span>
<span class="p">}</span>
  
<span class="c1"># A use-case for terraform_data is as a do-nothing container</span>
<span class="c1"># for arbitrary actions taken by a provisioner.</span>
<span class="k">resource</span> <span class="s2">"terraform_data"</span> <span class="s2">"bootstrap"</span> <span class="p">{</span>
  <span class="nx">triggers_replace</span> <span class="p">=</span> <span class="p">[</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">web</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">database</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">]</span>
  
  <span class="k">provisioner</span> <span class="s2">"local-exec"</span> <span class="p">{</span>
    <span class="nx">command</span> <span class="p">=</span> <span class="s2">"bootstrap-hosts.sh"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"terraform_data"</span> <span class="s2">"foo"</span> <span class="p">{</span>
  <span class="nx">triggers_replace</span> <span class="p">=</span> <span class="p">[</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">bar</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">]</span>
  
  <span class="nx">input</span> <span class="p">=</span> <span class="s2">"world"</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"terraform_data_output"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">terraform_data</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="k">output</span>  <span class="c1"># 출력 결과는 "world"</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="moved-블록">moved 블록</h3>

<ul>
  <li>테라폼은 state에 기록되는 리소스의 이름이 변경되면 기존 리소스는 삭제되고, 새로운 리소스를 생성합니다.</li>
  <li>테라폼 리소스를 선언하다보면 이름을 변경해야 하는 상황이 발생되며 다음과 같은 예들이 있습니다.
    <ul>
      <li>리소스 이름 변경</li>
      <li><code class="language-plaintext highlighter-rouge">count</code>로 처리하던 반복문을 <code class="language-plaintext highlighter-rouge">for_each</code>로 변경</li>
      <li>리소스가 모듈로 이동하여 참조되는 주소가 변경</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">moved</code> 블록은 리소스의 이동을 표현하는 블록으로, 실제 리소스는 변경이 없으면서 테라폼에서 관리되는 이름만 변경되는것을 테라폼에게 알려주고
불필요한 리소스의 재생성을 방지합니다.</li>
  <li>예제
    <ul>
      <li>main.tf 생성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"a"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>실행
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span><span class="nb">cat </span>foo.bar
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.a"</span> | terraform console
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.a.id"</span> | terraform console
<span class="c"># =&gt; "4bf3e335199107182c6f7638efaad377acc7f452"</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>main.tf의 local_file의 이름을 a =&gt; b 로 변경
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"b"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>plan 확인시 기존 리소스 a를 제거하고 새로운 리소스 b를 생성하는 것을 확인할 수 있습니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform plan
<span class="c"># =&gt; ...</span>
<span class="c">#      # local_file.a will be destroyed</span>
<span class="c">#    ...</span>
<span class="c">#      # local_file.b will be created</span>
<span class="c">#    ...</span>
<span class="c">#    Plan: 1 to add, 0 to change, 1 to destroy.</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">moved</code> 블록을 사용하여 리소스의 이름 변경을 표현
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"b"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>

<span class="nx">moved</span> <span class="p">{</span>
  <span class="nx">from</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">a</span>
  <span class="nx">to</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>plan 과 apply시 제거나 생성이 없고 <code class="language-plaintext highlighter-rouge">id</code>도 <code class="language-plaintext highlighter-rouge">local_file.a</code> 일때와 동일합니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform plan
<span class="c"># =&gt; ... </span>
     Plan: 0 to add, 0 to change, 0 to destroy.
      
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.b.id"</span> | terraform console 
<span class="c"># =&gt; "4bf3e335199107182c6f7638efaad377acc7f452"</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">local_file.a</code>일때와 <code class="language-plaintext highlighter-rouge">local_file.b</code>일때의 <code class="language-plaintext highlighter-rouge">terraform.tfstate</code> 파일을 비교해보면 아래와 같습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>diff terraform.tfstate.a terraform.tfstate 
</code></pre></div>        </div>

        <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">4c4
</span><span class="gd">&lt;   "serial": 1,
</span><span class="p">---
</span><span class="gi">&gt;   "serial": 2,
</span><span class="p">16c16
</span><span class="gd">&lt;       "name": "a",
</span><span class="p">---
</span><span class="gi">&gt;       "name": "b",    
</span></code></pre></div>        </div>
        <p><code class="language-plaintext highlighter-rouge">name</code>만 <code class="language-plaintext highlighter-rouge">a</code>에서 <code class="language-plaintext highlighter-rouge">b</code>로 변경되었음을 확인할 수 있습니다.</p>
      </li>
      <li>마지막으로 <code class="language-plaintext highlighter-rouge">moved</code> 블록이 적용되면, <code class="language-plaintext highlighter-rouge">moved</code> 블록은 더이상 필요가 없기 때문에 삭제해서 리팩토링을 완료합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf  </span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"b"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>

<span class="c1"># moved {</span>
<span class="c1">#   from = local_file.a</span>
<span class="c1">#   to = local_file.b</span>
<span class="c1"># }</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="cli를-위한-시스템-환경-변수">CLI를 위한 시스템 환경 변수</h2>
<ul>
  <li>테라폼은 다양한 환경 변수를 사용하여 동작을 제어할 수 있습니다.</li>
  <li>로컬 작업환경 별 환경변수 지정 방법
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mac/리눅스/유닉스: <span class="nb">export</span> &lt;환경 변수 이름&gt;<span class="o">=</span>&lt;값&gt;
Windows CMD: <span class="nb">set</span> &lt;환경 변수 이름&gt;<span class="o">=</span>&lt;값&gt;
Windows PowerShell: <span class="nv">$Env</span>:&lt;환경 변수 이름&gt;<span class="o">=</span><span class="s1">'&lt;값&gt;'</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG</code> : 테라폼의 stderr 로그에 대한 레벨을 정의 합니다.
    <ul>
      <li>trace, debug, info, warn, error, off를 설정할 수 있고 관련 환경 변수가 없는 경우 off와 동일합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">TF_LOG</code>를 info로 설정하고 <code class="language-plaintext highlighter-rouge">terraform plan</code> 동작을 하면 테라폼 출력에 관련 로그가 출력됩니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_LOG</span><span class="o">=</span>info
<span class="nv">$ </span>terraform plan
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG_PATH</code> : 로그 출력 파일 위치 지정합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG_CORE</code> : TF_LOG와 별도로 테라폼 자체 코어에 대한 로깅 레벨 지정 또는 해제합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG_PROVIDER</code> : TF_LOG와 별도로 테라폼에서 사용하는 프로바이더에 대한 로깅 레벨 지정 또는 해제합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">TF_INPUT</code> : 값을 false 또는 0으로 설정하면 테라폼 실행 시 인수에 -input=false 를 추가한 것과 동일한 수행 결과를 얻을 수 있습니다.
    <ul>
      <li>단, <code class="language-plaintext highlighter-rouge">TF_INPUT=0</code>으로 하고 <code class="language-plaintext highlighter-rouge">terraform plan</code>을 실행했을때 입력변수를 반드시 입력 받아야 하는 경우 오류가 발생합니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ TF_INPUT</span><span class="o">=</span>0  terraform plan
<span class="c"># =&gt; Error: No value for required variable</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_VAR_name</code> : <code class="language-plaintext highlighter-rouge">TF_VAR_&lt;변수이름&gt;</code>을 사용하면 입력시 또는 <code class="language-plaintext highlighter-rouge">default</code>로 선언된 변수값을 대체합니다. (2주차 “변수 입력 방식과 우선 순위” 부분 참고)</li>
  <li><code class="language-plaintext highlighter-rouge">TF_CLI_ARGS</code> / <code class="language-plaintext highlighter-rouge">TF_CLI_ARGS_subcommand</code> : 테라폼 실행 시 추가할 인수를 정의합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># TF_CLI_ARGS="-input=false" terraform apply -auto-approve 는 terraform apply -input=false -auto-approve 와 같습니다.</span>
<span class="nv">$ TF_CLI_ARGS</span><span class="o">=</span><span class="s2">"-input=false"</span> terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Error: No value for required variable</span>
  
<span class="c"># TF_CLI_ARGS_apply로 인수를 정의하면 terraform apply 커맨드 수행 시에만 동작합니다.</span>
<span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_CLI_ARGS_apply</span><span class="o">=</span><span class="s2">"-input=false"</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; &lt;에러&gt;</span>
  
<span class="nv">$ </span>terraform plan
<span class="c"># =&gt; &lt;정상 계획 예측 출력&gt; </span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_DATA_DIR</code> : <code class="language-plaintext highlighter-rouge">State</code> 저장 백엔드 설정과 같은 작업 디렉터리별 데이터를 보관하는 위치를 지정합니다.
    <ul>
      <li>이 데이터는 <code class="language-plaintext highlighter-rouge">.terraform</code> 디렉터리 위치에 기록되지만 <code class="language-plaintext highlighter-rouge">TF_DATA_DIR</code>에 경로가 정의되면 기본 경로를 대체하여 사용됩니다.</li>
      <li>일관된 테라폼 사용을 위해서 해당 변수는 실행 시마다 일관되게 적용될 수 있도록 설정하는 것이 중요합니다.</li>
      <li>설정 값이 이전 실행 시에만 적용되는 경우 init 명령으로 수행된 모듈, 아티팩트 등의 파일을 찾지 못합니다.</li>
    </ul>
  </li>
</ul>

<h2 id="마치며">마치며</h2>
<p>지금까지 3주간에 걸처 테라폼 HCL의 기본 문법과 기능을 알아보았습니다.
내용도 많고 실습해볼것도 많고, 블로그도 써야하고 다소 힘들었지만 :cry:, 다음 주차 수업부터 실제 응용을 배울 생각을 하니 두근 거립니다.</p>

<p>이번 주도 과제가 무사히 통과되길 기도:pray:하며 이번 블로그를 마칩니다.</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[테라폼 기초 입문 실습 스터디 3주차이고, 기본 사용법 마지막 주차입니다. 이번 주에도 학습해야 하는 내용이 많아서 부지런히 달려보겠습니다. "테라폼으로 시작하는 IaC" 책을 기준으로 정리하였습니다.]]></summary></entry><entry><title type="html">[T101 4기] 테라폼 기본 사용법 2/3</title><link href="https://sweetlittlebird.github.io/posts/2024-06-23-T101-Study-Terraform-Week-2/" rel="alternate" type="text/html" title="[T101 4기] 테라폼 기본 사용법 2/3" /><published>2024-06-23T00:52:00+09:00</published><updated>2024-06-23T00:52:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%202</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-06-23-T101-Study-Terraform-Week-2/"><![CDATA[<ul id="toc" class="section-nav">
</ul>

<h2 id="들어가며">들어가며</h2>

<p>테라폼 기초 입문 실습 스터디 2주차 입니다.
1주차에 이어 테라폼의 기본 사용법에 대해 실습해보려 합니다.
이번 주에도 “테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="hcl-계속">HCL (계속)</h2>

<p>지난주에 이어서 HCL(HashiCorp Configuration Language) 의 문법에 대해 알아보겠습니다.</p>

<h3 id="테라폼-블록">테라폼 블록</h3>

<h4 id="data-블록">data 블록</h4>

<ul>
  <li>데이터 소스는 테라폼으로 정의되지 않은 외부 리소스와 저장된 정보를 참조할때 사용합니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">data</code> 블록 선언 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">data</span> <span class="s2">"&lt;프로바이더이름_리소스유형&gt;"</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
      <span class="err">&lt;인수&gt;</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <p>이때 인수는 데이터 소스를 참조할때 사용할 인수이며 아래의 “데이터 소스 참조 방법”에서의 속성과는 다른 값입니다.
  이 인수로 참조된 데이터의 속성 값을 아래의 방법으로 가져올 수 있습니다.</p>
  </li>
  <li>
    <p>데이터 소스 참조 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># 데이터 소스 참조</span>
  <span class="k">data</span><span class="err">.&lt;프로바이더이름</span><span class="nx">_</span><span class="err">리소스유형&gt;.&lt;이름&gt;.&lt;속성&gt;</span>  
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">data</code> 블록 사용 예시
    <ol>
      <li>현재 region에서 사용가능한 availability zone 정보를 가져오기
        <ul>
          <li>main.tf</li>
        </ul>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># main.tf</span>
 <span class="k">data</span> <span class="s2">"aws_availability_zones"</span> <span class="s2">"available_zones"</span> <span class="p">{</span>
     <span class="nx">state</span> <span class="p">=</span> <span class="s2">"available"</span>   <span class="c1"># 현재 region에서 사용가능한 availability zone 정보를 가져오기</span>
 <span class="p">}</span>
</code></pre></div>        </div>

        <ul>
          <li>실행 결과 확인</li>
        </ul>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># main.tf 적용</span>
 <span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
      
 <span class="c"># state 확인</span>
 <span class="nv">$ </span>terraform state list      
 <span class="c"># =&gt; data.aws_availability_zones.available_zones</span>
      
 <span class="c"># 테라폼 콘솔에서 확인</span>
 <span class="nv">$ </span>terraform console
 <span class="o">&gt;</span> <span class="c"># &lt;확인하고 싶은 속성&gt; </span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones       <span class="c"># =&gt; ...</span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones.id    <span class="c"># =&gt; "ap-northeast-2"</span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones.names <span class="c"># =&gt; AZ 이름 목록...</span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones.zone_ids <span class="c"># =&gt; AZ ID 목록...</span>
      
 <span class="c"># tip. echo &lt;확인하고 싶은 속성&gt; || terraform console 로 값 확인</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones"</span> | terraform console     <span class="c"># =&gt; ...</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.id"</span> | terraform console   <span class="c"># =&gt; "ap-northeast-2"</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.names"</span> | terraform console <span class="c"># =&gt; AZ 이름 목록...</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.zone_ids"</span> | terraform console <span class="c"># =&gt; AZ ID 목록...</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.zone_ids[0]"</span> | terraform console <span class="c"># =&gt; "apne2-az1"</span>
</code></pre></div>        </div>
      </li>
      <li>로컬 파일의 내용 읽기
        <ul>
          <li>main.tf</li>
        </ul>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># main.tf</span>
 <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
     <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"Hello world!!"</span>
     <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
 <span class="p">}</span>
        
 <span class="k">data</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
     <span class="nx">filename</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">filename</span>
 <span class="p">}</span>
        
 <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
     <span class="nx">content</span>  <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">content</span>
     <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
 <span class="p">}</span>
</code></pre></div>        </div>

        <ul>
          <li>
            <p>실행 결과 확인</p>

            <svg width="389pt" height="44pt" viewBox="0.00 0.00 389.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
              <polygon fill="white" stroke="none" points="-4,4 -4,-40 385,-40 385,4 -4,4" />
  <!-- data.local_file.abc -->
  <g id="node1" class="node">
              <polygon fill="none" stroke="black" points="254,-36 130,-36 130,0 254,0 254,-36" />
  <text text-anchor="middle" x="192" y="-12.2" font-family="sans-serif" font-size="14.00">data.local_file.abc</text>
  </g>
  <!-- local_file.abc -->
  <g id="node2" class="node">
              <polygon fill="none" stroke="black" points="94,-36 0,-36 0,0 94,0 94,-36" />
  <text text-anchor="middle" x="47" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
  </g>
  <!-- data.local_file.abc&#45;&gt;local_file.abc -->
  <g id="edge1" class="edge">
              <path fill="none" stroke="black" d="M129.53,-18C121.59,-18 113.49,-18 105.62,-18" />
  <polygon fill="black" stroke="black" points="105.82,-14.5 95.82,-18 105.82,-21.5 105.82,-14.5" />
  </g>
  <!-- local_file.def -->
  <g id="node3" class="node">
              <polygon fill="none" stroke="black" points="381,-36 290,-36 290,0 381,0 381,-36" />
  <text text-anchor="middle" x="335.5" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
  </g>
  <!-- local_file.def&#45;&gt;data.local_file.abc -->
  <g id="edge2" class="edge">
              <path fill="none" stroke="black" d="M289.73,-18C282.08,-18 273.96,-18 265.8,-18" />
  <polygon fill="black" stroke="black" points="265.81,-14.5 255.81,-18 265.81,-21.5 265.81,-14.5" />
  </g>
  </g>
  </svg>
          </li>
        </ul>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># main.tf 적용</span>
 <span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
        
 <span class="c"># state 확인</span>
 <span class="nv">$ </span>terraform state list      
 <span class="c"># =&gt; data.local_file.abc</span>
 <span class="c">#    local_file.abc</span>
 <span class="c">#    local_file.def</span>
        
 <span class="c"># graph 확인</span>
 <span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
       
 <span class="c"># 데이터 소스 참조 확인</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.local_file.abc.content"</span> | terraform console
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h4 id="variable-블록">variable 블록</h4>

<ul>
  <li>변수(variable)블록은 인프라를 구성하는데 필요한 속성 값을 정의해 코드의 변경 없이 여러 인프라를 생성하는데 사용합니다.</li>
  <li>테라폼에서의 variable 블록을 입력 변수, 즉 input variable라 합니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">variable</code> 블록 선언 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
      <span class="err">&lt;인수&gt;</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
      <span class="err">&lt;메타변수&gt;</span> <span class="p">=</span> <span class="err">&lt;메타변수</span> <span class="err">값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">source</code>, <code class="language-plaintext highlighter-rouge">version</code>, <code class="language-plaintext highlighter-rouge">providers</code> 등의 예약어는 변수이름으로 사용할 수 없습니다.</li>
    </ul>
  </li>
  <li>
    <p>변수 참조 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># 변수 참조</span>
  <span class="kd">var</span><span class="err">.&lt;이름&gt;</span>
  
  <span class="c1"># 배열인 경우 [&lt;인덱스&gt;] 로 참조</span>
  <span class="kd">var</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="err">&lt;인덱스&gt;</span><span class="p">]</span>
  
  <span class="c1"># 배열의 10번째 항목 참조 예시</span>
  <span class="kd">var</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>  
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="variable-블록에서-사용-가능한-메타변수">variable 블록에서 사용 가능한 메타변수</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">variable</code> 블록에서는 다음의 메타변수를 사용 가능합니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>메타변수</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>default</td>
      <td>기본값을 지정합니다. 기본값도 없고, 다른 방법들로 지정되지 않으면 대화식으로 사용자에게 묻습니다.</td>
    </tr>
    <tr>
      <td>type</td>
      <td>변수 유형을 지정합니다.</td>
    </tr>
    <tr>
      <td>description</td>
      <td>입력변수의 설명을 기입합니다.</td>
    </tr>
    <tr>
      <td>validation</td>
      <td>변수의 제약 조건을 부여하고 유효성 검사 규칙을 정의합니다. <a href="https://honglab.tistory.com/217">참고</a></td>
    </tr>
    <tr>
      <td>sensitive</td>
      <td>비밀번호 등의 민감한 변수임을 표시하고 출력문에서 값 노출을 제한합니다. <a href="https://daaa0555.tistory.com/371">참고</a></td>
    </tr>
    <tr>
      <td>nullable</td>
      <td>변수에 값이 없어도 됨을 지정합니다.</td>
    </tr>
  </tbody>
</table>

<h5 id="입력-변수-유형">입력 변수 유형</h5>

<table>
  <thead>
    <tr>
      <th>유형</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>string</td>
      <td>문자열을 나타냅니다.</td>
    </tr>
    <tr>
      <td>number</td>
      <td>숫자를 나타냅니다.</td>
    </tr>
    <tr>
      <td>bool</td>
      <td>true, false의 불리언 값을 나타냅니다.</td>
    </tr>
    <tr>
      <td>list(<유형>)</유형></td>
      <td>리스트를 나타냅니다.</td>
    </tr>
    <tr>
      <td>map(<유형>)</유형></td>
      <td>맵을 나타냅니다.</td>
    </tr>
    <tr>
      <td>set(<유형>)</유형></td>
      <td>집합을 나타냅니다.</td>
    </tr>
    <tr>
      <td>object({<인수 이름="">=<유형>, ...})</유형></인수></td>
      <td>객체를 나타냅니다.</td>
    </tr>
    <tr>
      <td>tuple([<유형>, ...])</유형></td>
      <td>튜플을 나타냅니다.</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>입력 변수 사용 예시
    <ol>
      <li><code class="language-plaintext highlighter-rouge">number</code> 변수 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"number"</span> <span class="p">{</span>
   <span class="nx">type</span>    <span class="p">=</span> <span class="nx">number</span>
   <span class="nx">default</span> <span class="p">=</span> <span class="mi">10</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">list</code> 변수 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"list"</span> <span class="p">{</span>
   <span class="nx">type</span>    <span class="p">=</span> <span class="nx">list</span>
   <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">"two"</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">list</code>의 값으로 number로 받는 조건 결합 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"list"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
   <span class="c1"># default = [1, "two", 3] 과 같이 지정된 number 타입이 아닌 경우 오류 발생       </span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>모든 값이 string 인 map 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"map"</span> <span class="p">{</span>
   <span class="nx">type</span>    <span class="p">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
       <span class="nx">key1</span> <span class="p">=</span> <span class="s2">"value1"</span>
       <span class="nx">key2</span> <span class="p">=</span> <span class="s2">"value2"</span>
   <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">object</code> 변수를 사용하여 복잡한 구조적 유형 (structural type) 작성 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"object_example"</span> <span class="p">{</span>
   <span class="nx">type</span> <span class="p">=</span> <span class="nx">object</span><span class="p">({</span>
       <span class="nx">name</span>    <span class="p">=</span> <span class="nx">string</span>
       <span class="nx">age</span>     <span class="p">=</span> <span class="nx">number</span>
       <span class="nx">tags</span>    <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
       <span class="nx">enabled</span> <span class="p">=</span> <span class="nx">bool</span>
   <span class="p">})</span>
        
   <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
       <span class="nx">name</span>    <span class="p">=</span> <span class="s2">"value1"</span>
       <span class="nx">age</span>     <span class="p">=</span> <span class="mi">42</span>
       <span class="nx">tags</span>    <span class="p">=</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]</span>
       <span class="nx">enabled</span> <span class="p">=</span> <span class="kc">true</span>
   <span class="p">}</span>
  <span class="p">}</span> 
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h5 id="유효성-검사">유효성 검사</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">variable</code> 선언시 변수 타입 이외에도 사용자 지정 유효성 검사를 추가할 수 있습니다.</li>
  <li>
    <p>유효성 검사 작성 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"image_id"</span> <span class="p">{</span>
    <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
    <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The id of the machine image (AMI) to use for the server."</span>
    
    <span class="nx">validation</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">image_id</span><span class="p">)</span> <span class="err">&gt;</span> <span class="mi">4</span>    <span class="c1"># true 또는 false를 반환하는 규칙 </span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"The image_id value must exceed 4."</span> <span class="c1"># false일 때 출력할 오류 메시지</span>
    <span class="p">}</span>
    
    <span class="nx">validation</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">can</span><span class="p">(</span><span class="nx">regex</span><span class="p">(</span><span class="s2">"^ami-"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">image_id</span><span class="p">))</span>  <span class="c1"># 정규 표현식을 사용한 예시</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"The image_id value must starting with </span><span class="se">\"</span><span class="s2">ami-</span><span class="se">\"</span><span class="s2">."</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">variable</code> 블록 내부에 <code class="language-plaintext highlighter-rouge">validation</code> 블록을 넣고, 그 안에 <code class="language-plaintext highlighter-rouge">condition</code>과 <code class="language-plaintext highlighter-rouge">error_message</code>를 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">condition</code> : 유효성 검사 조건을 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">error_message</code> : 조건이 만족하지 않을 때 출력할 오류 메시지를 지정합니다.</li>
      <li>확인
        <ul>
          <li>아래와 같이 조건에 맞지 않는 ami 입력시 유효성 검사를 만족하지 못하여 오류 메시지가 출력되는것을 확인할 수 있습니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform plan
  <span class="c"># =&gt; var.image_id</span>
  <span class="c">#      The id of the machine image (AMI) to use for the server.</span>
  <span class="c">#    </span>
  <span class="c">#      Enter a value: ami</span>
  <span class="c">#    ...</span>
  <span class="c">#    </span>
  <span class="c">#    The image_id value must exceed 4.</span>
  <span class="c">#    </span>
  <span class="c">#    This was checked by the validation rule at main.tf:5,7-17.</span>
  <span class="c">#</span>
  <span class="c">#    ...    </span>
  <span class="c">#    </span>
  <span class="c">#    The image_id value must starting with "ami-".</span>
  <span class="c">#    </span>
  <span class="c">#    This was checked by the validation rule at main.tf:10,7-17.</span>
</code></pre></div>            </div>
          </li>
          <li>유효성 검사 조건을 만족하는 ami-1234 입력시 정상적으로 실행됩니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform plan
  <span class="c"># =&gt; var.image_id</span>
  <span class="c">#    The id of the machine image (AMI) to use for the server.</span>
  <span class="c">#    </span>
  <span class="c">#    Enter a value: ami-1234</span>
  <span class="c">#    </span>
  <span class="c">#    local_file.abc: Refreshing state... [id=3ee66cf7a43f216ff7060c2bd85758424f7f18b3]</span>
  <span class="c">#    </span>
  <span class="c">#    No changes. Your infrastructure matches the configuration.</span>
  <span class="c">#    </span>
  <span class="c">#    Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.        </span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h5 id="sensitive-메타변수를-사용한-민감한-변수값-처리">sensitive 메타변수를 사용한 민감한 변수값 처리</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sensitive = true</code>를 <code class="language-plaintext highlighter-rouge">variable</code> 블록에 넣어서 해당 변수가 민감한 값을 갖고 있음을 지정할 수 있습니다.</li>
  <li>
    <p>민감한 변수값은 출력문에서 노출되지 않고 <code class="language-plaintext highlighter-rouge">(sensitive value)</code> 라는 내용으로 감춰집니다.</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="k">variable</span> <span class="s2">"my_password"</span> <span class="p">{</span>
      <span class="nx">default</span> <span class="p">=</span> <span class="s2">"supersecret"</span>
      <span class="nx">sensitive</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span> 
    
  <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">my_password</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li>확인
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># 1. terraform apply 실행시 my_password 변수값이 민감한 값으로 처리되어 출력됩니다.</span>
  <span class="nv">$ </span>terraform apply <span class="nt">--auto-approve</span>
  <span class="c"># =&gt; ...</span>
  <span class="c">#          + content              = (sensitive value)</span>
  <span class="c">#    ...</span>
      
  <span class="c"># 2. terraform console로 확인시에도 민감한 값으로 필터링 되어 출력됩니다.</span>
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
  <span class="c"># =&gt; (sensitive value)</span>
      
  <span class="c"># 3. 파일 내용은 실제 값으로 들어갑니다.</span>
  <span class="nv">$ </span><span class="nb">cat </span>abc.txt 
  <span class="c"># =&gt; supersecret</span>
      
  <span class="c"># 4. terraform.tfstate 파일은 실제값이 들어가 있습니다. .tfstate 파일을 안전하게 관리해야 할 필요가 있습니다.</span>
  <span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate| <span class="nb">grep</span> <span class="s2">"content"</span>
  <span class="c"># =&gt; "content": "supersecret",</span>
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">terraform.tfstate</code> 에서는 sensitive 값이 노출되므로 주의해야 합니다. <code class="language-plaintext highlighter-rouge">terraform.tfstate</code> 파일을 안전하게 관리하는 방법은 다음의 방법 등이 있습니다.
            <ol>
              <li>AWS S3 등의 외부 스토리지에 저장하고, 권한을 제한</li>
              <li>민감한 정보를 <code class="language-plaintext highlighter-rouge">variable</code>를 사용하지 않고 다른 방법으로 (예) 파일 등) 넘기거나, 일시적으로 사용하고 즉시 변경할 수 있는 경우 사용</li>
              <li>민감한 정보는 Terraform에 넘길때 암호화 하여 사용하고, provisioning시 복호화하여 사용</li>
            </ol>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h5 id="변수-입력-방식과-우선-순위">변수 입력 방식과 우선 순위</h5>

<ul>
  <li>변수 입력 방식은 다음과 같습니다. 아래로 갈 수록 우선순위가 높아집니다.
    <ol>
      <li>실행 후 대화식 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="c"># =&gt; var.my_var</span>
 <span class="c">#    Enter a value: abcd</span>
      
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "abcd"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">variable</code> 블록에 <code class="language-plaintext highlighter-rouge">default</code>로 지정된 값
        <ul>
          <li><code class="language-plaintext highlighter-rouge">main.tf</code> 작성
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="k">variable</span> <span class="s2">"my_var"</span> <span class="p">{</span>
      <span class="nx">default</span> <span class="p">=</span> <span class="s2">"default value"</span>
  <span class="p">}</span>
</code></pre></div>            </div>
          </li>
          <li>실행
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
  <span class="c"># =&gt; ...</span>
  <span class="c"># =&gt; Apply complete! Resources: 1 added, 0 changed, 1 destroyed.</span>
         
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
  <span class="c"># =&gt; "default value"</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>환경 변수로 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_VAR_my_var</span><span class="o">=</span><span class="s2">"환경변수"</span>
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "환경변수"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">terraform.tfvars</code> 파일을 통해 변수 파일로 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "terraform.tfvars 값"'</span> <span class="o">&gt;</span> terraform.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "terraform.tfvars 값"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">terraform.tfvars.json</code> 파일을 통해 변수 파일로 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'{ "my_var": "terraform.tfvars.json 값" }'</span> <span class="o">&gt;</span> terraform.tfvars.json
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "terraform.tfvars.json 값"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">*.auto.tfvars</code> 또는 <code class="language-plaintext highlighter-rouge">*.auto.tfvars.json</code> 을 통해 변수 파일로 입력
        <ul>
          <li>단, 파일명의 정렬 순서에 따라 <code class="language-plaintext highlighter-rouge">*.auto.tfvars</code> 파일간의 우선순위기 적용됩니다.</li>
        </ul>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "eeee.auto.tfvars 값"'</span> <span class="o">&gt;</span> eeee.auto.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "eeee.auto.tfvars 값"</span>

 <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "zzzz.auto.tfvars 값"'</span> <span class="o">&gt;</span> zzzz.auto.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "zzzz.auto.tfvars 값"</span>

 <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "aaaa.auto.tfvars 값"'</span> <span class="o">&gt;</span> aaaa.auto.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "zzzz.auto.tfvars 값"</span>
</code></pre></div>        </div>
        <ul>
          <li>위의 예제에서 보는것과 같이 정렬 순서에서 뒤로 갈 수록 우선순위가 높아집니다. z가 a나 e 보다 뒤이기 때문에 zzzz.auto.tfvars 값이 우선하게 적용됩니다.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">terraform apply</code> 시 <code class="language-plaintext highlighter-rouge">-var</code> 또는 <code class="language-plaintext highlighter-rouge">-var-file</code>로 파일 지정 명령행 인수 사용
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span> <span class="nt">-var</span><span class="o">=</span><span class="s1">'my_var=명령행 인수 값'</span> <span class="nt">-var</span><span class="o">=</span><span class="s2">"addtional_var=추가 변수 값"</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "명령행 인수 값"</span>
     
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var="-var-file 값"'</span> <span class="o">&gt;</span> varfiletest.txt
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span> <span class="nt">-var-file</span><span class="o">=</span>varfiletest.txt
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "-var-file 값"</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h4 id="locals-지역-값-블록">locals 지역 값 블록</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">locals</code> 블록은 테라폼 코드 내에서 재사용 가능한 지역 변수를 정의할 때 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">variable</code> 과는 달리 선언된 모듈 내에서만 사용 가능하며, 실행시에 입력받을 수 없습니다.</li>
  <li>단점으로는 실제 값에 대한 추적이 어려워 질 수 있다는 점입니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">locals</code> 블록 선언 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">locals</span> <span class="p">{</span>
      <span class="err">&lt;인수&gt;</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">source</code>, <code class="language-plaintext highlighter-rouge">version</code>, <code class="language-plaintext highlighter-rouge">providers</code> 등의 예약어는 변수이름으로 사용할 수 없습니다.</li>
    </ul>
  </li>
  <li>
    <p>참조 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># 변수 참조</span>
  <span class="kd">local</span><span class="err">.&lt;이름&gt;</span>
  
  <span class="c1"># 배열인 경우 [&lt;인덱스&gt;] 로 참조</span>
  <span class="kd">local</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="err">&lt;인덱스&gt;</span><span class="p">]</span>
  
  <span class="c1"># 배열의 10번째 항목 참조 예시</span>
  <span class="kd">local</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>  
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">locals</code> 블록 사용 예시
    <ul>
      <li><code class="language-plaintext highlighter-rouge">main.tf</code> 작성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="k">variable</span> <span class="s2">"prefix"</span> <span class="p">{</span>
      <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
      <span class="nx">default</span> <span class="p">=</span> <span class="s2">"hello"</span>
  <span class="p">}</span>
    
  <span class="nx">locals</span> <span class="p">{</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"terraform"</span>
      <span class="nx">content</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">prefix</span><span class="k">}</span><span class="s2"> </span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">name</span><span class="k">}</span><span class="s2">"</span>
      <span class="nx">my_info</span> <span class="p">=</span> <span class="p">{</span>
          <span class="nx">age</span> <span class="p">=</span> <span class="mi">20</span>
          <span class="nx">region</span> <span class="p">=</span> <span class="s2">"KR"</span>
      <span class="p">}</span>
      <span class="nx">my_nums</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
  <span class="p">}</span>
    
  <span class="nx">locals</span> <span class="p">{</span>
      <span class="nx">my_string</span> <span class="p">=</span> <span class="s2">"string </span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">content</span><span class="k">}</span><span class="s2">"</span>
      <span class="c1"># content = "content2" # 위의 locals에 등록되어서 로컬변수명이 중복되어 오류가 발생합니다.    </span>
  <span class="p">}</span>
      
  <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
      <span class="nx">content</span>  <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">content</span>
      <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>실행 결과 확인
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
        
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
  <span class="c"># =&gt; "hello terraform"</span>
    
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local.my_string"</span> | terraform console
  <span class="c"># =&gt; "string hello terraform"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="output-출력-값-블록">output 출력 값 블록</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">output</code> 블록은 테라폼 코드 프로비저닝 수행 후 결과 속성 값을 확인하는 용도로 사용합니다.</li>
  <li>출력 값은 다음의 용도로 사용할 수 있습니다.
    <ul>
      <li>루트 모듈에서 사용자가 확인하고자 하는 특정 속성 출력</li>
      <li>자식 모듈의 특정값을 정의하고 루트 모듈에서 결과를 참조</li>
      <li>루트 모듈 간의 결과를 원격으로 읽기 위한 접근 요소</li>
    </ul>
  </li>
  <li>output 블록 선언 방법
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">output</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
      <span class="nx">value</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
      <span class="err">&lt;메타변수&gt;</span> <span class="p">=</span> <span class="err">&lt;메타변수</span> <span class="err">값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="output-블록에서-사용-가능한-메타변수">output 블록에서 사용 가능한 메타변수</h5>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">output</code> 블록에서는 다음의 메타변수를 사용 가능합니다.</p>

    <table>
      <thead>
        <tr>
          <th>메타변수</th>
          <th>설명</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>description</td>
          <td>출력값의 설명을 기입합니다.</td>
        </tr>
        <tr>
          <td>sensitive</td>
          <td>비밀번호 등의 민감한 값임을 표시하고 출력문에서 값 노출을 제한합니다.</td>
        </tr>
        <tr>
          <td>depends_on</td>
          <td>value에 담길 값이 종속성이 있는 경우 지정하면 생성 순서가 조정됩니다.</td>
        </tr>
        <tr>
          <td>precondition</td>
          <td>출력전에 지정된 조건을 검증합니다.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>출력 값 사용 예시</p>
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="nx">locals</span> <span class="p">{</span>
    <span class="nx">content</span> <span class="p">=</span> <span class="s2">"local content"</span>
  <span class="p">}</span>
    
  <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">content</span><span class="k">}</span><span class="s2">"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="p">}</span>
    
  <span class="k">output</span> <span class="s2">"file_id"</span> <span class="p">{</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">id</span>
    <span class="nx">depends_on</span> <span class="p">=</span> <span class="p">[</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span> <span class="p">]</span>
  <span class="p">}</span>
    
  <span class="k">output</span> <span class="s2">"file_abspath"</span> <span class="p">{</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="nx">abspath</span><span class="p">(</span><span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">filename</span><span class="p">)</span>
    <span class="nx">description</span> <span class="p">=</span> <span class="s2">"파일의 절대 경로"</span>
  <span class="p">}</span>
    
  <span class="k">output</span> <span class="s2">"local_content"</span> <span class="p">{</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">content</span>
    <span class="nx">sensitive</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li>실행 결과</li>
    </ul>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">$</span> <span class="k">terraform</span> <span class="nx">apply</span> <span class="nx">-auto-approve</span>
  <span class="c1"># =&gt; ...</span>
  <span class="c1">#    Outputs:</span>
  <span class="c1">#    </span>
  <span class="c1">#    file_abspath = ".../week-2/mytest7-output/abc.txt"</span>
  <span class="c1">#    file_id = "094f587b52451d1d5f3ef42a921fc877d8b18c1b"</span>
  <span class="c1">#    local_content = &lt;sensitive&gt;</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h3 id="반복문-12">반복문 (1/2)</h3>

<ul>
  <li>list 형태의 값 목록이나 Key-Value 형태의 맵을 항목 만큼 반복하여 인프라 구성 정의를 항목 개수만큼 반복적으로 작성하지 않고,
  반복문을 사용하여 간단하게 작성할 수 있습니다.</li>
  <li>테라폼의 HCL에는 <code class="language-plaintext highlighter-rouge">count</code>와 <code class="language-plaintext highlighter-rouge">for_each</code> 두 가지 반복문이 있습니다.</li>
  <li>이번 주차에는 <code class="language-plaintext highlighter-rouge">count</code> 반복문에 대해 알아보았습니다.</li>
</ul>

<h4 id="count-반복문">count 반복문</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">count</code>는 프로그래밍 언어의 <code class="language-plaintext highlighter-rouge">for</code>문 처럼 정수값만큼 반복합니다.</li>
  <li>기본 적인 사용법은 아래와 같습니다.</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"&lt;프로바이더이름_리소스유형&gt;"</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
    <span class="nx">count</span> <span class="p">=</span> <span class="err">&lt;반복횟수&gt;</span>
    <span class="nx">content</span> <span class="p">=</span> <span class="s2">"Index = </span><span class="k">${</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="k">}</span><span class="s2">"</span> <span class="c1"># count.index 로 현재 반복 인덱스를 참조</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>위의 코드에서 <code class="language-plaintext highlighter-rouge">count</code> 횟수 만큼 반복해서 resource나 모듈을 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">count</code>의 반복횟수 참고값은 <code class="language-plaintext highlighter-rouge">count.index</code>를 통해 확인할 수 있으며, 0부터 시작해서 1씩 증가합니다.</li>
  <li>사용 예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"fruits"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">]</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"fruit_files"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">fruits</span><span class="p">)</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/i_love_</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">fruits</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="k">}</span><span class="s2">.txt"</span>
  <span class="nx">content</span> <span class="p">=</span> <span class="s2">"I love </span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">fruits</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="k">}</span><span class="s2">!"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">apply</span> <span class="nx">-auto-approve</span>
     
<span class="nx">$</span> <span class="nx">ls</span> <span class="nx">-1</span>
<span class="c1"># =&gt; i_love_apple.txt</span>
<span class="c1">#    i_love_banana.txt</span>
<span class="c1">#    i_love_kiwi.txt</span>
    
<span class="nx">$</span> <span class="nx">cat</span> <span class="nx">i_love_apple</span><span class="err">.</span><span class="nx">txt</span>
<span class="c1"># =&gt; I love apple!</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="도전과제">도전과제</h3>

<h4 id="도전과제-1-리전-내에서-사용-가능한-가용영역-목록-가져오기를-사용한-vpc-리소스-생성-실습-진행">도전과제 1. 리전 내에서 사용 가능한 가용영역 목록 가져오기를 사용한 VPC 리소스 생성 실습 진행</h4>
<ul>
  <li>가용영역 목록을 가져와서 VPC를 만들고, 사용 가능한 첫번째 가용영역에 subnet을 만드는 실습을 진행하였습니다.</li>
  <li>소스
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"aws_availability_zones"</span> <span class="s2">"available"</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="p">=</span> <span class="s2">"available"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.0.0.0/16"</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"challenge1 vpc"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_availability_zones</span><span class="p">.</span><span class="nx">available</span><span class="p">.</span><span class="nx">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.0.1.0/24"</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"challenge1 subnet"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
</code></pre></div>    </div>
  </li>
  <li>실행 결과
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    aws_vpc.peter_vpc: Creating...</span>
<span class="c">#    aws_vpc.peter_vpc: Creation complete after 1s [id=vpc-0e6762235c588581b]</span>
<span class="c">#    aws_subnet.peter_subnet: Creating...</span>
<span class="c">#    aws_subnet.peter_subnet: Creation complete after 0s [id=subnet-06888df37bc01ab4c]</span>
  
<span class="c"># 결과 확인</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.id"</span> | terraform console
<span class="c"># =&gt; "vpc-0e6762235c588581b"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_subnet.peter_subnet.id"</span> | terraform console
<span class="c"># =&gt; "subnet-06888df37bc01ab4c"</span>
</code></pre></div>    </div>
    <ul>
      <li>AWS 콘솔에서 VPC 생성 확인
<img src="/assets/2024/t101-4th/20240622_terraform_w2_vpc.png" alt="20240622_terraform_w2_vpc.png" /></li>
      <li>AWS 콘솔에서 Subnet 생성 확인
<img src="/assets/2024/t101-4th/20240622_terraform_w2_subnet.png" alt="20240622_terraform_w2_subnet.png" /></li>
    </ul>
  </li>
  <li>
    <p>그래프</p>

    <svg width="455pt" height="98pt" viewBox="0.00 0.00 454.75 98.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
  <polygon fill="white" stroke="none" points="-4,4 -4,-94 450.75,-94 450.75,4 -4,4" />
<!-- data.aws_availability_zones.available -->
<g id="node1" class="node">
  <polygon fill="none" stroke="black" points="240.25,-90 0,-90 0,-54 240.25,-54 240.25,-90" />
<text text-anchor="middle" x="120.12" y="-66.2" font-family="sans-serif" font-size="14.00">data.aws_availability_zones.available</text>
</g>
<!-- aws_subnet.peter_subnet -->
<g id="node2" class="node">
  <polygon fill="none" stroke="black" points="446.75,-63 276.25,-63 276.25,-27 446.75,-27 446.75,-63" />
<text text-anchor="middle" x="361.5" y="-39.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet</text>
</g>
<!-- aws_subnet.peter_subnet&#45;&gt;data.aws_availability_zones.available -->
<g id="edge1" class="edge">
  <path fill="none" stroke="black" d="M275.77,-54.56C268,-55.43 260.01,-56.33 251.96,-57.24" />
<polygon fill="black" stroke="black" points="251.59,-53.76 242.05,-58.36 252.38,-60.72 251.59,-53.76" />
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node3" class="node">
  <polygon fill="none" stroke="black" points="185.88,-36 54.38,-36 54.38,0 185.88,0 185.88,-36" />
<text text-anchor="middle" x="120.12" y="-12.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_subnet.peter_subnet&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge2" class="edge">
  <path fill="none" stroke="black" d="M275.77,-35.44C250.23,-32.56 222.36,-29.42 197.4,-26.6" />
<polygon fill="black" stroke="black" points="197.99,-23.15 187.66,-25.5 197.2,-30.1 197.99,-23.15" />
</g>
</g>
</svg>
  </li>
</ul>

<h4 id="도전과제-2-위-3개-코드-파일-내용에-리소스의-이름myvpc-mysubnet1-등을-반드시-꼭-자신의-닉네임으로-변경해서-배포-실습해보세요">도전과제 2. 위 3개 코드 파일 내용에 리소스의 이름(myvpc, mysubnet1 등)을 반드시! 꼭! 자신의 닉네임으로 변경해서 배포 실습해보세요!</h4>

<ul>
  <li>vpc.tf 생성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vpc.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Plan: 1 to add, 0 to change, 0 to destroy.</span>
<span class="c">#    aws_vpc.peter_vpc: Creating...</span>
<span class="c">#    aws_vpc.peter_vpc: Creation complete after 2s [id=vpc-0e1ad43009a8fe8fa]</span>
<span class="c">#    </span>
<span class="c">#    Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.id"</span> | terraform console
<span class="c"># =&gt; "vpc-0e1ad43009a8fe8fa"</span>
   
<span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> | jq
<span class="c"># =&gt; {</span>
<span class="c">#      "Vpcs": [</span>
<span class="c">#        {</span>
<span class="c">#          "CidrBlock": "10.10.0.0/16",</span>
<span class="c">#          "DhcpOptionsId": "dopt-0c264ef627294fd1f",</span>
<span class="c">#          "State": "available",</span>
<span class="c">#          "VpcId": "vpc-0e1ad43009a8fe8fa",</span>
<span class="c">#          "OwnerId": "123456789012",</span>
<span class="c">#          "InstanceTenancy": "default",</span>
<span class="c">#          "CidrBlockAssociationSet": [</span>
<span class="c">#            {</span>
<span class="c">#              "AssociationId": "vpc-cidr-assoc-0e9adafb317c75f4f",</span>
<span class="c">#              "CidrBlock": "10.10.0.0/16",</span>
<span class="c">#              "CidrBlockState": {</span>
<span class="c">#                "State": "associated"</span>
<span class="c">#              }</span>
<span class="c">#            }</span>
<span class="c">#          ],</span>
<span class="c">#          "IsDefault": false,</span>
<span class="c">#          "Tags": [</span>
<span class="c">#            {</span>
<span class="c">#              "Key": "name",</span>
<span class="c">#              "Value": "t101-study"</span>
<span class="c">#            }</span>
<span class="c">#          ]</span>
<span class="c">#        }</span>
<span class="c">#      ]</span>
<span class="c">#    }</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>AWS 콘솔에서 VPC 생성정보 확인 : DNS 옵션값 확인
    <ul>
      <li>아래의 캡쳐와 같이 DNS hostnames는 Disabled, DNS resolution은 Enabled 된 것을 확인하였습니다.
<img src="/assets/2024/t101-4th/20240622_terraform_w2_c2_p1_1.png" alt="20240622_terraform_w2_c2_p1_1.png" /></li>
    </ul>
  </li>
  <li>vpc.tf의 DNS 옵션을 수정하여 두 DNS 옵션값을 enabled 로 변경
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vpc.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">enable_dns_support</span> <span class="p">=</span> <span class="kc">true</span>   <span class="c1"># 추가</span>
  <span class="nx">enable_dns_hostnames</span> <span class="p">=</span> <span class="kc">true</span> <span class="c1"># 추가</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>수정된 vpc.tf 적용
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
</code></pre></div>    </div>
  </li>
  <li>AWS 콘솔에서 VPC 생성정보 확인 : DNS 옵션값 확인
    <ul>
      <li>아래와 같이 DNS hostnames 도 Enabled 되었습니다.
<img src="/assets/2024/t101-4th/20240622_terraform_w2_c2_p1_2.png" alt="20240622_terraform_w2_c2_p1_2.png" /></li>
    </ul>
  </li>
  <li>vpc.tf 코드 내용 수정 : 서브넷 2개 생성 추가
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">enable_dns_support</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">enable_dns_hostnames</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet1"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.1.0/24"</span>
  
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2a"</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet1"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet2"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.2.0/24"</span>
  
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2c"</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet2"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"aws_vpc_id"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과 확인
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; aws_subnet.peter_subnet1</span>
<span class="c">#    aws_subnet.peter_subnet2</span>
<span class="c">#    aws_vpc.peter_vpc</span>
    
<span class="nv">$ </span>terraform output
<span class="c"># =&gt; aws_vpc_id = "vpc-0e1ad43009a8fe8fa"</span>
    
<span class="nv">$ </span>terraform output aws_vpc_id
<span class="c"># =&gt; "vpc-0e1ad43009a8fe8fa"</span>
    
<span class="nv">$ </span>terraform output <span class="nt">-raw</span> aws_vpc_id
<span class="c"># =&gt; vpc-0e1ad43009a8fe8fa</span>
    
<span class="nv">$ VPCID</span><span class="o">=</span><span class="si">$(</span>terraform output <span class="nt">-raw</span> aws_vpc_id<span class="si">)</span>
    
<span class="nv">$ </span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="s2">"Name=vpc-id,Values=</span><span class="nv">$VPCID</span><span class="s2">"</span> <span class="nt">--output</span> table
</code></pre></div>        </div>
        <p><img src="/assets/2024/t101-4th/20240622_terraform_w2_c2_p1_3.png" alt="20240622_terraform_w2_c2_p1_3.png" /></p>

        <p><code class="language-plaintext highlighter-rouge">terraform output</code> 시 <code class="language-plaintext highlighter-rouge">-raw</code> 옵션을 사용하면 “(따옴표) 없이 출력값만을 확인할 수 있습니다. 스크립트 작성시 유용할듯합니다.</p>
      </li>
      <li>
        <p>그래프</p>

        <svg width="354pt" height="98pt" viewBox="0.00 0.00 353.50 98.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
    <polygon fill="white" stroke="none" points="-4,4 -4,-94 349.5,-94 349.5,4 -4,4" />
<!-- aws_subnet.peter_subnet1 -->
<g id="node1" class="node">
    <polygon fill="none" stroke="black" points="345.5,-90 167.5,-90 167.5,-54 345.5,-54 345.5,-90" />
<text text-anchor="middle" x="256.5" y="-66.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet1</text>
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node3" class="node">
    <polygon fill="none" stroke="black" points="131.5,-63 0,-63 0,-27 131.5,-27 131.5,-63" />
<text text-anchor="middle" x="65.75" y="-39.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_subnet.peter_subnet1&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge1" class="edge">
    <path fill="none" stroke="black" d="M167.2,-59.37C159.21,-58.23 151.16,-57.07 143.28,-55.95" />
<polygon fill="black" stroke="black" points="143.78,-52.48 133.38,-54.53 142.79,-59.41 143.78,-52.48" />
</g>
<!-- aws_subnet.peter_subnet2 -->
<g id="node2" class="node">
    <polygon fill="none" stroke="black" points="345.5,-36 167.5,-36 167.5,0 345.5,0 345.5,-36" />
<text text-anchor="middle" x="256.5" y="-12.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet2</text>
</g>
<!-- aws_subnet.peter_subnet2&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge2" class="edge">
    <path fill="none" stroke="black" d="M167.2,-30.63C159.21,-31.77 151.16,-32.93 143.28,-34.05" />
<polygon fill="black" stroke="black" points="142.79,-30.59 133.38,-35.47 143.78,-37.52 142.79,-30.59" />
</g>
</g>
</svg>
      </li>
    </ul>
  </li>
  <li>이후 다음의 작업을 추가 적용 하였습니다.
    <ul>
      <li>IGW 인터넷 게이트웨이 추가</li>
      <li>IGW 인터넷 게이트웨이로 전달하는 디폴트 라우팅 정보 추가</li>
      <li>보안그룹/EC2 배포</li>
    </ul>
  </li>
  <li>최종 결과는 아래와 같습니다.
    <ul>
      <li>vpc.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vpc.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">enable_dns_support</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">enable_dns_hostnames</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet1"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.1.0/24"</span>
    
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2a"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet1"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet2"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.2.0/24"</span>
    
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2c"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet2"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_internet_gateway"</span> <span class="s2">"peter_igw"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-igw"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
    
<span class="k">resource</span> <span class="s2">"aws_route_table"</span> <span class="s2">"peter_rt"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-rt"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_route_table_association"</span> <span class="s2">"peter_rtassociation1"</span> <span class="p">{</span>
  <span class="nx">subnet_id</span>      <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet1</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">route_table_id</span> <span class="p">=</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">peter_rt</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_route_table_association"</span> <span class="s2">"peter_rtassociation2"</span> <span class="p">{</span>
  <span class="nx">subnet_id</span>      <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet2</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">route_table_id</span> <span class="p">=</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">peter_rt</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_route"</span> <span class="s2">"peter_defaultroute"</span> <span class="p">{</span>
  <span class="nx">route_table_id</span>         <span class="p">=</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">peter_rt</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">destination_cidr_block</span> <span class="p">=</span> <span class="s2">"0.0.0.0/0"</span>
  <span class="nx">gateway_id</span>             <span class="p">=</span> <span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">peter_igw</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"aws_vpc_id"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
      <li>sg.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sg.tf</span>
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"peter_sg"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>      <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">name</span>        <span class="p">=</span> <span class="s2">"T101 SG"</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"T101 Study SG"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_security_group_rule"</span> <span class="s2">"peter_sginbound"</span> <span class="p">{</span>
  <span class="nx">type</span>              <span class="p">=</span> <span class="s2">"ingress"</span>
  <span class="nx">from_port</span>         <span class="p">=</span> <span class="mi">80</span>
  <span class="nx">to_port</span>           <span class="p">=</span> <span class="mi">80</span>
  <span class="nx">protocol</span>          <span class="p">=</span> <span class="s2">"tcp"</span>
  <span class="nx">cidr_blocks</span>       <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="nx">security_group_id</span> <span class="p">=</span> <span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_security_group_rule"</span> <span class="s2">"peter_sgoutbound"</span> <span class="p">{</span>
  <span class="nx">type</span>              <span class="p">=</span> <span class="s2">"egress"</span>
  <span class="nx">from_port</span>         <span class="p">=</span> <span class="mi">0</span>
  <span class="nx">to_port</span>           <span class="p">=</span> <span class="mi">0</span>
  <span class="nx">protocol</span>          <span class="p">=</span> <span class="s2">"-1"</span>
  <span class="nx">cidr_blocks</span>       <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="nx">security_group_id</span> <span class="p">=</span> <span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"aws_security_group_id"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
      <li>ec2.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ec2.tf</span>
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"peter_amazonlinux2"</span> <span class="p">{</span>
  <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">filter</span> <span class="p">{</span>
    <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"owner-alias"</span>
    <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amazon"</span><span class="p">]</span>
  <span class="p">}</span>
    
  <span class="nx">filter</span> <span class="p">{</span>
    <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
    <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amzn2-ami-hvm-*-x86_64-ebs"</span><span class="p">]</span>
  <span class="p">}</span>
    
  <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amazon"</span><span class="p">]</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"peter_ec2"</span> <span class="p">{</span>
    
  <span class="nx">depends_on</span> <span class="p">=</span> <span class="p">[</span>
    <span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">peter_igw</span>
  <span class="p">]</span>
    
  <span class="nx">ami</span>                         <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">peter_amazonlinux2</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">associate_public_ip_address</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">instance_type</span>               <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">vpc_security_group_ids</span>      <span class="p">=</span> <span class="p">[</span><span class="s2">"</span><span class="k">${</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
  <span class="nx">subnet_id</span>                   <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet1</span><span class="p">.</span><span class="nx">id</span>
    
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              wget https://busybox.net/downloads/binaries/1.31.0-defconfig-multiarch-musl/busybox-x86_64
              mv busybox-x86_64 busybox
              chmod +x busybox
              RZAZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone-id)
              IID=$(curl 169.254.169.254/latest/meta-data/instance-id)
              LIP=$(curl 169.254.169.254/latest/meta-data/local-ipv4)
              echo "&lt; h1&gt;RegionAz($RZAZ) : Instance ID($IID) : Private IP($LIP) : Web Server&lt;/h1&gt;&lt;br/&gt;Greetings commander" &gt; index.html
              nohup ./busybox httpd -f -p 80 &amp;
</span><span class="no">              EOF
    
</span>  <span class="nx">user_data_replace_on_change</span> <span class="p">=</span> <span class="kc">true</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-peter_ec2"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"peter_ec2_public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">peter_ec2</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>배포 후 EC2 확인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Outputs:</span>

<span class="c">#    aws_security_group_id = "sg-07761e7b1e39b5af6"</span>
<span class="c">#    aws_vpc_id = "vpc-0e1ad43009a8fe8fa"</span>
<span class="c">#    peter_ec2_public_ip = "54.180.146.116"</span>
  
<span class="c"># ami 데이터 확인</span>
<span class="nv">$ </span>terraform state show data.aws_ami.my_amazonlinux2
  
<span class="c"># EC2 인스턴스 정보 확인</span>
<span class="nv">$ </span>terraform state show aws_instance.myec2
  
<span class="c"># EC2 인스턴스 IP 확인</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_instance.peter_ec2.public_ip"</span> | terraform console
<span class="c"># =&gt; "54.180.146.116"</span>
<span class="nv">$ </span>terraform output <span class="nt">-raw</span> peter_ec2_public_ip
<span class="c"># =&gt; 54.180.146.116</span>
  
<span class="c"># curl 로 접속 확인</span>
<span class="nv">$ PETER_EC2_IP</span><span class="o">=</span><span class="si">$(</span>terraform output <span class="nt">-raw</span> peter_ec2_public_ip<span class="si">)</span>
<span class="nv">$ </span>curl <span class="nv">$PETER_EC2_IP</span>                                      
<span class="c"># =&gt; &lt; h1&gt;RegionAz(apne2-az1) : Instance ID(i-0d4b665d1ce7a4b09) : Private IP(10.10.1.41) : Web Server&lt;/h1&gt;&lt;br/&gt;Greetings commander</span>
</code></pre></div>    </div>
  </li>
  <li>브라우저로 접속 확인
<img src="/assets/2024/t101-4th/20240622_terraform_w2_c2_p1_4.png" alt="20240622_terraform_w2_c2_p1_4.png" /></li>
  <li>그래프 확인
    <svg width="753pt" height="341pt" viewBox="0.00 0.00 752.75 341.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 337)">
  <polygon fill="white" stroke="none" points="-4,4 -4,-337 748.75,-337 748.75,4 -4,4" />
<!-- data.aws_ami.peter_amazonlinux2 -->
<g id="node1" class="node">
  <polygon fill="none" stroke="black" points="393.5,-252 167.5,-252 167.5,-216 393.5,-216 393.5,-252" />
<text text-anchor="middle" x="280.5" y="-228.2" font-family="sans-serif" font-size="14.00">data.aws_ami.peter_amazonlinux2</text>
</g>
<!-- aws_instance.peter_ec2 -->
<g id="node2" class="node">
  <polygon fill="none" stroke="black" points="667.88,-198 506.38,-198 506.38,-162 667.88,-162 667.88,-198" />
<text text-anchor="middle" x="587.12" y="-174.2" font-family="sans-serif" font-size="14.00">aws_instance.peter_ec2</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;data.aws_ami.peter_amazonlinux2 -->
<g id="edge1" class="edge">
  <path fill="none" stroke="black" d="M506.09,-194.19C472.7,-200.11 433.28,-207.09 396.86,-213.55" />
<polygon fill="black" stroke="black" points="396.39,-210.08 387.15,-215.27 397.61,-216.97 396.39,-210.08" />
</g>
<!-- aws_internet_gateway.peter_igw -->
<g id="node3" class="node">
  <polygon fill="none" stroke="black" points="386.38,-198 174.62,-198 174.62,-162 386.38,-162 386.38,-198" />
<text text-anchor="middle" x="280.5" y="-174.2" font-family="sans-serif" font-size="14.00">aws_internet_gateway.peter_igw</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;aws_internet_gateway.peter_igw -->
<g id="edge2" class="edge">
  <path fill="none" stroke="black" d="M506.09,-180C473.02,-180 434.03,-180 397.91,-180" />
<polygon fill="black" stroke="black" points="398.31,-176.5 388.31,-180 398.31,-183.5 398.31,-176.5" />
</g>
<!-- aws_security_group.peter_sg -->
<g id="node8" class="node">
  <polygon fill="none" stroke="black" points="376.62,-306 184.38,-306 184.38,-270 376.62,-270 376.62,-306" />
<text text-anchor="middle" x="280.5" y="-282.2" font-family="sans-serif" font-size="14.00">aws_security_group.peter_sg</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;aws_security_group.peter_sg -->
<g id="edge3" class="edge">
  <path fill="none" stroke="black" d="M517.9,-198.43C489.7,-207.34 457.2,-219.31 429.5,-234 411.83,-243.37 411.59,-252.48 393.5,-261 390,-262.65 386.39,-264.2 382.71,-265.66" />
<polygon fill="black" stroke="black" points="381.76,-262.28 373.58,-269.03 384.18,-268.85 381.76,-262.28" />
</g>
<!-- aws_subnet.peter_subnet1 -->
<g id="node11" class="node">
  <polygon fill="none" stroke="black" points="369.5,-144 191.5,-144 191.5,-108 369.5,-108 369.5,-144" />
<text text-anchor="middle" x="280.5" y="-120.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet1</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;aws_subnet.peter_subnet1 -->
<g id="edge4" class="edge">
  <path fill="none" stroke="black" d="M506.02,-166.35C481.46,-162.12 454.36,-157.41 429.5,-153 413.83,-150.22 397.23,-147.23 381.04,-144.3" />
<polygon fill="black" stroke="black" points="381.86,-140.89 371.4,-142.54 380.61,-147.78 381.86,-140.89" />
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node13" class="node">
  <polygon fill="none" stroke="black" points="131.5,-144 0,-144 0,-108 131.5,-108 131.5,-144" />
<text text-anchor="middle" x="65.75" y="-120.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_internet_gateway.peter_igw&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge5" class="edge">
  <path fill="none" stroke="black" d="M201.71,-161.52C190.23,-158.71 178.55,-155.81 167.5,-153 159.51,-150.97 151.17,-148.8 142.86,-146.62" />
<polygon fill="black" stroke="black" points="144.02,-143.3 133.46,-144.13 142.23,-150.07 144.02,-143.3" />
</g>
<!-- aws_route.peter_defaultroute -->
<g id="node4" class="node">
  <polygon fill="none" stroke="black" points="682.88,-144 491.38,-144 491.38,-108 682.88,-108 682.88,-144" />
<text text-anchor="middle" x="587.12" y="-120.2" font-family="sans-serif" font-size="14.00">aws_route.peter_defaultroute</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_internet_gateway.peter_igw -->
<g id="edge6" class="edge">
  <path fill="none" stroke="black" d="M491.26,-142.2C470.88,-145.72 449.47,-149.46 429.5,-153 417.69,-155.1 405.35,-157.31 393.05,-159.53" />
<polygon fill="black" stroke="black" points="392.49,-156.07 383.28,-161.3 393.74,-162.96 392.49,-156.07" />
</g>
<!-- aws_route_table.peter_rt -->
<g id="node5" class="node">
  <polygon fill="none" stroke="black" points="363.12,-90 197.88,-90 197.88,-54 363.12,-54 363.12,-90" />
<text text-anchor="middle" x="280.5" y="-66.2" font-family="sans-serif" font-size="14.00">aws_route_table.peter_rt</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_route_table.peter_rt -->
<g id="edge7" class="edge">
  <path fill="none" stroke="black" d="M491.26,-109.8C470.88,-106.28 449.47,-102.54 429.5,-99 411.72,-95.85 392.74,-92.42 374.52,-89.11" />
<polygon fill="black" stroke="black" points="375.24,-85.69 364.77,-87.34 373.99,-92.57 375.24,-85.69" />
</g>
<!-- aws_route_table.peter_rt&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge8" class="edge">
  <path fill="none" stroke="black" d="M201.71,-90.48C190.23,-93.29 178.55,-96.19 167.5,-99 159.51,-101.03 151.17,-103.2 142.86,-105.38" />
<polygon fill="black" stroke="black" points="142.23,-101.93 133.46,-107.87 144.02,-108.7 142.23,-101.93" />
</g>
<!-- aws_route_table_association.peter_rtassociation1 -->
<g id="node6" class="node">
  <polygon fill="none" stroke="black" points="744.75,-90 429.5,-90 429.5,-54 744.75,-54 744.75,-90" />
<text text-anchor="middle" x="587.12" y="-66.2" font-family="sans-serif" font-size="14.00">aws_route_table_association.peter_rtassociation1</text>
</g>
<!-- aws_route_table_association.peter_rtassociation1&#45;&gt;aws_route_table.peter_rt -->
<g id="edge9" class="edge">
  <path fill="none" stroke="black" d="M429.35,-72C410.7,-72 392.13,-72 374.77,-72" />
<polygon fill="black" stroke="black" points="375.07,-68.5 365.07,-72 375.07,-75.5 375.07,-68.5" />
</g>
<!-- aws_route_table_association.peter_rtassociation1&#45;&gt;aws_subnet.peter_subnet1 -->
<g id="edge10" class="edge">
  <path fill="none" stroke="black" d="M478.26,-90.45C461.92,-93.29 445.26,-96.2 429.5,-99 413.83,-101.78 397.23,-104.77 381.04,-107.7" />
<polygon fill="black" stroke="black" points="380.61,-104.22 371.4,-109.46 381.86,-111.11 380.61,-104.22" />
</g>
<!-- aws_route_table_association.peter_rtassociation2 -->
<g id="node7" class="node">
  <polygon fill="none" stroke="black" points="744.75,-36 429.5,-36 429.5,0 744.75,0 744.75,-36" />
<text text-anchor="middle" x="587.12" y="-12.2" font-family="sans-serif" font-size="14.00">aws_route_table_association.peter_rtassociation2</text>
</g>
<!-- aws_route_table_association.peter_rtassociation2&#45;&gt;aws_route_table.peter_rt -->
<g id="edge11" class="edge">
  <path fill="none" stroke="black" d="M478.26,-36.45C461.92,-39.29 445.26,-42.2 429.5,-45 411.72,-48.15 392.74,-51.58 374.52,-54.89" />
<polygon fill="black" stroke="black" points="373.99,-51.43 364.77,-56.66 375.24,-58.31 373.99,-51.43" />
</g>
<!-- aws_subnet.peter_subnet2 -->
<g id="node12" class="node">
  <polygon fill="none" stroke="black" points="369.5,-36 191.5,-36 191.5,0 369.5,0 369.5,-36" />
<text text-anchor="middle" x="280.5" y="-12.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet2</text>
</g>
<!-- aws_route_table_association.peter_rtassociation2&#45;&gt;aws_subnet.peter_subnet2 -->
<g id="edge12" class="edge">
  <path fill="none" stroke="black" d="M429.35,-18C412.93,-18 396.57,-18 381.05,-18" />
<polygon fill="black" stroke="black" points="381.42,-14.5 371.42,-18 381.42,-21.5 381.42,-14.5" />
</g>
<!-- aws_security_group.peter_sg&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge13" class="edge">
  <path fill="none" stroke="black" d="M184.02,-270C178.24,-267.4 172.68,-264.41 167.5,-261 126.88,-234.21 96.5,-185.22 80.21,-154.2" />
<polygon fill="black" stroke="black" points="83.39,-152.72 75.73,-145.39 77.15,-155.89 83.39,-152.72" />
</g>
<!-- aws_security_group_rule.peter_sginbound -->
<g id="node9" class="node">
  <polygon fill="none" stroke="black" points="722.25,-333 452,-333 452,-297 722.25,-297 722.25,-333" />
<text text-anchor="middle" x="587.12" y="-309.2" font-family="sans-serif" font-size="14.00">aws_security_group_rule.peter_sginbound</text>
</g>
<!-- aws_security_group_rule.peter_sginbound&#45;&gt;aws_security_group.peter_sg -->
<g id="edge14" class="edge">
  <path fill="none" stroke="black" d="M451.63,-303.08C430.38,-301.2 408.66,-299.27 388.16,-297.45" />
<polygon fill="black" stroke="black" points="388.68,-293.99 378.41,-296.59 388.07,-300.96 388.68,-293.99" />
</g>
<!-- aws_security_group_rule.peter_sgoutbound -->
<g id="node10" class="node">
  <polygon fill="none" stroke="black" points="726.38,-279 447.88,-279 447.88,-243 726.38,-243 726.38,-279" />
<text text-anchor="middle" x="587.12" y="-255.2" font-family="sans-serif" font-size="14.00">aws_security_group_rule.peter_sgoutbound</text>
</g>
<!-- aws_security_group_rule.peter_sgoutbound&#45;&gt;aws_security_group.peter_sg -->
<g id="edge15" class="edge">
  <path fill="none" stroke="black" d="M447.63,-273.28C427.75,-275.04 407.56,-276.83 388.42,-278.52" />
<polygon fill="black" stroke="black" points="388.12,-275.04 378.47,-279.4 388.74,-282.01 388.12,-275.04" />
</g>
<!-- aws_subnet.peter_subnet1&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge16" class="edge">
  <path fill="none" stroke="black" d="M191.12,-126C175.14,-126 158.59,-126 142.99,-126" />
<polygon fill="black" stroke="black" points="143.34,-122.5 133.34,-126 143.34,-129.5 143.34,-122.5" />
</g>
<!-- aws_subnet.peter_subnet2&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge17" class="edge">
  <path fill="none" stroke="black" d="M191.07,-35.39C182.93,-38.15 174.95,-41.34 167.5,-45 139.2,-58.91 111.62,-81.94 92.49,-99.9" />
<polygon fill="black" stroke="black" points="90.21,-97.25 85.42,-106.7 95.06,-102.29 90.21,-97.25" />
</g>
</g>
</svg>
  </li>
</ul>

<h2 id="마치며">마치며</h2>
<ul>
  <li>실습을 통해 리소스 유형과 리소스 이름의 사용법, 리소스 속성 등에 대해 이해를 높일 수 있었습니다. 
새삼스럽지만 이렇게 쉽게 각종 리소스들이 생성되고, 서비스가 운영된다는게 신기합니다.</li>
  <li>악분님 실습도 해보고 싶었지만 생각보다 여기까지 시간이 많이 소요되어 다음번으로 미루어야겠습니다. :cry:</li>
  <li>따라가기 버거운 만큼 남는것이 많은 스터디가 될것 같습니다. 끝까지 생존해서 완주 할 수 있길 바라며 오늘의 포스팅을 마칩니다.</li>
</ul>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[테라폼 기초 입문 실습 스터디 2주차 입니다. 1주차에 이어 테라폼의 기본 사용법에 대해 실습해보려 합니다. 이번 주에도 “테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.]]></summary></entry><entry><title type="html">[T101 4기] 테라폼 기본 사용법 1/3</title><link href="https://sweetlittlebird.github.io/posts/2024-06-11-T101-Study-Terraform-Week-1/" rel="alternate" type="text/html" title="[T101 4기] 테라폼 기본 사용법 1/3" /><published>2024-06-11T23:41:18+09:00</published><updated>2024-06-11T23:41:18+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%201</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-06-11-T101-Study-Terraform-Week-1/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>앞으로 몇 주간에 걸쳐 테라폼 기초 입문 실습 스터디에 참여하면서 배운 내용을 정리하려 합니다.
이번 글의 주제는 테라폼의 기본 사용법이며 “테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.</p>

<blockquote>
  <p><img src="/assets/2024/t101-4th/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h2 id="iac-와-테라폼">IaC 와 테라폼</h2>

<p>하나의 서버를 운영하기 위해서는 수 많은 설치와 설정의 과정이 필요합니다.
서버에 운영체제를 설치하고, 패키지를 설치하고, 설정을 하는 기나긴 작업이 필요합니다.
이것으로 끝나는 것이 아니라 방화벽을 비롯한 네트워크 설정, 보안 설정, 모니터링 설정 등 다양한 설정이 필요합니다.
이러한 작업을 수동으로 진행하다 보면 시간도 많이 소요되고 실수할 가능성도 높아집니다.</p>

<p>하나의 서버를 설정하기 위해서도 이러한 작업이 필요한데, 수대, 수십대, 수백대의 서버를 운영한다면 시간과 실수할 가능성은
엄청 나게 늘어납니다. 이러한 문제를 해결하기 위해 나온 것이 <code class="language-plaintext highlighter-rouge">IaC(Infrastructure as Code)</code>입니다.</p>

<p><code class="language-plaintext highlighter-rouge">IaC(Infrastructure as Code)</code>는 인프라를 코드로 관리하는 방식을 말하며, 코드를 <code class="language-plaintext highlighter-rouge">git</code>을 이용하여 버전 관리도 할 수 있고
코드 리뷰도 할 수 있습니다. 또한 코드를 통해 인프라를 구성하면 인프라를 재사용하기도 쉽고, 확장하기도 쉽습니다.</p>

<p>이 <code class="language-plaintext highlighter-rouge">IaC</code>에 대표적인 도구로는 <code class="language-plaintext highlighter-rouge">테라폼(Terraform)</code>이 있습니다. 
테라폼은 인프라를 코드로 관리할 수 있는 도구로, 다양한 클라우드 서비스를 지원하며, 코드를 통해 인프라를 구성할 수 있습니다.
서버만을 예시로 들었지만 테라폼은 서버 뿐만 아니라 AWS와 같은 클라우드 상의 다양한 서비스를 관리할 수 있습니다.</p>

<p>테라폼은 크게 3가지 형태로 구성되어 있습니다.</p>

<ul>
  <li>On-premise : Terraform 이라 불리는 형태로, 사용자의 컴퓨팅 환경에 오픈소스 버전의 테라폼을 사용하는 형태입니다.</li>
  <li>Hosted SaaS : Terraform Cloud 라 불리며, HashiCorp 에서 제공하는 SaaS 서비스로, HashiCorp 가 관리하는 서버 환경을 사용합니다.</li>
  <li>Private Install : Terraform Enterprise 라 불리는 서버 설치형 구성 환경으로, 기업 내부에 설치하여 사용하는 형태입니다. 외부 네트워크와 격리가 가능합니다.</li>
</ul>

<h2 id="실행-환경-구성">실행 환경 구성</h2>

<p>제가 사용중인 macOS를 기준으로 작성하였습니다.
macOS에서 테라폼을 설치하려면 <code class="language-plaintext highlighter-rouge">Homebrew</code>를 이용하여 설치할 수 있습니다.</p>

<p>(홈브루 설치 방법은 <a href="https://whalec.io/homebrew-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/">https://whalec.io/homebrew-설치-및-사용-방법</a> 를 참고하세요.)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># tfenv 설치</span>
brew <span class="nb">install </span>tfenv

<span class="c"># 테라폼 1.8.5 설치</span>
tfenv <span class="nb">install </span>1.8.5

<span class="c"># 테라폼 1.8.5 버전을 사용</span>
tfenv use 1.8.5

<span class="c"># 버전 확인</span>
terraform version

<span class="c"># 자동완성 스크립트 추가</span>
terraform <span class="nt">-install-autocomplete</span>

<span class="c"># 자동완성 스크립트 적용 (zsh의 경우)</span>
<span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<h2 id="terraform-명령의-주요-서브-커맨드">terraform 명령의 주요 서브 커맨드</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">terraform init</code> : 현재 디렉토리에 terraform 설정 파일들을 생성하고 초기화합니다. 새로운 프로젝트를 만든다는 느낌입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform validate</code> : terraform 설정 파일들을 검증합니다. 설정 파일들이 올바르게 작성되었는지 확인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform plan</code> : terraform 설정 파일들을 기반으로 실행할 계획을 확인합니다. <strong>실제로 실행되는 것은 아닙니다.</strong>
어떤 리소스가 생성되고, 삭제되며, 변경되는지 등을 확인할 수 있습니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">terraform plan -out=tfplan</code> : 실행할 계획을 파일로 저장합니다. 이후 <code class="language-plaintext highlighter-rouge">terraform apply plan.out</code>으로 실행할 수 있습니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">terraform apply</code> : terraform 설정 파일들을 기반으로 <strong>실제</strong> 작업을 실행합니다. 사전에 <code class="language-plaintext highlighter-rouge">terraform plan</code>으로 변경사항을 확인하고 실행해야 합니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">terraform apply -replace=리소스</code> : 프로비저닝이 완료된 후 특정 리소스를 삭제 후 다시 생성 합니다. <code class="language-plaintext highlighter-rouge">plan</code>, <code class="language-plaintext highlighter-rouge">apply</code> 모두 적용 가능합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">terraform state list</code> : 생성된 리소스들의 목록을 확인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform destroy</code> : terraform 설정 파일들을 기반으로 생성된 리소스들을 모두 삭제합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform fmt</code> : terraform 설정 파일들을 표준 형식과 표준 스타일로 정렬하여 가독성을 높입니다.</li>
</ul>

<h2 id="terraform-명령의-주요-옵션">terraform 명령의 주요 옵션</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-auto-approve</code> : <code class="language-plaintext highlighter-rouge">terraform apply</code> 시 Y/N을 묻지 않고 자동으로 승인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">-help</code> : 도움말을 확인합니다. <code class="language-plaintext highlighter-rouge">terraform apply -help</code>와 같이 명렁어와 함께 사용시 해당 명령어의 옵션을 확인 할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">-no-color</code> : <code class="language-plaintext highlighter-rouge">&lt;-[0m&lt;[1m</code> 과 같은 문자가 표시되는 경우 색상 정보를 안 나오게하여 정상적으로 나오게 합니다. <code class="language-plaintext highlighter-rouge">terraform validate -no-color</code>와 같이 사용할 수 있습니다.</li>
</ul>

<h2 id="hcl">HCL</h2>

<p>HCL은 <strong>H</strong>ashiCorp <strong>C</strong>onfiguration <strong>L</strong>anguage의 약자로, HashiCorp에서 만든 IaC와 구성정보를 명시하기 위한 언어입니다.
HCL은 네이티브 문법과 json 호환 문법을 지원합니다. 네이티브 문법의 경우 보통 <code class="language-plaintext highlighter-rouge">.tf</code> 확장자를, json 호환 문법의 경우 <code class="language-plaintext highlighter-rouge">.tf.json</code> 확장자를 사용합니다.</p>

<p>네이티브 문법이 더 가독성이 좋고 작성하기 편하기 때문에 보통 네이티브 문법을 사용합니다.
주요 문법 적인 특징은 다음과 같습니다.</p>

<ul>
  <li>쿠버네티스 처럼 선언적인 구조를 가지고 있습니다. 즉, 어떻게 하는지 절차를 기록하는것이 아닌, 최종 결과를 정하면 Terraform이 적절한 절차의 계획(plan)을 세워서 적용합니다..</li>
  <li>변수와 문자열 값을 함께 사용하는 인터폴레이션(interpolation)을 지원합니다.
    <ul>
      <li>예) <code class="language-plaintext highlighter-rouge">name = "Hello~ {$var.name}!"</code></li>
    </ul>
  </li>
  <li>HCL은 코드의 모듈화와 재사용성을 위한 기능을 제공합니다.</li>
</ul>

<h3 id="hcl-네이티브-문법-예시">HCL 네이티브 문법 예시</h3>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 한줄 주석 방법1</span>
<span class="c1"># 한줄 주석 방법2</span>

<span class="cm">/*
라인
주석
*/</span>

<span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">key1</span>     <span class="p">=</span> <span class="s2">"value1"</span>     <span class="c1"># = 를 기준으로 키와 값이 구분되며</span>
  <span class="nx">myStr</span>    <span class="p">=</span> <span class="s2">"TF ♡ UTF-8"</span> <span class="c1"># UTF-8 문자를 지원한다.</span>
  <span class="nx">multiStr</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
  Multi
  Line
  String
  with anytext
</span><span class="no">EOF

</span>  <span class="nx">boolean1</span>    <span class="p">=</span> <span class="kc">true</span>   <span class="c1"># boolean true</span>
  <span class="nx">boolean2</span>    <span class="p">=</span> <span class="kc">false</span>  <span class="c1"># boolean false를 지원한다.</span>
  <span class="nx">deciaml</span>     <span class="p">=</span> <span class="mi">123</span>    <span class="c1"># 기본적으로 숫자는 10진수,</span>
  <span class="nx">octal</span>       <span class="p">=</span> <span class="mi">0123</span>   <span class="c1"># 0으로 시작하는 숫자는 8진수,</span>
  <span class="nx">hexadecimal</span> <span class="p">=</span> <span class="s2">"0xD5"</span> <span class="c1"># 0x 값을 포함하는 스트링은 16진수,</span>
  <span class="nx">scientific</span>  <span class="p">=</span> <span class="mi">1</span><span class="nx">e10</span>   <span class="c1"># 과학표기 법도 지원한다.</span>

  <span class="c1"># funtion 호출 예</span>
  <span class="nx">myprojectname</span> <span class="p">=</span> <span class="nx">format</span><span class="p">(</span><span class="s2">"%s is myproject name"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">project</span><span class="p">)</span>

  <span class="c1"># 3항 연산자 조건문을 지원한다.</span>
  <span class="nx">credentials</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">credentials</span> <span class="p">==</span> <span class="s2">""</span> <span class="err">?</span> <span class="nx">file</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">credentials_file</span><span class="p">)</span> <span class="err">:</span> <span class="kd">var</span><span class="p">.</span><span class="nx">credentials</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>HCL은 주석 부터 변수 정의, 연산, 조건문 등 프로그래밍적인 요소를 가지고 있고, 구성 편의성을 높이기 위한 function을 제공합니다.
    <ul>
      <li><a href="https://developer.hashicorp.com/terraform/language/functions">built in function 소개</a></li>
    </ul>
  </li>
  <li>테라폼으로 인프라를 구성하기 위한 terraform, resource, data, variable, local, output 과 같은 선언 블록도 다수 존재합니다.</li>
</ul>

<h3 id="테라폼-블록">테라폼 블록</h3>

<p>테라폼은 다양한 블록을 제공하며, 각 블록은 특정한 역할을 수행합니다.</p>

<h4 id="terraform-블록">terraform 블록</h4>

<ul>
  <li>Terraform의 버전이나 프로바이더 버전 등을 지정 할 수 있고, 리소스를 생성하기 위한 설정을 지정할 수 있습니다.</li>
  <li>버전을 지정함으로써 <strong>오늘 실행하던, 3년 후에 실행하던</strong> 같은 결과를 보장할 수 있습니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">terraform</code> 블록 예시</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_version</span> <span class="p">=</span> <span class="s2">"~&gt; 1.3.0"</span> <span class="c1"># 테라폼 버전</span>
  
  <span class="nx">required_providers</span> <span class="p">{</span> <span class="c1"># 프로바이더 버전을 나열</span>
    <span class="nx">random</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 3.0.0, &lt; 3.1.0"</span>
    <span class="p">}</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"4.2.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">cloud</span> <span class="p">{</span> <span class="c1"># Cloud/Enterprise 같은 원격 실행을 위한 정보</span>
    <span class="nx">organization</span> <span class="p">=</span> <span class="s2">"&lt;MY_ORG_NAME&gt;"</span>
    <span class="nx">workspaces</span> <span class="p">{</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"my-first-workspace"</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">backend</span> <span class="s2">"local"</span> <span class="p">{</span> <span class="c1"># state를 보관하는 위치를 지정</span>
    <span class="nx">path</span> <span class="p">=</span> <span class="s2">"relative/path/to/terraform.tfstate"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>버전 표현 방법
    <ul>
      <li>버전은 Semantic Versioning을 따릅니다. Semantic Versioning은 <code class="language-plaintext highlighter-rouge">Major.Minor.Patch</code> 형태로 버전을 관리합니다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">Major</code> 버전 : 하위 호환성이 없는 변경 사항</li>
          <li><code class="language-plaintext highlighter-rouge">Minor</code> 버전 : 하위 호환성이 있는 변경 사항</li>
          <li><code class="language-plaintext highlighter-rouge">Patch</code> 버전 : 하위 호환성이 있는 버그 수정</li>
        </ul>
      </li>
      <li>또한 버전은 제약 조건을 지정할 수 있습니다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">=</code> 또는 연산자 없음 : 정확히 해당 버전</li>
          <li><code class="language-plaintext highlighter-rouge">!=</code> : 지정된 버전을 제외</li>
          <li><code class="language-plaintext highlighter-rouge">&gt;, &gt;=, &lt;, &lt;=</code> : 각각 해당 버전보다 높은 버전, 높거나 같은 버전, 작은 버전, 작거나 같은 버전 사용</li>
          <li><code class="language-plaintext highlighter-rouge">~&gt;</code> : 지정된 버전에서 가장 자리수가 낮은 구성요소만 변경되는것을 허용
            <ul>
              <li>예) <code class="language-plaintext highlighter-rouge">~&gt; x.y</code> 인 경우 <code class="language-plaintext highlighter-rouge">y</code> 버전에 대해서만, <code class="language-plaintext highlighter-rouge">~&gt; x.y.z</code> 인 경우 <code class="language-plaintext highlighter-rouge">z</code> 버전에 대해서만 변경을 허용</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h5 id="terraform-버전-지정">Terraform 버전 지정</h5>

<p>위의 예제에서 본것 처럼 <code class="language-plaintext highlighter-rouge">required_version</code>을 통해 테라폼 버전을 지정할 수 있습니다. 
지정된 버전의 조건에 맞을때만 테라폼이 실행됩니다.</p>

<ul>
  <li>Terraform 버전 확인</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform version

<span class="c"># Terraform v1.8.5</span>
<span class="c"># on darwin_arm64</span>
<span class="c"># + provider registry.terraform.io/hashicorp/local v2.5.1</span>
</code></pre></div></div>

<ul>
  <li>main.tf 수정</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="c1"># 현재 설치된 terraform 버전인 1.8.5 미만으로 지정</span>
  <span class="nx">required_version</span> <span class="p">=</span> <span class="s2">"&lt; 1.8.5"</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>terraform plan 실행</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform plan

<span class="c"># Error: Unsupported Terraform Core version</span>
<span class="c"># </span>
<span class="c">#   on main.tf line 3, in terraform:</span>
<span class="c">#    3:   required_version = "&lt; 1.8.5"</span>
<span class="c"># </span>
<span class="c"># This configuration does not support Terraform version 1.8.5. To proceed, either choose another supported Terraform version or update this version constraint. Version constraints</span>
<span class="c"># are normally set for good reason, so updating the constraint may lead to other errors or unexpected behavior.</span>
</code></pre></div></div>

<p>현재 설치된 버전보다 이전으로 지정되어서 에러가 나고 종료되는것을 확인 할 수 있습니다.</p>

<h5 id="프로바이더-버전">프로바이더 버전</h5>

<p><code class="language-plaintext highlighter-rouge">terraform { required_providers { ... } }</code> 블록을 사용하여 프로바이더 버전을 지정할 수 있습니다.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 4.2.0"</span>
    <span class="p">}</span>
    <span class="nx">azurerm</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/azurerm"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 2.99.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>아래의 주소에서 프로바이더들의 목록과 버전을 확인할 수 있습니다.</p>

<ul>
  <li><a href="https://registry.terraform.io/browse/providers">Terraform Provider Registry</a></li>
</ul>

<p>사이트 접속 후 원하는 프로바이더를 선택하고 우측 상단의 “USE PROVIDER”를 클릭하면 해당 프로바이더의 사용법을 확인할 수 있습니다.</p>

<h5 id="cloud-블록">cloud 블록</h5>

<p><code class="language-plaintext highlighter-rouge">terraform { cloud { ... } }</code> 블록을 사용하여 Terraform Cloud나 Terraform Enterprise 환경에서 사용하는 설정을 지정할 수 있습니다.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">cloud</span> <span class="p">{</span>
    <span class="nx">hostname</span> <span class="p">=</span> <span class="s2">"app.terraform.io"</span>        
    <span class="nx">organization</span> <span class="p">=</span> <span class="s2">"my-org"</span>  
    <span class="nx">workspaces</span> <span class="p">{</span>              
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"my-app-prod"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="backend-블록">backend 블록</h5>

<p><code class="language-plaintext highlighter-rouge">terraform { backend { ... } }</code> 블록을 사용하여 state 파일을 저장하는 위치를 지정할 수 있습니다.</p>

<ul>
  <li>Local 파일 시스템을 사용하는 경우</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">backend</span> <span class="s2">"local"</span> <span class="p">{</span>
    <span class="nx">path</span> <span class="p">=</span> <span class="s2">"relative/path/to/terraform.tfstate"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>AWS S3를 사용하는 경우</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">backend</span> <span class="s2">"s3"</span> <span class="p">{</span>
    <span class="nx">bucket</span> <span class="p">=</span> <span class="s2">"mybucket"</span>
    <span class="nx">key</span>    <span class="p">=</span> <span class="s2">"path/to/my/key"</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"us-west-2"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="resource-블록">resource 블록</h4>

<p>resource 블록은 클라우드 서비스의 인스턴스, 네트워크, 스토리지 등과 같은 구성요소를 정의합니다.</p>

<ul>
  <li>resource는 <code class="language-plaintext highlighter-rouge">resource "&lt;프로바이더이름_리소스유형&gt;" "&lt;사용자 지정 리소스명&gt;" { ... }</code> 형태로 정의합니다.</li>
  <li>
    <p>local 프로바이더의 file 리소스를 사용하는 예시</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>AWS 프로바이더의 ec2 리소스를 사용하는 예시</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="nx">ami</span> <span class="p">=</span> <span class="s2">"ami-a1b2c3d4"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>  
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>리소스 동작 보조 추가 <strong>메타인수</strong>를 정의 할 수 있습니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">depends_on</code> : 종속성을 선언하며, 선언된 구성요소와의 생성 시점에 대해 정의</li>
      <li><code class="language-plaintext highlighter-rouge">count</code> : 선언된 개수에 따라 여러 리소스를 생성</li>
      <li><code class="language-plaintext highlighter-rouge">for_each</code> : map 또는 set 타입의 데이터 배열의 값을 기준으로 여러 리소스를 생성</li>
      <li><code class="language-plaintext highlighter-rouge">provider</code> : 동일한 프로바이더가 다수 정의되어 있는 경우 지정</li>
      <li><code class="language-plaintext highlighter-rouge">lifecycle</code> : 리소스의 수명주기 관리</li>
      <li><code class="language-plaintext highlighter-rouge">provisioner</code> : 리소스 생성 후 추가 작업 정의</li>
      <li><code class="language-plaintext highlighter-rouge">timeouts</code> : 프로바이더에서 정의한 일부 리소스 유형에서는 create, update, delete에 대한 허용 시간 정의 가능</li>
    </ul>
  </li>
</ul>

<h5 id="resource-의-종속성">resource 의 종속성</h5>

<ul>
  <li>테라폼의 종속성은 resource와 module 선언으로 프로비저닝 되는 각 요소의 생성 순서를 정합니다.</li>
  <li>종속성의 종류
    <ul>
      <li>implicit (암시적) 종속성 : 리소스가 다른 리소스를 사용하는 등의 의존성이 있는 경우, 테라폼이 자동으로 종속성을 설정합니다.</li>
      <li>explicit (명시적) 종속성 : <code class="language-plaintext highlighter-rouge">depends_on</code> 메타인수를 사용하여 명시적으로 종속성을 설정할 수 있습니다.</li>
    </ul>
  </li>
  <li>종속성은 <code class="language-plaintext highlighter-rouge">terraform graph</code> 명령어를 통해 시각적으로 확인할 수 있습니다.</li>
  <li>
    <p>종속성이 없는 상태 확인</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"456!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <p>위와같은 파일을 만들고 <code class="language-plaintext highlighter-rouge">terraform graph &gt; graph-1.dot</code> 을 실행하고 vscode의 graphviz 확장을 설치하면 아래와 같은 그래프를 확인할 수 있습니다.</p>

    <svg width="102pt" height="98pt" viewBox="0.00 0.00 102.00 98.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
  <polygon fill="white" stroke="none" points="-4,4 -4,-94 98,-94 98,4 -4,4" />
<!-- local_file.abc -->
<g id="node1" class="node">
  <polygon fill="none" stroke="black" points="94,-36 0,-36 0,0 94,0 94,-36" />
<text text-anchor="middle" x="47" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
</g>
<!-- local_file.def -->
<g id="node2" class="node">
  <polygon fill="none" stroke="black" points="92.5,-90 1.5,-90 1.5,-54 92.5,-54 92.5,-90" />
<text text-anchor="middle" x="47" y="-66.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
</g>
</g>
</svg>
  </li>
  <li>
    <p>암시적 종속성이 있는 상태 확인</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">content</span> <span class="err">+</span> <span class="s2">"456!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <svg width="229pt" height="44pt" viewBox="0.00 0.00 229.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
  <polygon fill="white" stroke="none" points="-4,4 -4,-40 225,-40 225,4 -4,4" />
<!-- local_file.abc -->
<g id="node1" class="node">
  <polygon fill="none" stroke="black" points="94,-36 0,-36 0,0 94,0 94,-36" />
<text text-anchor="middle" x="47" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
</g>
<!-- local_file.def -->
<g id="node2" class="node">
  <polygon fill="none" stroke="black" points="221,-36 130,-36 130,0 221,0 221,-36" />
<text text-anchor="middle" x="175.5" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
</g>
<!-- local_file.def&#45;&gt;local_file.abc -->
<g id="edge1" class="edge">
  <path fill="none" stroke="black" d="M129.54,-18C121.73,-18 113.5,-18 105.4,-18" />
<polygon fill="black" stroke="black" points="105.61,-14.5 95.61,-18 105.61,-21.5 105.61,-14.5" />
</g>
</g>
</svg>
  </li>
  <li>
    <p>명시적 종속성이 있는 상태 확인</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">depends_on</span> <span class="p">=</span> <span class="p">[</span>  <span class="c1"># 명시적 종속성 선언</span>
    <span class="nx">local_file</span><span class="p">.</span><span class="nx">def</span>
  <span class="p">]</span>
  
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"456!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <svg width="229pt" height="44pt" viewBox="0.00 0.00 229.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
  <polygon fill="white" stroke="none" points="-4,4 -4,-40 225,-40 225,4 -4,4" />
<!-- local_file.abc -->
<g id="node1" class="node">
  <polygon fill="none" stroke="black" points="221,-36 127,-36 127,0 221,0 221,-36" />
<text text-anchor="middle" x="174" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
</g>
<!-- local_file.def -->
<g id="node2" class="node">
  <polygon fill="none" stroke="black" points="91,-36 0,-36 0,0 91,0 91,-36" />
<text text-anchor="middle" x="45.5" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
</g>
<!-- local_file.abc&#45;&gt;local_file.def -->
<g id="edge1" class="edge">
  <path fill="none" stroke="black" d="M126.61,-18C118.75,-18 110.52,-18 102.45,-18" />
<polygon fill="black" stroke="black" points="102.71,-14.5 92.71,-18 102.71,-21.5 102.71,-14.5" />
</g>
</g>
</svg>
  </li>
</ul>

<h5 id="리소스-속성-참조">리소스 속성 참조</h5>

<ul>
  <li>리소스 구성에서 참조 가능한 인수와 속성이 있습니다.
    <ul>
      <li>인수 (arguments) : 리소스를 생성할 때 사용자가 선언 하는 값</li>
      <li>속성 (attributes) : 사용자가 설정할 수는 없지만, 리소스가 생성되면 읽을 수 있는 리소스의 고유 값</li>
    </ul>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"&lt;프로바이더_유형&gt;"</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
  <span class="err">&lt;인수&gt;</span>           <span class="p">=</span> <span class="err">&lt;값&gt;</span>
<span class="p">}</span>
  
<span class="c1"># 리소스 참조</span>
<span class="err">&lt;프로바이더</span><span class="nx">_</span><span class="err">유형&gt;.&lt;이름&gt;.&lt;인수&gt;</span>
<span class="err">&lt;프로바이더</span><span class="nx">_</span><span class="err">유형&gt;.&lt;이름&gt;.&lt;속성&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>리소스가 생성될때 사용자가 입력한 인수를 받아서 실제 리소스가 생성되면, 일부 리소스는 자동으로 기본값이나 추가되는 속성이 부여됩니다.
    <ul>
      <li>예) <code class="language-plaintext highlighter-rouge">aws_instance</code> 리소스의 경우 <code class="language-plaintext highlighter-rouge">ami</code>, <code class="language-plaintext highlighter-rouge">instance_type</code> 등의 인수를 받아서 리소스가 생성되면 <code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">public_ip</code> 등의 속성이 부여됩니다.</li>
    </ul>
  </li>
</ul>

<h5 id="리소스의-수명-주기">리소스의 수명 주기</h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lifecycle</code>은 리소스의 기본 수명 주기를 사용자가 제어할 수 있게 해줍니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">create_before_destroy</code> (bool) : 리소스를 새로 생성하기 전에 기존 리소스를 삭제합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">prevent_destroy</code> (bool) : 리소스가 삭제되지 않도록 방지합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">ignore_changes</code> (list) : 특정 인수의 변경을 무시합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">precondition</code> : 리소스를 생성하기 전에 특정 조건을 검증합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">postcondition</code> : Plan 과 Apply 이후의 결과를 속성값으로 검증합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">create_before_destroy</code>
    <ul>
      <li>테라폼은 기본 수명 주기가 <strong>삭제 후 생성</strong>입니다. 즉, 리소스를 새로 생성하기 전에 기존 리소스를 삭제합니다.</li>
      <li>
        <p>의도적으로 생성 후 삭제를 원할때 <code class="language-plaintext highlighter-rouge">create_before_destroy = true</code>를 사용합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 1"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">create_before_destroy</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>하지만 이 상태에서 <code class="language-plaintext highlighter-rouge">terraform apply</code>를 실행하면 파일이 삭제 됩니다. 이는 abc.txt 라는 파일을 생성 한 다음 삭제하기 때문에, 
마지막 동작이 삭제이기 때문에 파일이 없습니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">prevent_destroy</code>
    <ul>
      <li>
        <p>리소스가 삭제되지 않도록 방지합니다. 이 속성은 특정 리소스가 삭제되지 않도록 방지할 때 사용합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 1"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">prevent_destroy</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>이 상태에서 <code class="language-plaintext highlighter-rouge">terraform destroy</code>를 실행하면 아래와 같은 에러가 발생합니다.</p>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform destroy
    
<span class="c"># Error: Instance cannot be destroyed</span>
<span class="c">#  </span>
<span class="c">#  on main.tf line 1:</span>
<span class="c">#   1: resource "local_file" "abc" {</span>
<span class="c">#  </span>
<span class="c"># Resource local_file.abc has lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed. To avoid this error and continue with the plan, either disable</span>
<span class="c"># lifecycle.prevent_destroy or reduce the scope of the plan using the -target option.    </span>
</code></pre></div>        </div>
      </li>
      <li>하지만 리소스를 수정한 다음 <code class="language-plaintext highlighter-rouge">terraform apply -auto-approve</code>를 실행해도 수정시 동일한 오류가 발생합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">destroy</code> 했을때는 이해가 가지만 <code class="language-plaintext highlighter-rouge">apply</code> 시에도 동일한 오류가 발생하는 이유는 수정 동작이 <strong>삭제</strong> 후 생성으로 인식되기 때문입니다.
즉 <code class="language-plaintext highlighter-rouge">apply</code> 시에도 리소스가 수정되면 삭제 단계가 있기 때문에 <code class="language-plaintext highlighter-rouge">prevent_destroy</code>가 적용되어 삭제되지 않습니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">ignore_changes</code>
    <ul>
      <li>
        <p>특정 인수의 변경을 무시합니다. 이 속성은 특정 인수의 변경을 무시하고 리소스를 업데이트할 때 사용합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 1"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">ignore_changes</span> <span class="p">=</span> <span class="p">[</span>
      <span class="nx">content</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>모든 변경울 무시하고 싶다면 <code class="language-plaintext highlighter-rouge">ignore_changes = all</code>을 사용합니다.</p>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">precondition</code>
    <ul>
      <li>리소스를 생성하기 전에 특정 조건을 검증합니다.</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">condition</code>이 <code class="language-plaintext highlighter-rouge">true</code>인지 확인 하고, 조건이 맞지 않는 경우 <code class="language-plaintext highlighter-rouge">error_message</code>로 지정된 에러메시지를 표시합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"file_name"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"step0.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 6"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span><span class="k">}</span><span class="s2">"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">precondition</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span> <span class="p">==</span> <span class="s2">"step6.txt"</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"file name is not </span><span class="se">\"</span><span class="s2">step6.txt</span><span class="se">\"</span><span class="s2">"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>  
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">postcondition</code>
    <ul>
      <li>프로비저닝 이후의 결과를 속성값으로 검증합니다.</li>
      <li>
        <p>마찬가지로 <code class="language-plaintext highlighter-rouge">condition</code> 인수로 검증하고, 조건이 맞지 않는 경우 <code class="language-plaintext highlighter-rouge">error_message</code>로 지정된 에러메시지를 표시합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">""</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/step7.txt"</span>

  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">postcondition</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">content</span> <span class="err">!</span><span class="p">=</span> <span class="s2">""</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"content cannot empty"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">output</span> <span class="s2">"step7_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="실습">실습</h2>

<h3 id="aws에-배포하기">AWS에 배포하기</h3>

<ul>
  <li>
    <p>AWS를 사용하기 위해 awscli 설치</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>awscli 
</code></pre></div>    </div>
  </li>
  <li>
    <p>AWS CLI의 로그인 credentials 설정</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws configure

<span class="c"># access key, secret key, 기본 region 입력</span>
</code></pre></div>    </div>

    <p>서울 리전을 사용하기 위해 <code class="language-plaintext highlighter-rouge">ap-northeast-2</code>를 입력하였습니다.</p>
  </li>
  <li>
    <p>AWS CLI를 사용하여 최신 ubuntu 22.04 AMI 이미지 얻기</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 describe-images <span class="nt">--owners</span> 099720109477 <span class="se">\</span>
  <span class="nt">--filters</span> <span class="s2">"Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span> <span class="s2">"Name=state,Values=available"</span> <span class="se">\</span>
  <span class="nt">--query</span> <span class="s1">'Images|sort_by(@, &amp;CreationDate)[-1].[ImageId, Name]'</span> <span class="nt">--output</span> text
  
<span class="c"># (결과)</span>
<span class="c"># ami-0bcdae8006538619a   ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-20240614</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>환경 변수에 AMI ID 저장</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">TF_VAR_ami_id</span><span class="o">=</span><span class="s2">"ami-0bcdae8006538619a"</span>
</code></pre></div>    </div>

    <p>이렇게 <code class="language-plaintext highlighter-rouge">TF_VAR_</code>를 붙여서 환경변수를 셋팅하면 .tf 파일에서 해당 변수를 사용할 수 있습니다.</p>
  </li>
  <li>
    <p>main.tf 파일 생성</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="c1"># TF_VAR_ami_id 환경변수를 사용하기 위해 선언. var.ami_id 와 같이 사용 가능</span>
<span class="k">variable</span> <span class="s2">"ami_id"</span> <span class="p">{</span> <span class="p">}</span>  
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">ami_id</span><span class="k">}</span><span class="s2">"</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">vpc_security_group_ids</span> <span class="p">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
  
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              echo "Hello, T101 Study 9090" &gt; index.html
              nohup busybox httpd -f -p 9090 &amp;
</span><span class="no">              EOF
  
</span>  <span class="nx">user_data_replace_on_change</span> <span class="p">=</span> <span class="kc">true</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Single-WebSrv"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"instance"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">security_group_name</span>
  
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">9090</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">9090</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">variable</span> <span class="s2">"security_group_name"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The name of the security group"</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"terraform-example-instance"</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span> 
</code></pre></div>    </div>
  </li>
  <li>
    <p>plan 확인 후 apply</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform plan
<span class="c"># plan 확인</span>
terraform apply <span class="nt">-auto-approve</span>
</code></pre></div>    </div>

    <p>다음과 같이 32초 가량 소요 후 최종적으로 생성된 인스턴스의 public ip를 확인 할 수 있습니다.</p>

    <p><img src="/assets/2024/t101-4th/20240616_terraform_apply_1.png" alt="terraform apply 화면" /></p>

    <p>AWS 콘솔에서도 아래와 같이 잘 생성된 EC2 인스턴스와 보안 그룹이 생성된것을 확인 할 수 있었습니다.</p>

    <p><img src="/assets/2024/t101-4th/20240616_terraform_apply_2.png" alt="AWS 콘솔에서 EC2 인스턴스 확인" /></p>

    <p>물론 접속도 잘 됩니다.</p>

    <p><img src="/assets/2024/t101-4th/20240616_terraform_apply_3.png" alt="크롬에서 접속 확인" /></p>
  </li>
  <li>
    <p>destroy 를 사용하여 리소스 삭제</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform destroy 
</code></pre></div>    </div>

    <p>삭제도 잘 되었습니다. :)</p>

    <p><img src="/assets/2024/t101-4th/20240616_terraform_destroy.png" alt="destroy 확인" /></p>
  </li>
</ul>

<h3 id="도전과제-3-lifecycle의-precondition">도전과제 3 <strong>lifecycle의 precondition</strong></h3>
<ul>
  <li>도전과제 : lifecycle의 precondition 실습 내용에서 step<strong>0</strong>.txt ~ step<strong>6</strong>.txt 총 <strong>7개의 파일 이름 중 하나가 일치 시</strong> <strong>검증 조건 만족</strong>으로 <strong>코드 작성</strong></li>
  <li>
    <p>답안 : 정규표현식을 사용하여 아래와 같이 작성하였습니다.</p>

    <div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"file_name"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"step0.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 6"</span> <span class="c1"># 수정</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span><span class="k">}</span><span class="s2">"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">precondition</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="nx">regex</span><span class="p">(</span><span class="s2">"^step[0-6]</span><span class="se">\\</span><span class="s2">.txt</span><span class="err">$</span><span class="s2">"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span><span class="p">))</span> <span class="err">&gt;</span> <span class="mi">0</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"file name is not </span><span class="se">\"</span><span class="s2">step6.txt</span><span class="se">\"</span><span class="s2">"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div>    </div>
  </li>
  <li>
    <p>실행 결과</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step0.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step1.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step2.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step3.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step4.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step5.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step6.txt'</span>

<span class="c"># 아래와 같이 precondition이 true여서 계획이 성립됨</span>
<span class="c">#</span>
<span class="c"># Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span>
<span class="c"># -/+ destroy and then create replacement</span>
<span class="c">#</span>
<span class="c"># Terraform will perform the following actions:</span>
<span class="c"># (이하 생략)  </span>

terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step7.txt'</span>
  
<span class="c"># step0.txt ~ step6.txt 이외의 파일명인 step7.txt가 입력되어서 아래와 같이 에러가 발생함</span>
<span class="c">#</span>
<span class="c"># Planning failed. Terraform encountered an error while generating this plan.</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="마치며">마치며</h2>

<p>이상과 같이 첫주차에는 테라폼 설치에서 부터 <code class="language-plaintext highlighter-rouge">lifecycle</code> 까지 스터디 하였습니다. 
생각보다 외워야 하는 부분이 많아서 나중에 다시 확인하기 위해 키워드 위주로 정리하여 보았습니다.
HCL을 통해 선언적으로 .tf 파일을 만들면 알아서 계획을 만들고 프로비저닝 해준다니 참 똑똑한 도구인것 같습니다. 
앞으로 배우는 내용들도 재밌을것 같아 기대됩니다.</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[앞으로 몇 주간에 걸쳐 테라폼 기초 입문 실습 스터디에 참여하면서 배운 내용을 정리하려 합니다. 이번 글의 주제는 테라폼의 기본 사용법이며 "테라폼으로 시작하는 IaC" 책을 기준으로 정리하였습니다.]]></summary></entry></feed>