<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sweetlittlebird.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sweetlittlebird.github.io/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-06-30T02:09:33+09:00</updated><id>https://sweetlittlebird.github.io/feed.xml</id><title type="html">Sweet Little Bird</title><subtitle>공부 기록과 개발 이야기를 담은 블로그입니다.</subtitle><entry><title type="html">[T101 4기] 테라폼 기본 사용법 3/3</title><link href="https://sweetlittlebird.github.io/posts/2024-06-30-T101-Study-Terraform-Week-3/" rel="alternate" type="text/html" title="[T101 4기] 테라폼 기본 사용법 3/3" /><published>2024-06-30T02:08:00+09:00</published><updated>2024-06-30T02:08:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%203</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-06-30-T101-Study-Terraform-Week-3/"><![CDATA[<ul id="toc" class="section-nav">
</ul>

<h1 id="들어가며">들어가며</h1>

<p>테라폼 기초 입문 실습 스터디 3주차이고, 기본 사용법 마지막 주차입니다.
이번 주에도 학습해야 하는 내용이 많아서 부지런히 달려보겠습니다.
“테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.</p>

<blockquote>
  <p><img src="/assets/2024/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h1 id="hcl-계속">HCL (계속)</h1>

<p>이번주에도 HCL(HashiCorp Configuration Language) 의 문법에 대해 알아보겠습니다.</p>

<h2 id="반복문-22">반복문 (2/2)</h2>

<h3 id="for_each">for_each</h3>

<ul>
  <li>반복문이며 선언된 key 값 개수만큼 리소스를 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">for_each</code> 는 <code class="language-plaintext highlighter-rouge">count</code> 와 비슷하지만, <code class="language-plaintext highlighter-rouge">count</code> 는 인덱스를 사용하고 <code class="language-plaintext highlighter-rouge">for_each</code> 는 키를 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">each</code> object 를 사용하여 <code class="language-plaintext highlighter-rouge">key</code> 와 <code class="language-plaintext highlighter-rouge">value</code> 를 사용할 수 있습니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">each.key</code> : <code class="language-plaintext highlighter-rouge">key</code> 값</li>
      <li><code class="language-plaintext highlighter-rouge">each.value</code> : <code class="language-plaintext highlighter-rouge">value</code> 값 (<code class="language-plaintext highlighter-rouge">set</code> 타입을 사용하면 <code class="language-plaintext highlighter-rouge">each.key</code> 와 같습니다.)</li>
    </ul>
  </li>
  <li>for_each 는 <strong><code class="language-plaintext highlighter-rouge">map</code>과 <code class="language-plaintext highlighter-rouge">set</code> 타입만을 허용</strong>합니다. 따라서 <code class="language-plaintext highlighter-rouge">map</code>과 <code class="language-plaintext highlighter-rouge">set</code> 타입이 아닌 표현식은 <code class="language-plaintext highlighter-rouge">tomap()</code>, <code class="language-plaintext highlighter-rouge">toset()</code> 등을 통해 변환해서 사용할 수 있습니다.</li>
  <li>실습 1. <code class="language-plaintext highlighter-rouge">for_each</code> 사용하기
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="c1"># map 타입으로 선언</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">tomap</span><span class="p">({</span>
    <span class="nx">a</span> <span class="p">=</span> <span class="s2">"content a"</span>
    <span class="nx">b</span> <span class="p">=</span> <span class="s2">"content b"</span>
  <span class="p">})</span>
  
  <span class="c1"># 파일 제목은 key 값으로 설정 (a, b)</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>

  <span class="c1"># 파일 내용은 value 값으로 설정 (content a, content b)</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>

<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="c1"># toset() 함수를 사용하여 set 타입으로 변환</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">toset</span><span class="p">([</span><span class="s2">"ccc"</span><span class="p">,</span> <span class="s2">"ddd"</span><span class="p">,</span> <span class="s2">"eee"</span><span class="p">])</span>
  
  <span class="c1"># 파일 제목은 key 값으로 설정</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
  
  <span class="c1"># 파일 내용은 value 값으로 설정 (set의 경우 value와 key가 같음)</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc["a"]</span>
<span class="c">#    local_file.abc["b"]</span>
<span class="c">#    local_file.def["ccc"]</span>
<span class="c">#    local_file.def["ddd"]</span>
<span class="c">#    local_file.def["eee"]</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.abc["a"]'</span> | terraform console
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.abc["a"].content'</span> | terraform console
<span class="c"># =&gt; "content a"</span>
    
<span class="nv">$ </span><span class="nb">cat </span>a.txt
<span class="c"># =&gt; content a</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.def["ccc"].content'</span> | terraform console
<span class="nv">$ </span><span class="nb">cat </span>ccc.txt
<span class="c"># =&gt; "ccc"   # key와 value가 같음을 확인할 수 있음  </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>실습 2. <code class="language-plaintext highlighter-rouge">variable</code> 블록을 사용해 선언된 변수를 사용하여 <code class="language-plaintext highlighter-rouge">local_file.abc</code> 리소스를 생성하고, <code class="language-plaintext highlighter-rouge">local_file.abc</code> 리소스를 사용하여 <code class="language-plaintext highlighter-rouge">local_file.def</code> 리소스를 생성합니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"names"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="p">=</span> <span class="s2">"content a"</span>
    <span class="nx">b</span> <span class="p">=</span> <span class="s2">"content b"</span>
    <span class="nx">c</span> <span class="p">=</span> <span class="s2">"content c"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">names</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="c1"># 앞에서 만든 local_file.abc 리소스를 사용</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span>  
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc["a"]</span>
<span class="c">#    local_file.abc["b"]</span>
<span class="c">#    local_file.abc["c"]</span>
<span class="c">#    local_file.def["a"]</span>
<span class="c">#    local_file.def["b"]</span>
<span class="c">#    local_file.def["c"]</span>
    
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-1</span> <span class="k">*</span>.txt
<span class="c"># =&gt; abc-a.txt</span>
<span class="c">#    abc-b.txt    </span>
<span class="c">#    abc-c.txt    </span>
<span class="c">#    def-a.txt    </span>
<span class="c">#    def-b.txt    </span>
<span class="c">#    def-c.txt</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'local_file.abc["a"].content'</span> | terraform console
<span class="c"># =&gt; "content a"    </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>실습 3. “실습 2”에서 <code class="language-plaintext highlighter-rouge">names</code> 변수의 b 값을 삭제하고 <code class="language-plaintext highlighter-rouge">terraform apply</code> 명령어를 실행합니다. 
<code class="language-plaintext highlighter-rouge">count</code>와는 달리 중간의 항목이 삭제되어도 제대로 동작하는것을 확인할 수 있습니다.</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"names"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="p">=</span> <span class="s2">"content a"</span>
    <span class="nx">c</span> <span class="p">=</span> <span class="s2">"content c"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">names</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="c1"># 앞에서 만든 local_file.abc 리소스를 사용</span>
  <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span>  
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">each</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def-</span><span class="k">${</span><span class="nx">each</span><span class="p">.</span><span class="nx">key</span><span class="k">}</span><span class="s2">.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#      # local_file.abc["b"] will be destroyed</span>
<span class="c">#    ...</span>
<span class="c">#      # local_file.def["b"] will be destroyed</span>
<span class="c">#    ...</span>
<span class="c">#    Apply complete! Resources: 0 added, 0 changed, 2 destroyed.</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc["a"]</span>
<span class="c">#    local_file.abc["c"]</span>
<span class="c">#    local_file.def["a"]</span>
<span class="c">#    local_file.def["c"]</span>
    
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-1</span> <span class="k">*</span>.txt
<span class="c"># =&gt; abc-a.txt</span>
<span class="c">#    abc-c.txt</span>
<span class="c">#    def-a.txt</span>
<span class="c">#    def-c.txt    </span>
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">count</code>와는 다르게 중간의 항목이 삭제되어도 제대로 동작하여 키가 <code class="language-plaintext highlighter-rouge">b</code>인 것에 관련된 항목이 삭제되었음을 확인할 수 있습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="for-expression">for Expression</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">for</code> Expression은 <code class="language-plaintext highlighter-rouge">for</code> 문을 사용하여 <code class="language-plaintext highlighter-rouge">set</code>이나 <code class="language-plaintext highlighter-rouge">list</code>, <code class="language-plaintext highlighter-rouge">map</code>의 항목들에 대해 반복적으로 작업을 수행할 수 있습니다.</li>
  <li>python의 <code class="language-plaintext highlighter-rouge">list comprehension</code>과 비슷한 기능을 제공합니다.</li>
  <li>기본적인 사용법은 아래와 같습니다.
    <ul>
      <li>리턴 타입이 tuple 인 경우
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">for</span> <span class="err">&lt;항목의</span> <span class="err">변수명&gt;</span> <span class="nx">in</span> <span class="err">&lt;</span><span class="nx">set</span><span class="p">,</span> <span class="nx">list</span><span class="p">,</span> <span class="nx">map</span> <span class="err">등의</span> <span class="err">콜렉션&gt;</span> <span class="err">:</span> <span class="err">&lt;항목의</span> <span class="err">변수명을</span> <span class="err">가공하는</span> <span class="err">표현식&gt;</span><span class="p">]</span>
</code></pre></div>        </div>
      </li>
      <li>리턴 타입이 object 인 경우
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nx">for</span> <span class="err">&lt;항목의</span> <span class="err">변수명&gt;</span> <span class="nx">in</span> <span class="err">&lt;</span><span class="nx">set</span><span class="p">,</span> <span class="nx">list</span><span class="p">,</span> <span class="nx">map</span> <span class="err">등의</span> <span class="err">콜렉션&gt;</span> <span class="err">:</span> <span class="err">&lt;결과</span> <span class="err">키&gt;</span> <span class="p">=</span><span class="err">&gt;</span> <span class="err">&lt;결과</span> <span class="err">값&gt;</span><span class="p">}</span>
</code></pre></div>        </div>
        <p>리턴되는 키와 값은 <code class="language-plaintext highlighter-rouge">=&gt;</code> 로 구분합니다.</p>
      </li>
      <li>콜렉션이 <code class="language-plaintext highlighter-rouge">list</code> 유형인 경우 <code class="language-plaintext highlighter-rouge">&lt;항목의 변수명&gt;</code>이 <strong>하나인 경우 값</strong>을, <strong>두개인 경우 “,” (쉼표)로 구분하여, 앞의 인수가 인덱스, 뒤의 인수가 값</strong>을 반환합니다.
        <ul>
          <li>관용적으로 인덱스는 <code class="language-plaintext highlighter-rouge">i</code>, 값은 <code class="language-plaintext highlighter-rouge">v</code>로 표현합니다.
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
      
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tolist</span><span class="p">([</span><span class="s2">"aa"</span><span class="p">,</span> <span class="s2">"bb"</span><span class="p">,</span> <span class="s2">"cc"</span><span class="p">,</span> <span class="s2">"dd"</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [ "Aa", "Bb", "Cc", "Dd" ]    </span>
      
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tolist</span><span class="p">([</span><span class="s2">"aa"</span><span class="p">,</span> <span class="s2">"bb"</span><span class="p">,</span> <span class="s2">"cc"</span><span class="p">,</span> <span class="s2">"dd"</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">i</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [ "0 =&gt; Aa", "1 =&gt; Bb", "2 =&gt; Cc", "3 =&gt; Dd" ]    </span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>콜렉션이 <code class="language-plaintext highlighter-rouge">map</code> 유형인 경우 <code class="language-plaintext highlighter-rouge">&lt;항목의 변수명&gt;</code>이 <strong>하나인 경우 값</strong>을, <strong>두개인 경우 “,” (쉼표)로 구분하여, 앞의 인수가 키, 뒤의 인수가 값</strong>을 반환합니다.
        <ul>
          <li>관용적으로 키는 <code class="language-plaintext highlighter-rouge">k</code>, 값은 <code class="language-plaintext highlighter-rouge">v</code>로 표현합니다.
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>

<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [</span>
<span class="c1">#      "234",</span>
<span class="c1">#      "GILDONG"</span>
<span class="c1">#    ]</span>
            
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [</span>
<span class="c1">#      "AGE =&gt; 234",</span>
<span class="c1">#      "NAME =&gt; Gildong",</span>
<span class="c1">#    ]</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">if</code> 를 통해 특정 조건을 만족하는 값만 가공하여 리턴 할 수 있습니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
    
<span class="c1"># 짝수인 경우만 제곱한 값을 리턴</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tolist</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">pow</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span> <span class="nx">if</span> <span class="nx">v</span> <span class="err">%</span> <span class="mi">2</span> <span class="err">==</span> <span class="mi">0</span><span class="p">]</span>
<span class="c1"># =&gt; [ 4, 16 ]</span>
    
<span class="c1"># 키가 "age"인 경우 제외하고 가공</span>
<span class="err">&gt;</span> <span class="p">{</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="nx">upper</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">title</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="nx">if</span> <span class="nx">k</span> <span class="err">!</span><span class="p">=</span> <span class="s2">"age"</span><span class="p">}</span>
<span class="c1"># =&gt; { "NAME" = "Gildong" }</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>실습
    <ul>
      <li>간단한 for 표현식 실습
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
    
<span class="c1"># 1. tuple 타입을 사용하여 for 표현식 사용</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">value</span> <span class="nx">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="err">:</span> <span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">value</span> <span class="p">*</span> <span class="nx">value</span><span class="p">)</span> <span class="p">]</span>
<span class="c1"># =&gt; [ 1, 2, 16, 512 ]</span>
    
<span class="c1"># 2. set 타입을 사용하여 for 표현식 사용</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">name</span> <span class="nx">in</span> <span class="nx">toset</span><span class="p">([</span><span class="s2">"gildong"</span><span class="p">,</span> <span class="s2">"sejong"</span><span class="p">])</span> <span class="err">:</span> <span class="s2">"Hi, </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="k">}</span><span class="s2">!"</span> <span class="p">]</span>
<span class="c1"># =&gt; [ "Hi, Gildong!", "Hi, Sejong!", ]</span>
    
<span class="c1"># 3. map 타입을 사용하여 for 표현식 사용</span>
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
<span class="c1"># =&gt; [</span>
<span class="c1">#      "AGE =&gt; 234",</span>
<span class="c1">#      "NAME =&gt; Gildong",</span>
<span class="c1">#    ]</span>
    
<span class="c1"># 4. 타입 확인</span>
<span class="err">&gt;</span> <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="nx">in</span> <span class="nx">tomap</span><span class="p">({</span> <span class="nx">name</span> <span class="p">=</span> <span class="s2">"gildong"</span><span class="p">,</span> <span class="nx">age</span> <span class="p">=</span> <span class="mi">234</span> <span class="p">})</span> <span class="err">:</span> <span class="s2">"</span><span class="k">${</span><span class="nx">upper</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span><span class="k">}</span><span class="s2"> =&gt; </span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span><span class="err">)</span>
<span class="c1"># =&gt; tuple([</span>
<span class="c1">#      string,</span>
<span class="c1">#      string,</span>
<span class="c1">#    ])</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>악분님 for expression 실습</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># main.tf </span>
 <span class="k">variable</span> <span class="s2">"fruits_set"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">set</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>
   <span class="nx">description</span> <span class="p">=</span> <span class="s2">"fruit example"</span>
 <span class="p">}</span>
      
 <span class="k">variable</span> <span class="s2">"fruits_list"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>
   <span class="nx">description</span> <span class="p">=</span> <span class="s2">"fruit example"</span>
 <span class="p">}</span>
      
 <span class="k">variable</span> <span class="s2">"fruits_map"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">{</span><span class="s2">"first"</span><span class="err">:</span> <span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"second"</span><span class="err">:</span> <span class="s2">"banana"</span><span class="p">}</span>
   <span class="nx">description</span> <span class="p">=</span> <span class="s2">"fruit example"</span>
 <span class="p">}</span>  
</code></pre></div>        </div>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
      
 <span class="kd">var</span><span class="err">.</span><span class="nx">fruits_set</span>                                        <span class="c1"># =&gt; toset(["apple", "banana"]) </span>
 <span class="kd">var</span><span class="err">.</span><span class="nx">fruits_list</span>                                       <span class="c1"># =&gt; tolist(["apple", "banana"]) </span>
 <span class="kd">var</span><span class="err">.</span><span class="nx">fruits_map</span>                                        <span class="c1"># =&gt; tomap({"first" = "apple", "second" = "banana"})</span>
                                                            
 <span class="nx">type</span><span class="err">(</span><span class="kd">var</span><span class="err">.</span><span class="nx">fruits_set</span><span class="err">)</span>                                  <span class="c1"># =&gt; set(string)</span>
 <span class="nx">type</span><span class="err">(</span><span class="kd">var</span><span class="err">.</span><span class="nx">fruits_list</span><span class="err">)</span>                                 <span class="c1"># =&gt; list(string)</span>
 <span class="nx">type</span><span class="err">(</span><span class="kd">var</span><span class="err">.</span><span class="nx">fruits_map</span><span class="err">)</span>                                  <span class="c1"># =&gt; map(string)</span>
      
 <span class="c1"># for item in var.fruits_set: item                    # 오류 발생! []로 감싸야함 </span>
 <span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span>                    <span class="c1"># =&gt; ["apple", "banana"]</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span><span class="err">)</span>              <span class="c1"># =&gt; tuple([string, string])</span>
      
 <span class="c1"># {for item in var.fruits_set: item}                  # 오류 발생! {}로 감싸졌으나 결과 값이 key, value 형태가 아님</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span>       <span class="c1"># =&gt; { "apple" = "apple", "banana" = "banana" }</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_set</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span><span class="err">)</span> <span class="c1"># =&gt; object({apple: string, banana: string})</span>
      
 <span class="c1"># for item in var.fruits_list: item                   # 오류 발생! []로 감싸야함</span>
 <span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span>                   <span class="c1"># =&gt; ["apple", "banana"]</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span><span class="err">)</span>             <span class="c1"># =&gt; tuple([string, string])</span>
      
 <span class="c1"># {for item in var.fruits_list: item}                 # 오류 발생! {}로 감싸졌으나 결과 값이 key, value 형태가 아님</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span>      <span class="c1"># =&gt; { "0" = "apple", "1" = "banana" }</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">i</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span>                 <span class="c1"># =&gt; { "0" = "apple", "1" = "banana" }</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">{</span><span class="nx">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_list</span><span class="err">:</span> <span class="nx">i</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span><span class="err">)</span>           <span class="c1"># =&gt; object({0: string, 1: string})</span>
          
 <span class="c1"># for item in var.fruits_map: item                    # 오류 발생! []로 감싸야함</span>
 <span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span>                    <span class="c1"># =&gt; ["apple", "banana"]</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">[</span><span class="nx">for</span> <span class="nx">item</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">item</span><span class="p">]</span><span class="err">)</span>              <span class="c1"># =&gt; tuple([string, string])</span>
          
 <span class="c1"># {for item in var.fruits_map: item}                  # 오류 발생! {}로 감싸졌으나 결과 값이 key, value 형태가 아님</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">key</span><span class="p">,</span><span class="nx">value</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">key</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">value</span><span class="p">}</span>       <span class="c1"># =&gt; { "first" = "apple", "second" = "banana" }</span>
 <span class="p">{</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">k</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span>                  <span class="c1"># =&gt; { "first" = "apple", "second" = "banana" }</span>
 <span class="nx">type</span><span class="err">(</span><span class="p">{</span><span class="nx">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="nx">in</span> <span class="kd">var</span><span class="p">.</span><span class="nx">fruits_map</span><span class="err">:</span> <span class="nx">k</span> <span class="p">=</span><span class="err">&gt;</span> <span class="nx">v</span><span class="p">}</span><span class="err">)</span>            <span class="c1"># =&gt; object({first: string, second: string}) </span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="dynamic">dynamic</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">count</code>나 <code class="language-plaintext highlighter-rouge">for_each</code>를 사용하여 리소스 전체를 여러개 생성하는것 외에도 리소스 내부의 속성 블록을 동적으로 생성할 수 있습니다.</li>
  <li>예를 들어 archive 프로바이더의 <code class="language-plaintext highlighter-rouge">archive_file</code> 리소스의 <code class="language-plaintext highlighter-rouge">source</code> 속성에 여러 파일을 동적으로 지정할 수 있습니다.
    <ul>
      <li>dynamic을 사용하지 않았을 때
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"archive_file"</span> <span class="s2">"files"</span> <span class="p">{</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="s2">"zip"</span>
  <span class="nx">output_path</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/files.zip"</span>
    
  <span class="nx">source</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"hello a"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"a.txt"</span>
  <span class="p">}</span>
    
  <span class="nx">source</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"hello b"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"b.txt"</span>
  <span class="p">}</span>
    
  <span class="nx">source</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"hello c"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"c.txt"</span>
  <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div>        </div>
        <ul>
          <li>실행 후 확인
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show data.archive_file.files

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].filename"</span> | terraform console
<span class="c"># =&gt; "a.txt"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].content"</span> | terraform console
<span class="c"># =&gt; "hello a"      </span>
<span class="nv">$ </span>unzip files.zip
<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.txt
<span class="c"># =&gt; a.txt b.txt c.txt</span>
<span class="nv">$ </span><span class="nb">cat </span>a.txt
<span class="c"># =&gt; hello a</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>dynamic을 사용했을 때
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"files"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">object</span><span class="p">({</span> <span class="nx">content</span>  <span class="p">=</span> <span class="nx">string</span> <span class="p">}))</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
    <span class="s2">"a.txt"</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">content</span> <span class="p">=</span> <span class="s2">"hello a"</span> <span class="p">}</span>
    <span class="s2">"b.txt"</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">content</span> <span class="p">=</span> <span class="s2">"hello b"</span> <span class="p">}</span>
    <span class="s2">"c.txt"</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">content</span> <span class="p">=</span> <span class="s2">"hello c"</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">data</span> <span class="s2">"archive_file"</span> <span class="s2">"files"</span> <span class="p">{</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="s2">"zip"</span>
  <span class="nx">output_path</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/files.zip"</span>
    
  <span class="nx">dynamic</span> <span class="s2">"source"</span> <span class="p">{</span>
    <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">files</span>
    
    <span class="nx">content</span> <span class="p">{</span>
      <span class="nx">filename</span> <span class="p">=</span> <span class="nx">source</span><span class="p">.</span><span class="nx">key</span>
      <span class="nx">content</span>  <span class="p">=</span> <span class="nx">source</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>실행 후 확인
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show data.archive_file.files

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].filename"</span> | terraform console
<span class="c"># =&gt; "a.txt"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"tolist(data.archive_file.files.source)[0].content"</span> | terraform console
<span class="c"># =&gt; "hello a"      </span>
<span class="nv">$ </span>unzip files.zip
<span class="nv">$ </span><span class="nb">ls</span> <span class="k">*</span>.txt
<span class="c"># =&gt; a.txt b.txt c.txt</span>
<span class="nv">$ </span><span class="nb">cat </span>a.txt
<span class="c"># =&gt; hello a</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>이와 같이 <code class="language-plaintext highlighter-rouge">dynamic</code>을 사용하면 반복되는 수가 많아져도 데이터만 바꾸면 되니 코드 중복을 줄일 수 있고, 유지보수가 용이해집니다.
    <ul>
      <li>또한 <code class="language-plaintext highlighter-rouge">dynamic</code>은 다음과 같이 <code class="language-plaintext highlighter-rouge">dynamic</code>안에 또 <code class="language-plaintext highlighter-rouge">dynamic</code>을 사용하여 중첩할 수 있어서 상당히 편리합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="err">...</span>
  <span class="nx">dynamic</span> <span class="s2">"origin_group"</span> <span class="p">{</span>
    <span class="nx">for_each</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">load_balancer_origin_groups</span>
    <span class="nx">content</span> <span class="p">{</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="nx">origin_group</span><span class="p">.</span><span class="nx">key</span>
  
      <span class="nx">dynamic</span> <span class="s2">"origin"</span> <span class="p">{</span>
        <span class="nx">for_each</span> <span class="p">=</span> <span class="nx">origin_group</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">origins</span>
        <span class="nx">content</span> <span class="p">{</span>
          <span class="nx">hostname</span> <span class="p">=</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">hostname</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span> 
  <span class="err">...</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="조건문-conditional-expression">조건문 (Conditional Expression)</h2>
<ul>
  <li>조건문은 테라폼에서는 다음과 같이 3항 연산자 형태로 사용할 수 있습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;</span><span class="nx">condition</span><span class="err">&gt;</span> <span class="err">?</span> <span class="err">&lt;</span><span class="nx">condition</span><span class="err">이</span> <span class="err">참일때</span> <span class="err">값&gt;</span> <span class="err">:</span> <span class="err">&lt;</span><span class="nx">condition</span><span class="err">이</span> <span class="err">거짓일때</span> <span class="err">값&gt;</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">?</code>를 기준으로 좌측에는 조건이며, 우측에는 <code class="language-plaintext highlighter-rouge">:</code> 기호룰 기준으로 좌측은 조건에 대해 참일 때의 값, 우측은 거짓일 때의 값을 나타냅니다.</li>
      <li>즉 <code class="language-plaintext highlighter-rouge">?</code> 좌측의 조건이 참일때는 <code class="language-plaintext highlighter-rouge">:</code> 앞의 참 값을, 거짓 일때는 <code class="language-plaintext highlighter-rouge">:</code> 뒤의 거짓 값을 반환합니다.</li>
      <li>다음의 예에서 var.a 가 빈 문자열이 아니면 var.a를, 빈 문자열이면 “default”를 반환합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">...</span>
<span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">!=</span> <span class="s2">""</span> <span class="err">?</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">:</span> <span class="s2">"default"</span>
<span class="err">...</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>실습
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
  
<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">1</span> <span class="err">?</span> <span class="s2">"1과 1은 같다"</span> <span class="err">:</span> <span class="s2">"1과 1은 다르다"</span>
<span class="c1"># =&gt; "1과 1은 같다" </span>

<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">2</span> <span class="err">?</span> <span class="s2">"1과 2는 같다"</span> <span class="err">:</span> <span class="s2">"1과 2는 다르다"</span>
<span class="c1"># =&gt; "1과 2는 다르다"</span>
</code></pre></div>    </div>
  </li>
  <li>조건이 참일때의 값과 거짓일때의 값의 타입이 다를 경우, 테라폼은 자동으로 문자열 타입으로 변환하여 반환합니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>

<span class="err">&gt;</span> <span class="mi">3</span> <span class="err">==</span> <span class="mi">4</span> <span class="err">?</span> <span class="mi">3</span> <span class="err">:</span> <span class="mi">4</span>
<span class="c1"># =&gt; 4</span>
  
<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">1</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="s2">"two"</span>
<span class="c1"># =&gt; "1"</span>
  
<span class="err">&gt;</span> <span class="mi">1</span> <span class="err">==</span> <span class="mi">2</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="s2">"two"</span>
<span class="c1"># =&gt; "two"</span>
</code></pre></div>    </div>
    <p>위의 예제와 같이 1 == 1 일때 값이 숫자 1이지만 문자열 “1”을 반환함을 확인할 수 있습니다.</p>
  </li>
  <li>가능하면 명시적으로 타입을 지정하여 사용하는 것이 좋습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
  
<span class="err">&gt;</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="s2">"two"</span>            <span class="c1"># 비권장</span>
<span class="err">&gt;</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">?</span> <span class="s2">"1"</span> <span class="err">:</span> <span class="s2">"two"</span>          <span class="c1"># 권장</span>
<span class="err">&gt;</span> <span class="kd">var</span><span class="err">.</span><span class="nx">a</span> <span class="err">?</span> <span class="nx">tostring</span><span class="err">(</span><span class="mi">1</span><span class="err">)</span> <span class="err">:</span> <span class="s2">"two"</span>  <span class="c1"># 권장</span>
</code></pre></div>    </div>
  </li>
  <li>조건문을 사용하여 리소스 생성 여부를 결정할 수 있습니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"enable"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="kc">true</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">enable</span> <span class="err">?</span> <span class="mi">1</span> <span class="err">:</span> <span class="mi">0</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"content abc"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; local_file.abc[0]</span>
<span class="nv">$ </span><span class="nb">cat </span>abc.txt
<span class="c"># =&gt; content abc</span>
    
<span class="c"># 변수의 default 보다 우선순위가 높은 환경변수를 통해 enable 변수를 false로 변경</span>
    
<span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_VAR_enable</span><span class="o">=</span><span class="nb">false</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; 없음</span>
<span class="nv">$ </span><span class="nb">cat </span>abc.txt
<span class="c"># =&gt; cat: abc.txt: No such file or directory </span>
</code></pre></div>        </div>
        <p>위와 같이 var.enable 변수 값에 따라 true 일때는 파일이 생성되고, false 일때는 파일이 생성되지 않음을 확인할 수 있습니다.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="함수-function">함수 (Function)</h2>

<ul>
  <li>테라폼에서는 프로그래밍 언어 처럼 값의 유형을 변경하거나 가공할 수 있는 다양한 내장 함수를 제공합니다.</li>
  <li>전체 함수 목록은 <a href="https://www.terraform.io/docs/language/functions/index.html">공식문서</a>에서 확인할 수 있습니다.</li>
  <li>사용자 정의 함수는 지원하지 않으며, 숫자, 문자열, 컬렉션, 인코딩, 날짜, 파일, 네트워크 등 다양한 함수를 제공합니다.</li>
  <li>실습
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">console</span>
  
<span class="err">&gt;</span> <span class="nx">upper</span><span class="err">(</span><span class="s2">"hello"</span><span class="err">)</span>                          <span class="c1"># =&gt; "HELLO"</span>
<span class="err">&gt;</span> <span class="nx">title</span><span class="err">(</span><span class="s2">"hello world"</span><span class="err">)</span>                    <span class="c1"># =&gt; "Hello World"</span>
<span class="err">&gt;</span> <span class="nx">max</span><span class="err">(</span><span class="mi">1</span><span class="err">,</span> <span class="mi">20</span><span class="err">,</span> <span class="mi">3</span><span class="err">,</span> <span class="mi">40</span><span class="err">,</span> <span class="mi">5</span><span class="err">)</span>                    <span class="c1"># =&gt; 40</span>
<span class="err">&gt;</span> <span class="nx">cidrnetmask</span><span class="err">(</span><span class="s2">"172.16.0.0/12"</span><span class="err">)</span>            <span class="c1"># =&gt; "255.240.0.0"</span>
<span class="err">&gt;</span> <span class="nx">cidrsubnet</span><span class="err">(</span><span class="s2">"1.1.1.0/24"</span><span class="err">,</span> <span class="mi">1</span><span class="err">,</span> <span class="mi">0</span><span class="err">)</span>          <span class="c1"># =&gt; "1.1.1.0/25"</span>
<span class="err">&gt;</span> <span class="nx">cidrsubnet</span><span class="err">(</span><span class="s2">"1.1.1.0/24"</span><span class="err">,</span> <span class="mi">1</span><span class="err">,</span> <span class="mi">1</span><span class="err">)</span>          <span class="c1"># =&gt; "1.1.1.128/25"</span>
<span class="err">&gt;</span> <span class="nx">cidrsubnets</span><span class="err">(</span><span class="s2">"10.1.0.0/16"</span><span class="err">,</span> <span class="mi">4</span><span class="err">,</span> <span class="mi">4</span><span class="err">,</span> <span class="mi">8</span><span class="err">,</span> <span class="mi">4</span><span class="err">)</span>  <span class="c1"># =&gt; tolist([</span>
                                          <span class="c1">#      "10.1.0.0/20",</span>
                                          <span class="c1">#      "10.1.16.0/20",</span>
                                          <span class="c1">#      "10.1.32.0/24",</span>
                                          <span class="c1">#      "10.1.48.0/20",</span>
                                          <span class="c1">#    ])  </span>
<span class="err">&gt;</span> <span class="nx">timestamp</span><span class="err">()</span>                             <span class="c1"># =&gt; "2024-06-27T14:00:00Z"</span>
<span class="err">&gt;</span> <span class="s2">"</span><span class="k">${</span><span class="nx">title</span><span class="p">(</span><span class="s2">"hello world again"</span><span class="p">)</span><span class="k">}</span><span class="s2">!!"</span>       <span class="c1"># =&gt; "Hello World Again!!"</span>
  
<span class="err">&gt;</span> <span class="p">[</span><span class="nx">for</span> <span class="nx">a</span> <span class="nx">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="err">:</span> <span class="nx">cidrsubnet</span><span class="p">(</span><span class="s2">"1.1.1.0/24"</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">a</span><span class="p">)]</span>  <span class="c1"># =&gt; [</span>
                                                         <span class="c1">#      "1.1.1.0/26",</span>
                                                         <span class="c1">#      "1.1.1.64/26",</span>
                                                         <span class="c1">#      "1.1.1.128/26",</span>
                                                         <span class="c1">#      "1.1.1.192/26",</span>
                                                         <span class="c1">#    ]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="프로비저너-provisioner">프로비저너 (provisioner)</h2>
<ul>
  <li>프로비저너는 리소스가 생성된 후에 리소스에 대한 추가적인 설정이나 초기화 작업을 수행하는 기능입니다.</li>
  <li>프로바이더로 실행되지 않는 명령어 실행과 파일 복사 같은 역할을 수행할 수 있습니다.</li>
  <li>단, 프로비저너를 통한 작업은 <strong>상태(state)가 관리 되지 않으며</strong>, <strong>프로비저닝에 대한 결과가 항상 같다고 보장할 수 없기에</strong>
다른 방안이 없을때 최후의 수단으로만 사용해야 합니다.
    <ul>
      <li>프로비저너의 대안
        <ul>
          <li>AWS EC2의 경우 테라폼 코드 <code class="language-plaintext highlighter-rouge">user_data</code> 사용
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="err">...</span>
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>           <span class="p">=</span> <span class="s2">"..."</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>
      
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
  #!/bin/bash
  echo "Hello, World" &gt; index.html
  nohup busybox httpd -f -p 8080 &amp;
</span><span class="no">  EOF
</span><span class="p">}</span>   
</code></pre></div>            </div>
          </li>
          <li><a href="https://developer.hashicorp.com/terraform/tutorials/provision/cloud-init">cloud-init</a>,
<a href="https://developer.hashicorp.com/terraform/tutorials/provision/packer">packer</a>,
<a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/connection">provisioner connections</a> 등을 사용</li>
          <li>별도의 설정 관리툴 사용 (Ansible, Chef, Puppet 등)</li>
        </ul>
      </li>
      <li>이전에는 <code class="language-plaintext highlighter-rouge">local-exec</code> 프로비저너를 통해서 ansible과 연동하여 인프라 프로비저닝 후 구성을 관리하였으나, 
최근에는 이를 개선하여 <a href="https://registry.terraform.io/providers/ansible/ansible/latest/docs">terraform-provider-ansible</a>을 사용합니다.</li>
    </ul>
  </li>
</ul>

<h3 id="local-exec-프로비저너">local-exec 프로비저너</h3>
<ul>
  <li>테라폼이 실행되는 로컬에서 실행되는 명령어를 실행할 수 있습니다.</li>
  <li>리눅스나 윈도우 등 실행 환경에 맞게 커맨드를 정의해야 하며, 다음의 인수 값을 사용합니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">command</code> (필수) : 실행할 명령어를 정의합니다. «EOF를 사용하여 여러줄로 정의할 수 있습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">working_dir</code> (선택) : 명령어를 실행할 디렉토리를 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">interpreter</code> (선택) : 배열로 명령어를 실행할 인터프리터를 지정합니다. 첫번째 인수는 인터프리터 명령어 이름이고, 두번째 부터는 인수 값입니다.</li>
      <li><code class="language-plaintext highlighter-rouge">environment</code> (선택) : 실행시의 환경 변수에 추가적인 환경 변수를 설정합니다. key = value 형태로 정의합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">on_failure</code> (선택) : 명령어 실행이 실패했을 때 실행할 명령어를 정의합니다.</li>
    </ul>
  </li>
  <li>예시
    <ul>
      <li>Unix/Linux/macOS
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="k">provisioner</span> <span class="s2">"local-exec"</span> <span class="p">{</span>
    <span class="nx">command</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
      echo "Hello, World $FOO"
</span><span class="no">      EOF
</span>    <span class="nx">interpreter</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"bash"</span><span class="p">,</span> <span class="s2">"-c"</span><span class="p">]</span>
    <span class="nx">working_dir</span> <span class="p">=</span> <span class="s2">"/tmp"</span>
    <span class="nx">environment</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">FOO</span> <span class="p">=</span> <span class="s2">"bar"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>실행결과
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    null_resource.example: Provisioning with 'local-exec'...</span>
<span class="c">#    null_resource.example (local-exec): Executing: ["bash" "-c" "          echo \"Hello, World $FOO\"\n"]</span>
<span class="c">#    null_resource.example (local-exec): Hello, World bar</span>
      
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span>terraform state show null_resource.example
<span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate 
</code></pre></div>            </div>
            <p>명령이 실행은 되나 상태 파일에는 프로비저닝에 대한 정보가 저장되지 않음을 확안 할 수 있습니다.</p>
          </li>
        </ul>
      </li>
      <li>Windows
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="k">provisioner</span> <span class="s2">"local-exec"</span> <span class="p">{</span>
    <span class="nx">command</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
      echo "Hello, World %FOO%"
</span><span class="no">      EOF
</span>    <span class="nx">interpreter</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"PowerShell"</span><span class="p">,</span> <span class="s2">"-Command"</span><span class="p">]</span>
    <span class="nx">working_dir</span> <span class="p">=</span> <span class="s2">"C:</span><span class="se">\\</span><span class="s2">windows</span><span class="se">\\</span><span class="s2">temp"</span>
    <span class="nx">environment</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">FOO</span> <span class="p">=</span> <span class="s2">"bar"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="원격지-연결">원격지 연결</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">remote-exec</code>와 <code class="language-plaintext highlighter-rouge">file</code> 프로비저너를 사용하여 원격지 서버에 명령어를 실행하거나 파일을 복사하려면 원격지 연결할 SSH 또는 WinRM (windows 서버의 경우) 연결 정의가 필요합니다.
    <ul>
      <li><a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/connection">참조 문서 링크</a></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">connection</code> 블록은 리소스 내에서 선언시 해당 블록 내의 프로비저너에서 공통으로 사용가능하며, 프로비저너 내에서 선언 되는 경우 해당 프로비저너에서만 사용 가능합니다.
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="c1"># connection 블록으로 원격지 연결 정의</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"example1"</span> <span class="p">{</span>
    
  <span class="nx">connection</span> <span class="p">{</span>
    <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"ssh"</span>
    <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"root"</span>
    <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">root_password</span>
    <span class="nx">host</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">host</span>
  <span class="p">}</span>
    
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/myapp.conf"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/etc/myapp.conf"</span>
  <span class="p">}</span>
    
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/myapp.conf"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"C:/App/myapp.conf"</span>
      
    <span class="nx">connection</span> <span class="p">{</span>
        <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"winrm"</span>
        <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"Administrator"</span>
        <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">admin_password</span>
        <span class="nx">host</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">host</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>   
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">connection</code> 적용 인수와 설명</p>

    <table>
      <thead>
        <tr>
          <th>인수</th>
          <th>연결 타입</th>
          <th>설명</th>
          <th>기본값</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>type</td>
          <td>SSH/WinRM</td>
          <td>연결 유형으로 ssh 또는 winrm</td>
          <td>ssh</td>
        </tr>
        <tr>
          <td>user</td>
          <td>SSH/WinRM</td>
          <td>연결에 사용되는 사용자</td>
          <td>ssh: root, winrm: Administrator</td>
        </tr>
        <tr>
          <td>password</td>
          <td>SSH/WinRM</td>
          <td>연결에 사용되는 비밀번호</td>
          <td> </td>
        </tr>
        <tr>
          <td>host</td>
          <td>SSH/WinRM</td>
          <td>(필수) 연결 대상 주소</td>
          <td> </td>
        </tr>
        <tr>
          <td>port</td>
          <td>SSH/WinRM</td>
          <td>연결 대상의 타입별 사용 포트</td>
          <td>ssh: 22, winrm: 5985</td>
        </tr>
        <tr>
          <td>timeout</td>
          <td>SSH/WinRM</td>
          <td>연결 시도에 대한 대기 값</td>
          <td>5m</td>
        </tr>
        <tr>
          <td>script_path</td>
          <td>SSH/WinRM</td>
          <td>스크립트 복제 시 생성되는 경로</td>
          <td> </td>
        </tr>
        <tr>
          <td>private_key</td>
          <td>SSH</td>
          <td>연결 시 사용할 SSH key를 지정하며, password 인수보다 우선함</td>
          <td> </td>
        </tr>
        <tr>
          <td>certificate</td>
          <td>SSH</td>
          <td>서명된 CA 인증서로 사용 시 private_key와 함께 사용</td>
          <td> </td>
        </tr>
        <tr>
          <td>agent</td>
          <td>SSH</td>
          <td>ssh-agent를 사용해 인증하지 않는 경 우 false로 설정하며 Windows의 경우 Pageant만 사용 가능</td>
          <td> </td>
        </tr>
        <tr>
          <td>agent_identity</td>
          <td>SSH</td>
          <td>인증을 위한 ssh-agent의 기본 사용자</td>
          <td> </td>
        </tr>
        <tr>
          <td>host_key</td>
          <td>SSH</td>
          <td>원격 호스트 또는 서명된 CA의 연결을 확인 하는 데 사용되는 공개키</td>
          <td> </td>
        </tr>
        <tr>
          <td>target_platform</td>
          <td>SSH</td>
          <td>연결 대상 플랫폼으로 windows 또는 unix</td>
          <td>unix</td>
        </tr>
        <tr>
          <td>https</td>
          <td>WinRM</td>
          <td>true인 경우 HTTPS로 연결</td>
          <td>false</td>
        </tr>
        <tr>
          <td>insecure</td>
          <td>WinRM</td>
          <td>true인 경우 HTTPS 유효성 무시</td>
          <td>false</td>
        </tr>
        <tr>
          <td>use_ntlm</td>
          <td>WinRM</td>
          <td>true인 경우 NTLM 인증을 사용</td>
          <td>false</td>
        </tr>
        <tr>
          <td>cacert</td>
          <td>WinRM</td>
          <td>유효성 검증을 위한 CA 인증서</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>원격연결이 요구되는 프로비저너의 경우 스크립트 파일을 원격 시스템에 업로드하여 해당 시스템의 기본 쉘에서 실행하도록 하므로 
<code class="language-plaintext highlighter-rouge">script_path</code>에 적절한 위치를 지정해야 합니다. 경로는 난수인 %RAND% 경로가 포함되어 생성됩니다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unix/Linux/macOS : /tmp/terraform_%RAND%.sh
Windows(cmd) : C:/windows/temp/terraform_%RAND%.cmd
Windows(PowerShell) : C:/windows/temp/terraform_%RAND%.ps1
</code></pre></div>    </div>
  </li>
  <li>
    <p>베스천 호스트를 통한 연결의 경우 관련 인수를 제공합니다. <a href="https://developer.hashicorp.com/terraform/language/resources/provisioners/connection#connecting-through-a-bastion-host-with-ssh">참고자료 링크</a></p>

    <table>
      <thead>
        <tr>
          <th>인수</th>
          <th>설명</th>
          <th>기본값</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>bastion_host</td>
          <td>설정하게 되면 배스천 호스트 연결이 활성화되며, 연결 대상 호스트를 지정</td>
          <td> </td>
        </tr>
        <tr>
          <td>bastion_host_key</td>
          <td>호스트 연결을 위한 공개키</td>
          <td> </td>
        </tr>
        <tr>
          <td>bastion_port</td>
          <td>배스천 호스트에 연결할 포트</td>
          <td>port 인수 값</td>
        </tr>
        <tr>
          <td>bastion_user</td>
          <td>배스천 호스트에 연결할 사용자</td>
          <td>user 인수 값</td>
        </tr>
        <tr>
          <td>bastion_password</td>
          <td>배스천 호스트 연결에 사용할 비밀번호</td>
          <td>password 인수 값</td>
        </tr>
        <tr>
          <td>bastion_private key</td>
          <td>배스천 호스트 연결에 사용할 SSH 키파일</td>
          <td>private key 인수 값</td>
        </tr>
        <tr>
          <td>bastion_certificate</td>
          <td>서명된 CA 인증서 내용으로 bastion_private_key와 함께 사용</td>
          <td> </td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="file-프로비저너">file 프로비저너</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">file</code> 프로비저너는 로컬 파일이나 디렉터리를 원격지 서버로 복사하는 기능을 제공합니다.</li>
  <li>사용되는 인수
    <ul>
      <li><code class="language-plaintext highlighter-rouge">source</code> (선택) : 로컬 파일 또는 디렉터리의 경로를 지정하며 <strong>상대 경로 또는 절대 경로</strong>로 지정할 수 있습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">content</code> (선택) : 파일의 내용을 직접 지정할 수 있으며, <code class="language-plaintext highlighter-rouge">source</code>와 <code class="language-plaintext highlighter-rouge">content</code> 중 하나만 사용할 수 있습니다. 대상이 디렉터리인 경우 tf-file-content 파일로 생성되고, 대상이 파일인 경우 해당 파일에 내용이 기록됩니다.</li>
      <li><code class="language-plaintext highlighter-rouge">destination</code> (필수) : 원격지 서버에 복사될 파일 또는 디렉터리의 경로를 지정합니다. 항상 <strong>절대 경로</strong>를 지정해야 합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">destination</code> 지정시 주의할 점은 ssh 연결의 경우 디렉터리가 존재해야 하며, WinRM 연결의 경우 디렉터리가 존재하지 않으면 자동으로 생성합니다.</li>
  <li>또한 디렉터리를 대상으로 할 경우 <code class="language-plaintext highlighter-rouge">source</code> 경로에 따라 파일 또는 디렉터리로 복사됩니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">destination</code>이 /tmp 일 때 <code class="language-plaintext highlighter-rouge">source</code>가 디렉터리로 <code class="language-plaintext highlighter-rouge">/foo</code> 처럼 마지막에 <code class="language-plaintext highlighter-rouge">/</code> 가 없는 경우 대상 디렉터리에 지정된 디렉터리가 업로드 되어 /tmp/foo 형태로 업로드 됩니다.</li>
      <li><code class="language-plaintext highlighter-rouge">destination</code>이 /tmp 일 때 <code class="language-plaintext highlighter-rouge">source</code>가 디렉터리로 <code class="language-plaintext highlighter-rouge">/foo/</code> 처럼 마지막에 <code class="language-plaintext highlighter-rouge">/</code> 가 있는 경우 대상 디렉터리에 지정된 디렉터리가 업로드 되어 /tmp/foo 형태로 업로드 됩니다.</li>
    </ul>
  </li>
  <li>예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"foo"</span> <span class="p">{</span>    
  <span class="c1"># connection 블록으로 원격지 정의</span>
  <span class="nx">connection</span> <span class="p">{</span>
    <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"ssh"</span>
    <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"root"</span>
    <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">root_password</span>
    <span class="nx">host</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">host</span>
  <span class="p">}</span>
  
  <span class="c1"># myapp.conf 파일이 /etc/myapp.conf 로 업로드</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/myapp.conf"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/etc/myapp.conf"</span>
  <span class="p">}</span>
    
  <span class="c1"># content의 내용이 /tmp/file.log 파일로 생성</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">content</span>     <span class="p">=</span> <span class="s2">"ami used: ami"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/tmp/file.log"</span>
  <span class="p">}</span>
    
  <span class="c1"># configs.d 디렉터리가 /etc/configs.d 로 업로드</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"conf/configs.d"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/etc"</span>
  <span class="p">}</span>
    
  <span class="c1"># apps/app1 디렉터리 내의 파일들만 D:/IIS/webapp1 디렉터리 내에 업로드</span>
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"apps/app1/"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"D:/IIS/webapp1"</span>
  <span class="p">}</span>
<span class="p">}</span>  
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="remote_exec-프로비저너">remote_exec 프로비저너</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">remote-exec</code> 프로비저너는 원격지 서버에 명령어를 실행하는 기능을 제공합니다. 예를들어 AWS의 EC2 인스턴스를 생성하고 해당 VM에서 명령을 실행할 때 사용합니다.</li>
  <li>사용하는 인수는 다음과 같고, 상호 배타적으로 하나만 사용 가능합니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">inline</code> : 명령어에 대한 목록으로 [ ] 블록 내에 “ “ 로 묶인 다수의 명령을 , 로 구분하여 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">script</code> : 실행할 스크립트 파일의 경로를 지정합니다. 스크립트 파일은 로컬 파일로 지정하며, 원격지 서버로 복사되어 실행됩니다.</li>
      <li><code class="language-plaintext highlighter-rouge">scripts</code> : 실행할 스크립트 파일의 목록으로 [ ] 블록 내에 “ “ 로 묶인 다수의 파일을 , 로 구분하여 지정합니다. 마찬가지로 로컬 파일로 지정하며, 원격지 서버로 복사되어 실행됩니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">script</code>나 <code class="language-plaintext highlighter-rouge">scripts</code>는 인수를 지정할 수 없으므로, 인수가 필요한 경우 <code class="language-plaintext highlighter-rouge">file</code> 프로바이더로 스크립트를 업로드하고 <code class="language-plaintext highlighter-rouge">inline</code> 인수로 스크립트에 인수를 추가하여 실행합니다.</li>
  <li>예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="c1"># ...</span>
  
  <span class="c1"># Establishes connection to be used by all</span>
  <span class="c1"># generic remote provisioners (i.e. file/remote-exec)</span>
  <span class="nx">connection</span> <span class="p">{</span>
    <span class="nx">type</span>     <span class="p">=</span> <span class="s2">"ssh"</span>
    <span class="nx">user</span>     <span class="p">=</span> <span class="s2">"root"</span>
    <span class="nx">password</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">root_password</span>
    <span class="nx">host</span>     <span class="p">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="p">}</span>
  
  <span class="k">provisioner</span> <span class="s2">"file"</span> <span class="p">{</span>
    <span class="nx">source</span>      <span class="p">=</span> <span class="s2">"script.sh"</span>
    <span class="nx">destination</span> <span class="p">=</span> <span class="s2">"/tmp/script.sh"</span>
  <span class="p">}</span>
  
  <span class="k">provisioner</span> <span class="s2">"remote-exec"</span> <span class="p">{</span>
    <span class="nx">inline</span> <span class="p">=</span> <span class="p">[</span>
      <span class="s2">"chmod +x /tmp/script.sh"</span><span class="p">,</span>
      <span class="s2">"/tmp/script.sh args"</span><span class="p">,</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="null_resource와-terraform_data">null_resource와 terraform_data</h2>
<h3 id="null_resource">null_resource</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">null_resource</code> 블록은 자체적으로는 아무것도 수행하지 않는 리소스를 생성할 때 사용합니다.
    <ul>
      <li>이런 리소스가 필요한 이유는 사용자가 의도적으로 프로비저닝 동작을 조율해야 하는 상황에서, 프로바이더가 제공하는 리소스 수명주기관리만으로는 해결하기 어려울 때 사용합니다.</li>
      <li>주로 사용되는 시나리오는 다음과 같습니다.
        <ul>
          <li>프로비저닝 수행 과정에서 명령어 실행</li>
          <li>프로비저너와 함께 사용</li>
          <li>모듈, 반복문, 데이터 소스, 로컬 변수와 함께 사용</li>
          <li>출력을 위한 데이터 가공</li>
        </ul>
      </li>
      <li>예제
        <ul>
          <li>다음 상황을 가정
            <ul>
              <li>AWS EC2 인스턴스를 프로비저닝하면서 웹서비스를 실행시키고 싶다.</li>
              <li>웹서비스 설정에는 노출되어야 하는 고정된 외부 IP가 포함된 구성이 필요하다. 따라서 aws_eip 리소스를 생성해야 한다.</li>
            </ul>
          </li>
          <li>AWS EC2 인스턴스를 프로비저닝하기 위해 aws_instance 리소스 구성 시 앞서 확인한 프로비저너를 활용하여 웹서비스를 실행하고자 한다</li>
          <li>1차 시도
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
      
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"instance"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"t101sg"</span>
      
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
      
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
      
<span class="p">}</span>
      
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="s2">"ami-0c9c942bd7bf113a2"</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">subnet_id</span>              <span class="p">=</span> <span class="s2">"subnet-dbc571b0"</span>  <span class="c1"># 각자 default VPC에 subnet ID 아무거나</span>
  <span class="nx">private_ip</span>             <span class="p">=</span> <span class="s2">"172.31.1.100"</span>
  <span class="nx">vpc_security_group_ids</span> <span class="p">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
      
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              echo "Hello, T101 Study" &gt; index.html
              nohup busybox httpd -f -p 80 &amp;
</span><span class="no">              EOF
      
</span>  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Single-WebSrv"</span>
  <span class="p">}</span>
      
  <span class="k">provisioner</span> <span class="s2">"remote-exec"</span> <span class="p">{</span>
    <span class="nx">inline</span> <span class="p">=</span> <span class="p">[</span>
      <span class="s2">"echo </span><span class="k">${</span><span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span><span class="k">}</span><span class="s2">"</span>
     <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
      
<span class="k">resource</span> <span class="s2">"aws_eip"</span> <span class="s2">"myeip"</span> <span class="p">{</span>
  <span class="c1">#vpc = true</span>
  <span class="nx">instance</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">associate_with_private_ip</span> <span class="p">=</span> <span class="s2">"172.31.1.100"</span>
<span class="p">}</span>
      
<span class="k">output</span> <span class="s2">"public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span>      
</code></pre></div>            </div>
            <ul>
              <li>aws_eip가 생성되는 고정된 IP를 할당하기 위해서는 대상인 aws_instance의 id값이 필요합니다.</li>
              <li>aws_instance의 프로비저너 동작에서는 aws_eip가 생성하는 속성 값인 public_ip가 필요합니다.</li>
              <li>apply시 aws_eip와 aws_instance가 서로를 참조하여 순환 참조 오류가 발생합니다.
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init
<span class="nv">$ </span>terraform plan 
<span class="c"># =&gt; Error: Cycle: aws_eip.myeip, aws_instance.example</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
          <li>2차 시도
            <ul>
              <li>둘중의 하나의 실행 시점을 뒤로 미뤄야 합니다.</li>
              <li>이럴때 null_resource를 사용하여 둘 중 하나의 리소스를 뒤로 미뤄 순환 참조를 막을 수 있습니다.
                <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"instance"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="s2">"t101sg"</span>
        
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">80</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
        
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">22</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
        
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="s2">"ami-0c9c942bd7bf113a2"</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">subnet_id</span>              <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">private_ip</span>             <span class="p">=</span> <span class="s2">"172.31.0.100"</span>
  <span class="nx">key_name</span>               <span class="p">=</span> <span class="s2">"aws-ec2"</span> <span class="c1"># 각자 자신의 EC2 SSH Keypair 이름 지정</span>
  <span class="nx">vpc_security_group_ids</span> <span class="p">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
        
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              echo "Hello, T101 4th Study" &gt; index.html
              nohup busybox httpd -f -p 80 &amp;
</span><span class="no">              EOF
        
</span>  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Single-WebSrv"</span>
  <span class="p">}</span>
        
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"aws_eip"</span> <span class="s2">"myeip"</span> <span class="p">{</span>
  <span class="c1">#vpc = true</span>
  <span class="nx">instance</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">associate_with_private_ip</span> <span class="p">=</span> <span class="s2">"172.31.0.100"</span>
<span class="p">}</span>
        
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"echomyeip"</span> <span class="p">{</span>
  <span class="k">provisioner</span> <span class="s2">"remote-exec"</span> <span class="p">{</span>
    <span class="nx">connection</span> <span class="p">{</span>
      <span class="nx">host</span> <span class="p">=</span> <span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span>
      <span class="nx">type</span> <span class="p">=</span> <span class="s2">"ssh"</span>
      <span class="nx">user</span> <span class="p">=</span> <span class="s2">"ubuntu"</span>
      <span class="nx">private_key</span> <span class="p">=</span>  <span class="nx">file</span><span class="p">(</span><span class="s2">"/Users/psyche/.ssh/aws-ec2-key.cer"</span><span class="p">)</span> <span class="c1"># 각자 자신의 EC2 SSH Keypair 파일 위치 지정</span>
      <span class="c1">#password = "qwe123"</span>
    <span class="p">}</span>
    <span class="nx">inline</span> <span class="p">=</span> <span class="p">[</span>
      <span class="s2">"echo </span><span class="k">${</span><span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span><span class="k">}</span><span class="s2">;"</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
        
<span class="k">output</span> <span class="s2">"public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span>
        
<span class="k">output</span> <span class="s2">"eip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_eip</span><span class="p">.</span><span class="nx">myeip</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The EIP of the Instance"</span>
<span class="p">}</span>
</code></pre></div>                </div>
              </li>
              <li>위와 같이 null_resource를 사용하여 aws_eip 리소스를 뒤로 미루고, aws_instance 리소스가 먼저 생성되도록 하여 순환 참조 오류를 해결할 수 있습니다.</li>
              <li>실행 결과
                <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Outputs:</span>
<span class="c">#    </span>
<span class="c">#    eip = "43.202.208.93"</span>
<span class="c">#    public_ip = "43.202.208.93"</span>
        
<span class="nv">$ </span>terraform state list

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_eip.myeip.private_ip"</span> | terraform console
<span class="c"># =&gt; "172.31.0.100"</span>

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_eip.myeip.public_ip"</span> | terraform console
<span class="c"># =&gt; "43.202.208.93"</span>

<span class="nv">$ </span>terraform output
<span class="c"># =&gt; eip = "43.202.208.93"</span>
<span class="c">#    public_ip = "43.202.208.93" </span>
        
<span class="nv">$ </span>terraform destroy <span class="nt">-auto-approve</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<svg width="1076pt" height="206pt" viewBox="0.00 0.00 1075.75 206.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 202)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-202 1071.75,-202 1071.75,4 -4,4" />
<!-- aws_eip.myeip -->
<g id="node1" class="node">
<title>aws_eip.myeip</title>
<polygon fill="none" stroke="black" points="865,-36 759,-36 759,0 865,0 865,-36" />
<text text-anchor="middle" x="812" y="-12.2" font-family="sans-serif" font-size="14.00">aws_eip.myeip</text>
</g>
<!-- aws_instance.example -->
<g id="node2" class="node">
<title>aws_instance.example</title>
<polygon fill="none" stroke="black" points="645.75,-36 492.5,-36 492.5,0 645.75,0 645.75,-36" />
<text text-anchor="middle" x="569.12" y="-12.2" font-family="sans-serif" font-size="14.00">aws_instance.example</text>
</g>
<!-- aws_eip.myeip&#45;&gt;aws_instance.example -->
<g id="edge1" class="edge">
<title>aws_eip.myeip&#45;&gt;aws_instance.example</title>
<path fill="none" stroke="black" d="M758.73,-18C729.15,-18 691.38,-18 657.42,-18" />
<polygon fill="black" stroke="black" points="657.58,-14.5 647.58,-18 657.58,-21.5 657.58,-14.5" />
</g>
<!-- aws_security_group.instance -->
<g id="node7" class="node">
<title>aws_security_group.instance</title>
<polygon fill="none" stroke="black" points="368.38,-36 178.38,-36 178.38,0 368.38,0 368.38,-36" />
<text text-anchor="middle" x="273.38" y="-12.2" font-family="sans-serif" font-size="14.00">aws_security_group.instance</text>
</g>
<!-- aws_instance.example&#45;&gt;aws_security_group.instance -->
<g id="edge2" class="edge">
<title>aws_instance.example&#45;&gt;aws_security_group.instance</title>
<path fill="none" stroke="black" d="M492.1,-18C457.97,-18 417.14,-18 380.1,-18" />
<polygon fill="black" stroke="black" points="380.26,-14.5 370.26,-18 380.26,-21.5 380.26,-14.5" />
</g>
<!-- aws_subnet.peter_subnet -->
<g id="node8" class="node">
<title>aws_subnet.peter_subnet</title>
<polygon fill="none" stroke="black" points="358.62,-90 188.12,-90 188.12,-54 358.62,-54 358.62,-90" />
<text text-anchor="middle" x="273.38" y="-66.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet</text>
</g>
<!-- aws_instance.example&#45;&gt;aws_subnet.peter_subnet -->
<g id="edge3" class="edge">
<title>aws_instance.example&#45;&gt;aws_subnet.peter_subnet</title>
<path fill="none" stroke="black" d="M492.1,-31.98C454.88,-38.82 409.69,-47.12 370.15,-54.39" />
<polygon fill="black" stroke="black" points="369.58,-50.94 360.37,-56.19 370.84,-57.83 369.58,-50.94" />
</g>
<!-- aws_internet_gateway.peter_igw -->
<g id="node3" class="node">
<title>aws_internet_gateway.peter_igw</title>
<polygon fill="none" stroke="black" points="379.25,-198 167.5,-198 167.5,-162 379.25,-162 379.25,-198" />
<text text-anchor="middle" x="273.38" y="-174.2" font-family="sans-serif" font-size="14.00">aws_internet_gateway.peter_igw</text>
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node9" class="node">
<title>aws_vpc.peter_vpc</title>
<polygon fill="none" stroke="black" points="131.5,-117 0,-117 0,-81 131.5,-81 131.5,-117" />
<text text-anchor="middle" x="65.75" y="-93.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_internet_gateway.peter_igw&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge4" class="edge">
<title>aws_internet_gateway.peter_igw&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M192.43,-161.56C183.92,-158.97 175.47,-156.11 167.5,-153 146.54,-144.82 124.38,-133.3 106.2,-122.99" />
<polygon fill="black" stroke="black" points="107.99,-119.98 97.58,-118.02 104.49,-126.05 107.99,-119.98" />
</g>
<!-- aws_route.peter_defaultroute -->
<g id="node4" class="node">
<title>aws_route.peter_defaultroute</title>
<polygon fill="none" stroke="black" points="664.88,-184 473.38,-184 473.38,-148 664.88,-148 664.88,-184" />
<text text-anchor="middle" x="569.12" y="-160.2" font-family="sans-serif" font-size="14.00">aws_route.peter_defaultroute</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_internet_gateway.peter_igw -->
<g id="edge5" class="edge">
<title>aws_route.peter_defaultroute&#45;&gt;aws_internet_gateway.peter_igw</title>
<path fill="none" stroke="black" d="M473.16,-170.53C446.93,-171.78 418.18,-173.15 390.88,-174.45" />
<polygon fill="black" stroke="black" points="391.03,-170.94 381.21,-174.91 391.36,-177.93 391.03,-170.94" />
</g>
<!-- aws_route_table.peter_rt -->
<g id="node5" class="node">
<title>aws_route_table.peter_rt</title>
<polygon fill="none" stroke="black" points="356,-144 190.75,-144 190.75,-108 356,-108 356,-144" />
<text text-anchor="middle" x="273.38" y="-120.2" font-family="sans-serif" font-size="14.00">aws_route_table.peter_rt</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_route_table.peter_rt -->
<g id="edge6" class="edge">
<title>aws_route.peter_defaultroute&#45;&gt;aws_route_table.peter_rt</title>
<path fill="none" stroke="black" d="M473.16,-153.07C439.27,-148.45 401.16,-143.26 367.44,-138.67" />
<polygon fill="black" stroke="black" points="368.06,-135.22 357.68,-137.34 367.12,-142.16 368.06,-135.22" />
</g>
<!-- aws_route_table.peter_rt&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge7" class="edge">
<title>aws_route_table.peter_rt&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M190.52,-115.25C174.83,-113.19 158.47,-111.04 142.98,-109.01" />
<polygon fill="black" stroke="black" points="143.74,-105.58 133.37,-107.75 142.83,-112.52 143.74,-105.58" />
</g>
<!-- aws_route_table_association.peter_rtassociation -->
<g id="node6" class="node">
<title>aws_route_table_association.peter_rtassociation</title>
<polygon fill="none" stroke="black" points="723,-117 415.25,-117 415.25,-81 723,-81 723,-117" />
<text text-anchor="middle" x="569.12" y="-93.2" font-family="sans-serif" font-size="14.00">aws_route_table_association.peter_rtassociation</text>
</g>
<!-- aws_route_table_association.peter_rtassociation&#45;&gt;aws_route_table.peter_rt -->
<g id="edge8" class="edge">
<title>aws_route_table_association.peter_rtassociation&#45;&gt;aws_route_table.peter_rt</title>
<path fill="none" stroke="black" d="M414.8,-113.09C398.72,-114.57 382.75,-116.04 367.66,-117.43" />
<polygon fill="black" stroke="black" points="367.44,-113.93 357.8,-118.33 368.08,-120.9 367.44,-113.93" />
</g>
<!-- aws_route_table_association.peter_rtassociation&#45;&gt;aws_subnet.peter_subnet -->
<g id="edge9" class="edge">
<title>aws_route_table_association.peter_rtassociation&#45;&gt;aws_subnet.peter_subnet</title>
<path fill="none" stroke="black" d="M414.8,-84.91C399.65,-83.51 384.59,-82.13 370.27,-80.81" />
<polygon fill="black" stroke="black" points="370.75,-77.34 360.47,-79.91 370.11,-84.31 370.75,-77.34" />
</g>
<!-- aws_security_group.instance&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge10" class="edge">
<title>aws_security_group.instance&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M192.43,-36.44C183.92,-39.03 175.47,-41.89 167.5,-45 146.54,-53.18 124.38,-64.7 106.2,-75.01" />
<polygon fill="black" stroke="black" points="104.49,-71.95 97.58,-79.98 107.99,-78.02 104.49,-71.95" />
</g>
<!-- aws_subnet.peter_subnet&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge11" class="edge">
<title>aws_subnet.peter_subnet&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M187.85,-83.1C172.93,-85.06 157.48,-87.09 142.82,-89.01" />
<polygon fill="black" stroke="black" points="142.73,-85.49 133.27,-90.26 143.64,-92.43 142.73,-85.49" />
</g>
<!-- null_resource.echomyeip -->
<g id="node10" class="node">
<title>null_resource.echomyeip</title>
<polygon fill="none" stroke="black" points="1067.75,-36 901,-36 901,0 1067.75,0 1067.75,-36" />
<text text-anchor="middle" x="984.38" y="-12.2" font-family="sans-serif" font-size="14.00">null_resource.echomyeip</text>
</g>
<!-- null_resource.echomyeip&#45;&gt;aws_eip.myeip -->
<g id="edge12" class="edge">
<title>null_resource.echomyeip&#45;&gt;aws_eip.myeip</title>
<path fill="none" stroke="black" d="M900.68,-18C892.59,-18 884.48,-18 876.62,-18" />
<polygon fill="black" stroke="black" points="876.84,-14.5 866.84,-18 876.84,-21.5 876.84,-14.5" />
</g>
</g>
</svg>

<ul>
  <li><code class="language-plaintext highlighter-rouge">null_resource</code>는 정의된 속성이 <code class="language-plaintext highlighter-rouge">id</code>가 전부이므로, 선언된 내부의 구성이 변경되더라도 새로운 Plan 과정에서 실행 계획에 포함되지 못합니다.</li>
  <li>따라서 사용자가 <code class="language-plaintext highlighter-rouge">null_resource에</code> 정의된 내용을 강제로 다시 실행하기 위한 인수로 <code class="language-plaintext highlighter-rouge">trigger</code>가 제공됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">trigger</code>는 임의의 <code class="language-plaintext highlighter-rouge">string</code> 형태의 <code class="language-plaintext highlighter-rouge">map</code> 데이터를 정의하는데, 정의된 값이 변경되면 <code class="language-plaintext highlighter-rouge">null_resource</code> 내부에 정의된 행위를 다시 실행합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">trigger</code> 정의와 동작 예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"foo"</span> <span class="p">{</span>
  <span class="nx">triggers</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">ec2_id</span> <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">bar</span><span class="p">.</span><span class="nx">id</span> <span class="c1"># instance의 id가 변경되는 경우 재실행</span>
  <span class="p">}</span>
  <span class="p">...</span><span class="err">생략</span><span class="p">...</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"null_resource"</span> <span class="s2">"bar"</span> <span class="p">{</span>
  <span class="nx">triggers</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">ec2_id</span> <span class="p">=</span> <span class="nx">time</span><span class="p">()</span> <span class="c1"># 테라폼으로 실행 계획을 생성할 떄마다 재실행</span>
  <span class="p">}</span>
  <span class="p">...</span><span class="err">생략</span><span class="p">...</span>
<span class="p">}</span>  
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="terraform_data">terraform_data</h3>
<ul>
  <li>테라폼 1.4 이후에는 <code class="language-plaintext highlighter-rouge">null_resource</code> 대신 <code class="language-plaintext highlighter-rouge">terraform_data</code>를 사용하여 아무 작업도 수행하지 않는 리소스 구현이 가능합니다.</li>
  <li>이후에는 가능한 <code class="language-plaintext highlighter-rouge">null_resource</code> 대신 <code class="language-plaintext highlighter-rouge">terraform_data</code>를 사용하는 것이 좋습니다.</li>
  <li>이 리소스 또한 자체적으로 아무것도 수행하지 않지만 <code class="language-plaintext highlighter-rouge">null_resource</code>는 <strong>별도의 프로바이더 구성이 필요</strong>하다는 점과 비교하여 추가 프로바이더 없이 테라폼 자체에 포함된 <strong>기본 수명주기 관리자</strong>가 제공된다는 것이 장점입니다.</li>
  <li>사용 시나리오는 기본 null_resourcr와 동일하며 강제 재실행을 위한 <code class="language-plaintext highlighter-rouge">trigger_replace</code>와 상태 저장을 위한 <code class="language-plaintext highlighter-rouge">input</code> 인수와 <code class="language-plaintext highlighter-rouge">input</code>에 저장된 값을 출력하는 <code class="language-plaintext highlighter-rouge">output</code> 속성이 제공됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">triggers_replace</code>에 정의되는 값이 기존 <code class="language-plaintext highlighter-rouge">map</code> 형태에서 <code class="language-plaintext highlighter-rouge">tuple</code>로 변경되어 쓰임이 더 간단해졌습니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">terraform_data</code> 리소스의 <code class="language-plaintext highlighter-rouge">trigger_replace</code> 정의와 동작 예제</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="c1"># ...</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"database"</span> <span class="p">{</span>
  <span class="c1"># ...</span>
<span class="p">}</span>
  
<span class="c1"># A use-case for terraform_data is as a do-nothing container</span>
<span class="c1"># for arbitrary actions taken by a provisioner.</span>
<span class="k">resource</span> <span class="s2">"terraform_data"</span> <span class="s2">"bootstrap"</span> <span class="p">{</span>
  <span class="nx">triggers_replace</span> <span class="p">=</span> <span class="p">[</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">web</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">database</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">]</span>
  
  <span class="k">provisioner</span> <span class="s2">"local-exec"</span> <span class="p">{</span>
    <span class="nx">command</span> <span class="p">=</span> <span class="s2">"bootstrap-hosts.sh"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"terraform_data"</span> <span class="s2">"foo"</span> <span class="p">{</span>
  <span class="nx">triggers_replace</span> <span class="p">=</span> <span class="p">[</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">bar</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">]</span>
  
  <span class="nx">input</span> <span class="p">=</span> <span class="s2">"world"</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"terraform_data_output"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">terraform_data</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="k">output</span>  <span class="c1"># 출력 결과는 "world"</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="moved-블록">moved 블록</h2>

<ul>
  <li>테라폼은 state에 기록되는 리소스의 이름이 변경되면 기존 리소스는 삭제되고, 새로운 리소스를 생성합니다.</li>
  <li>테라폼 리소스를 선언하다보면 이름을 변경해야 하는 상황이 발생되며 다음과 같은 예들이 있습니다.
    <ul>
      <li>리소스 이름 변경</li>
      <li><code class="language-plaintext highlighter-rouge">count</code>로 처리하던 반복문을 <code class="language-plaintext highlighter-rouge">for_each</code>로 변경</li>
      <li>리소스가 모듈로 이동하여 참조되는 주소가 변경</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">moved</code> 블록은 리소스의 이동을 표현하는 블록으로, 실제 리소스는 변경이 없으면서 테라폼에서 관리되는 이름만 변경되는것을 테라폼에게 알려주고
불필요한 리소스의 재생성을 방지합니다.</li>
  <li>예제
    <ul>
      <li>main.tf 생성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"a"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>실행
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span><span class="nb">cat </span>foo.bar
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.a"</span> | terraform console
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.a.id"</span> | terraform console
<span class="c"># =&gt; "4bf3e335199107182c6f7638efaad377acc7f452"</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>main.tf의 local_file의 이름을 a =&gt; b 로 변경
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"b"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>plan 확인시 기존 리소스 a를 제거하고 새로운 리소스 b를 생성하는 것을 확인할 수 있습니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform plan
<span class="c"># =&gt; ...</span>
<span class="c">#      # local_file.a will be destroyed</span>
<span class="c">#    ...</span>
<span class="c">#      # local_file.b will be created</span>
<span class="c">#    ...</span>
<span class="c">#    Plan: 1 to add, 0 to change, 1 to destroy.</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">moved</code> 블록을 사용하여 리소스의 이름 변경을 표현
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"b"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>

<span class="nx">moved</span> <span class="p">{</span>
  <span class="nx">from</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">a</span>
  <span class="nx">to</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
        <ul>
          <li>plan 과 apply시 제거나 생성이 없고 <code class="language-plaintext highlighter-rouge">id</code>도 <code class="language-plaintext highlighter-rouge">local_file.a</code> 일때와 동일합니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform plan
<span class="c"># =&gt; ... </span>
     Plan: 0 to add, 0 to change, 0 to destroy.
      
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="nv">$ </span>terraform state list
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.b.id"</span> | terraform console 
<span class="c"># =&gt; "4bf3e335199107182c6f7638efaad377acc7f452"</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">local_file.a</code>일때와 <code class="language-plaintext highlighter-rouge">local_file.b</code>일때의 <code class="language-plaintext highlighter-rouge">terraform.tfstate</code> 파일을 비교해보면 아래와 같습니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>diff terraform.tfstate.a terraform.tfstate 
</code></pre></div>        </div>

        <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">4c4
</span><span class="gd">&lt;   "serial": 1,
</span><span class="p">---
</span><span class="gi">&gt;   "serial": 2,
</span><span class="p">16c16
</span><span class="gd">&lt;       "name": "a",
</span><span class="p">---
</span><span class="gi">&gt;       "name": "b",    
</span></code></pre></div>        </div>
        <p><code class="language-plaintext highlighter-rouge">name</code>만 <code class="language-plaintext highlighter-rouge">a</code>에서 <code class="language-plaintext highlighter-rouge">b</code>로 변경되었음을 확인할 수 있습니다.</p>
      </li>
      <li>마지막으로 <code class="language-plaintext highlighter-rouge">moved</code> 블록이 적용되면, <code class="language-plaintext highlighter-rouge">moved</code> 블록은 더이상 필요가 없기 때문에 삭제해서 리팩토링을 완료합니다.
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf  </span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"b"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"foo!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/foo.bar"</span>
<span class="p">}</span>

<span class="c1"># moved {</span>
<span class="c1">#   from = local_file.a</span>
<span class="c1">#   to = local_file.b</span>
<span class="c1"># }</span>
    
<span class="k">output</span> <span class="s2">"file_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h1 id="cli를-위한-시스템-환경-변수">CLI를 위한 시스템 환경 변수</h1>
<ul>
  <li>테라폼은 다양한 환경 변수를 사용하여 동작을 제어할 수 있습니다.</li>
  <li>로컬 작업환경 별 환경변수 지정 방법
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mac/리눅스/유닉스: <span class="nb">export</span> &lt;환경 변수 이름&gt;<span class="o">=</span>&lt;값&gt;
Windows CMD: <span class="nb">set</span> &lt;환경 변수 이름&gt;<span class="o">=</span>&lt;값&gt;
Windows PowerShell: <span class="nv">$Env</span>:&lt;환경 변수 이름&gt;<span class="o">=</span><span class="s1">'&lt;값&gt;'</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG</code> : 테라폼의 stderr 로그에 대한 레벨을 정의 합니다.
    <ul>
      <li>trace, debug, info, warn, error, off를 설정할 수 있고 관련 환경 변수가 없는 경우 off와 동일합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">TF_LOG</code>를 info로 설정하고 <code class="language-plaintext highlighter-rouge">terraform plan</code> 동작을 하면 테라폼 출력에 관련 로그가 출력됩니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_LOG</span><span class="o">=</span>info
<span class="nv">$ </span>terraform plan
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG_PATH</code> : 로그 출력 파일 위치 지정합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG_CORE</code> : TF_LOG와 별도로 테라폼 자체 코어에 대한 로깅 레벨 지정 또는 해제합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">TF_LOG_PROVIDER</code> : TF_LOG와 별도로 테라폼에서 사용하는 프로바이더에 대한 로깅 레벨 지정 또는 해제합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">TF_INPUT</code> : 값을 false 또는 0으로 설정하면 테라폼 실행 시 인수에 -input=false 를 추가한 것과 동일한 수행 결과를 얻을 수 있습니다.
    <ul>
      <li>단, <code class="language-plaintext highlighter-rouge">TF_INPUT=0</code>으로 하고 <code class="language-plaintext highlighter-rouge">terraform plan</code>을 실행했을때 입력변수를 반드시 입력 받아야 하는 경우 오류가 발생합니다.
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ TF_INPUT</span><span class="o">=</span>0  terraform plan
<span class="c"># =&gt; Error: No value for required variable</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_VAR_name</code> : <code class="language-plaintext highlighter-rouge">TF_VAR_&lt;변수이름&gt;</code>을 사용하면 입력시 또는 <code class="language-plaintext highlighter-rouge">default</code>로 선언된 변수값을 대체합니다. (2주차 “변수 입력 방식과 우선 순위” 부분 참고)</li>
  <li><code class="language-plaintext highlighter-rouge">TF_CLI_ARGS</code> / <code class="language-plaintext highlighter-rouge">TF_CLI_ARGS_subcommand</code> : 테라폼 실행 시 추가할 인수를 정의합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># TF_CLI_ARGS="-input=false" terraform apply -auto-approve 는 terraform apply -input=false -auto-approve 와 같습니다.</span>
<span class="nv">$ TF_CLI_ARGS</span><span class="o">=</span><span class="s2">"-input=false"</span> terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; Error: No value for required variable</span>
  
<span class="c"># TF_CLI_ARGS_apply로 인수를 정의하면 terraform apply 커맨드 수행 시에만 동작합니다.</span>
<span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_CLI_ARGS_apply</span><span class="o">=</span><span class="s2">"-input=false"</span>
<span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; &lt;에러&gt;</span>
  
<span class="nv">$ </span>terraform plan
<span class="c"># =&gt; &lt;정상 계획 예측 출력&gt; </span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">TF_DATA_DIR</code> : <code class="language-plaintext highlighter-rouge">State</code> 저장 백엔드 설정과 같은 작업 디렉터리별 데이터를 보관하는 위치를 지정합니다.
    <ul>
      <li>이 데이터는 <code class="language-plaintext highlighter-rouge">.terraform</code> 디렉터리 위치에 기록되지만 <code class="language-plaintext highlighter-rouge">TF_DATA_DIR</code>에 경로가 정의되면 기본 경로를 대체하여 사용됩니다.</li>
      <li>일관된 테라폼 사용을 위해서 해당 변수는 실행 시마다 일관되게 적용될 수 있도록 설정하는 것이 중요합니다.</li>
      <li>설정 값이 이전 실행 시에만 적용되는 경우 init 명령으로 수행된 모듈, 아티팩트 등의 파일을 찾지 못합니다.</li>
    </ul>
  </li>
</ul>

<h1 id="마치며">마치며</h1>
<p>지금까지 3주간에 걸처 테라폼 HCL의 기본 문법과 기능을 알아보았습니다.
내용도 많고 실습해볼것도 많고, 블로그도 써야하고 다소 힘들었지만 :cry:, 다음 주차 수업부터 실제 응용을 배울 생각을 하니 두근 거립니다.</p>

<p>이번 주도 과제가 무사히 통과되길 기도:pray:하며 이번 블로그를 마칩니다.</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[테라폼 기초 입문 실습 스터디 3주차이고, 기본 사용법 마지막 주차입니다. 이번 주에도 학습해야 하는 내용이 많아서 부지런히 달려보겠습니다. "테라폼으로 시작하는 IaC" 책을 기준으로 정리하였습니다.]]></summary></entry><entry><title type="html">[T101 4기] 테라폼 기본 사용법 2/3</title><link href="https://sweetlittlebird.github.io/posts/2024-06-23-T101-Study-Terraform-Week-2/" rel="alternate" type="text/html" title="[T101 4기] 테라폼 기본 사용법 2/3" /><published>2024-06-23T00:52:00+09:00</published><updated>2024-06-23T00:52:00+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%202</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-06-23-T101-Study-Terraform-Week-2/"><![CDATA[<ul id="toc" class="section-nav">
</ul>

<h1 id="들어가며">들어가며</h1>

<p>테라폼 기초 입문 실습 스터디 2주차 입니다.
1주차에 이어 테라폼의 기본 사용법에 대해 실습해보려 합니다.
이번 주에도 “테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.</p>

<blockquote>
  <p><img src="/assets/2024/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h1 id="hcl-계속">HCL (계속)</h1>

<p>지난주에 이어서 HCL(HashiCorp Configuration Language) 의 문법에 대해 알아보겠습니다.</p>

<h2 id="테라폼-블록">테라폼 블록</h2>

<h3 id="data-블록">data 블록</h3>

<ul>
  <li>데이터 소스는 테라폼으로 정의되지 않은 외부 리소스와 저장된 정보를 참조할때 사용합니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">data</code> 블록 선언 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">data</span> <span class="s2">"&lt;프로바이더이름_리소스유형&gt;"</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
      <span class="err">&lt;인수&gt;</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <p>이때 인수는 데이터 소스를 참조할때 사용할 인수이며 아래의 “데이터 소스 참조 방법”에서의 속성과는 다른 값입니다.
  이 인수로 참조된 데이터의 속성 값을 아래의 방법으로 가져올 수 있습니다.</p>
  </li>
  <li>
    <p>데이터 소스 참조 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># 데이터 소스 참조</span>
  <span class="k">data</span><span class="err">.&lt;프로바이더이름</span><span class="nx">_</span><span class="err">리소스유형&gt;.&lt;이름&gt;.&lt;속성&gt;</span>  
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">data</code> 블록 사용 예시
    <ol>
      <li>현재 region에서 사용가능한 availability zone 정보를 가져오기
        <ul>
          <li>main.tf</li>
        </ul>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># main.tf</span>
 <span class="k">data</span> <span class="s2">"aws_availability_zones"</span> <span class="s2">"available_zones"</span> <span class="p">{</span>
     <span class="nx">state</span> <span class="p">=</span> <span class="s2">"available"</span>   <span class="c1"># 현재 region에서 사용가능한 availability zone 정보를 가져오기</span>
 <span class="p">}</span>
</code></pre></div>        </div>

        <ul>
          <li>실행 결과 확인</li>
        </ul>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># main.tf 적용</span>
 <span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
      
 <span class="c"># state 확인</span>
 <span class="nv">$ </span>terraform state list      
 <span class="c"># =&gt; data.aws_availability_zones.available_zones</span>
      
 <span class="c"># 테라폼 콘솔에서 확인</span>
 <span class="nv">$ </span>terraform console
 <span class="o">&gt;</span> <span class="c"># &lt;확인하고 싶은 속성&gt; </span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones       <span class="c"># =&gt; ...</span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones.id    <span class="c"># =&gt; "ap-northeast-2"</span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones.names <span class="c"># =&gt; AZ 이름 목록...</span>
 <span class="o">&gt;</span> data.aws_availability_zones.available_zones.zone_ids <span class="c"># =&gt; AZ ID 목록...</span>
      
 <span class="c"># tip. echo &lt;확인하고 싶은 속성&gt; || terraform console 로 값 확인</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones"</span> | terraform console     <span class="c"># =&gt; ...</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.id"</span> | terraform console   <span class="c"># =&gt; "ap-northeast-2"</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.names"</span> | terraform console <span class="c"># =&gt; AZ 이름 목록...</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.zone_ids"</span> | terraform console <span class="c"># =&gt; AZ ID 목록...</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.aws_availability_zones.available_zones.zone_ids[0]"</span> | terraform console <span class="c"># =&gt; "apne2-az1"</span>
</code></pre></div>        </div>
      </li>
      <li>로컬 파일의 내용 읽기
        <ul>
          <li>main.tf</li>
        </ul>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># main.tf</span>
 <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
     <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"Hello world!!"</span>
     <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
 <span class="p">}</span>
        
 <span class="k">data</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
     <span class="nx">filename</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">filename</span>
 <span class="p">}</span>
        
 <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
     <span class="nx">content</span>  <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">content</span>
     <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
 <span class="p">}</span>
</code></pre></div>        </div>

        <ul>
          <li>
            <p>실행 결과 확인</p>

            <svg width="389pt" height="44pt" viewBox="0.00 0.00 389.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
  <title>G</title>
  <polygon fill="white" stroke="none" points="-4,4 -4,-40 385,-40 385,4 -4,4" />
  <!-- data.local_file.abc -->
  <g id="node1" class="node">
  <title>data.local_file.abc</title>
  <polygon fill="none" stroke="black" points="254,-36 130,-36 130,0 254,0 254,-36" />
  <text text-anchor="middle" x="192" y="-12.2" font-family="sans-serif" font-size="14.00">data.local_file.abc</text>
  </g>
  <!-- local_file.abc -->
  <g id="node2" class="node">
  <title>local_file.abc</title>
  <polygon fill="none" stroke="black" points="94,-36 0,-36 0,0 94,0 94,-36" />
  <text text-anchor="middle" x="47" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
  </g>
  <!-- data.local_file.abc&#45;&gt;local_file.abc -->
  <g id="edge1" class="edge">
  <title>data.local_file.abc&#45;&gt;local_file.abc</title>
  <path fill="none" stroke="black" d="M129.53,-18C121.59,-18 113.49,-18 105.62,-18" />
  <polygon fill="black" stroke="black" points="105.82,-14.5 95.82,-18 105.82,-21.5 105.82,-14.5" />
  </g>
  <!-- local_file.def -->
  <g id="node3" class="node">
  <title>local_file.def</title>
  <polygon fill="none" stroke="black" points="381,-36 290,-36 290,0 381,0 381,-36" />
  <text text-anchor="middle" x="335.5" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
  </g>
  <!-- local_file.def&#45;&gt;data.local_file.abc -->
  <g id="edge2" class="edge">
  <title>local_file.def&#45;&gt;data.local_file.abc</title>
  <path fill="none" stroke="black" d="M289.73,-18C282.08,-18 273.96,-18 265.8,-18" />
  <polygon fill="black" stroke="black" points="265.81,-14.5 255.81,-18 265.81,-21.5 265.81,-14.5" />
  </g>
  </g>
  </svg>
          </li>
        </ul>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c"># main.tf 적용</span>
 <span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
        
 <span class="c"># state 확인</span>
 <span class="nv">$ </span>terraform state list      
 <span class="c"># =&gt; data.local_file.abc</span>
 <span class="c">#    local_file.abc</span>
 <span class="c">#    local_file.def</span>
        
 <span class="c"># graph 확인</span>
 <span class="nv">$ </span>terraform graph <span class="o">&gt;</span> graph.dot
       
 <span class="c"># 데이터 소스 참조 확인</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"data.local_file.abc.content"</span> | terraform console
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h3 id="variable-블록">variable 블록</h3>

<ul>
  <li>변수(variable)블록은 인프라를 구성하는데 필요한 속성 값을 정의해 코드의 변경 없이 여러 인프라를 생성하는데 사용합니다.</li>
  <li>테라폼에서의 variable 블록을 입력 변수, 즉 input variable라 합니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">variable</code> 블록 선언 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
      <span class="err">&lt;인수&gt;</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
      <span class="err">&lt;메타변수&gt;</span> <span class="p">=</span> <span class="err">&lt;메타변수</span> <span class="err">값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">source</code>, <code class="language-plaintext highlighter-rouge">version</code>, <code class="language-plaintext highlighter-rouge">providers</code> 등의 예약어는 변수이름으로 사용할 수 없습니다.</li>
    </ul>
  </li>
  <li>
    <p>변수 참조 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># 변수 참조</span>
  <span class="kd">var</span><span class="err">.&lt;이름&gt;</span>
  
  <span class="c1"># 배열인 경우 [&lt;인덱스&gt;] 로 참조</span>
  <span class="kd">var</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="err">&lt;인덱스&gt;</span><span class="p">]</span>
  
  <span class="c1"># 배열의 10번째 항목 참조 예시</span>
  <span class="kd">var</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>  
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="variable-블록에서-사용-가능한-메타변수">variable 블록에서 사용 가능한 메타변수</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">variable</code> 블록에서는 다음의 메타변수를 사용 가능합니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>메타변수</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>default</td>
      <td>기본값을 지정합니다. 기본값도 없고, 다른 방법들로 지정되지 않으면 대화식으로 사용자에게 묻습니다.</td>
    </tr>
    <tr>
      <td>type</td>
      <td>변수 유형을 지정합니다.</td>
    </tr>
    <tr>
      <td>description</td>
      <td>입력변수의 설명을 기입합니다.</td>
    </tr>
    <tr>
      <td>validation</td>
      <td>변수의 제약 조건을 부여하고 유효성 검사 규칙을 정의합니다. <a href="https://honglab.tistory.com/217">참고</a></td>
    </tr>
    <tr>
      <td>sensitive</td>
      <td>비밀번호 등의 민감한 변수임을 표시하고 출력문에서 값 노출을 제한합니다. <a href="https://daaa0555.tistory.com/371">참고</a></td>
    </tr>
    <tr>
      <td>nullable</td>
      <td>변수에 값이 없어도 됨을 지정합니다.</td>
    </tr>
  </tbody>
</table>

<h4 id="입력-변수-유형">입력 변수 유형</h4>

<table>
  <thead>
    <tr>
      <th>유형</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>string</td>
      <td>문자열을 나타냅니다.</td>
    </tr>
    <tr>
      <td>number</td>
      <td>숫자를 나타냅니다.</td>
    </tr>
    <tr>
      <td>bool</td>
      <td>true, false의 불리언 값을 나타냅니다.</td>
    </tr>
    <tr>
      <td>list(<유형>)</유형></td>
      <td>리스트를 나타냅니다.</td>
    </tr>
    <tr>
      <td>map(<유형>)</유형></td>
      <td>맵을 나타냅니다.</td>
    </tr>
    <tr>
      <td>set(<유형>)</유형></td>
      <td>집합을 나타냅니다.</td>
    </tr>
    <tr>
      <td>object({<인수 이름="">=<유형>, ...})</유형></인수></td>
      <td>객체를 나타냅니다.</td>
    </tr>
    <tr>
      <td>tuple([<유형>, ...])</유형></td>
      <td>튜플을 나타냅니다.</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>입력 변수 사용 예시
    <ol>
      <li><code class="language-plaintext highlighter-rouge">number</code> 변수 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"number"</span> <span class="p">{</span>
   <span class="nx">type</span>    <span class="p">=</span> <span class="nx">number</span>
   <span class="nx">default</span> <span class="p">=</span> <span class="mi">10</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">list</code> 변수 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"list"</span> <span class="p">{</span>
   <span class="nx">type</span>    <span class="p">=</span> <span class="nx">list</span>
   <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">"two"</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">list</code>의 값으로 number로 받는 조건 결합 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"list"</span> <span class="p">{</span>
   <span class="nx">type</span>        <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
   <span class="nx">default</span>     <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
   <span class="c1"># default = [1, "two", 3] 과 같이 지정된 number 타입이 아닌 경우 오류 발생       </span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>모든 값이 string 인 map 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"map"</span> <span class="p">{</span>
   <span class="nx">type</span>    <span class="p">=</span> <span class="nx">map</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
   <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
       <span class="nx">key1</span> <span class="p">=</span> <span class="s2">"value1"</span>
       <span class="nx">key2</span> <span class="p">=</span> <span class="s2">"value2"</span>
   <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">object</code> 변수를 사용하여 복잡한 구조적 유형 (structural type) 작성 예시
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"object_example"</span> <span class="p">{</span>
   <span class="nx">type</span> <span class="p">=</span> <span class="nx">object</span><span class="p">({</span>
       <span class="nx">name</span>    <span class="p">=</span> <span class="nx">string</span>
       <span class="nx">age</span>     <span class="p">=</span> <span class="nx">number</span>
       <span class="nx">tags</span>    <span class="p">=</span> <span class="nx">list</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>
       <span class="nx">enabled</span> <span class="p">=</span> <span class="nx">bool</span>
   <span class="p">})</span>
        
   <span class="nx">default</span> <span class="p">=</span> <span class="p">{</span>
       <span class="nx">name</span>    <span class="p">=</span> <span class="s2">"value1"</span>
       <span class="nx">age</span>     <span class="p">=</span> <span class="mi">42</span>
       <span class="nx">tags</span>    <span class="p">=</span> <span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]</span>
       <span class="nx">enabled</span> <span class="p">=</span> <span class="kc">true</span>
   <span class="p">}</span>
  <span class="p">}</span> 
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h4 id="유효성-검사">유효성 검사</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">variable</code> 선언시 변수 타입 이외에도 사용자 지정 유효성 검사를 추가할 수 있습니다.</li>
  <li>
    <p>유효성 검사 작성 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">variable</span> <span class="s2">"image_id"</span> <span class="p">{</span>
    <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
    <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The id of the machine image (AMI) to use for the server."</span>
    
    <span class="nx">validation</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">image_id</span><span class="p">)</span> <span class="err">&gt;</span> <span class="mi">4</span>    <span class="c1"># true 또는 false를 반환하는 규칙 </span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"The image_id value must exceed 4."</span> <span class="c1"># false일 때 출력할 오류 메시지</span>
    <span class="p">}</span>
    
    <span class="nx">validation</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">can</span><span class="p">(</span><span class="nx">regex</span><span class="p">(</span><span class="s2">"^ami-"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">image_id</span><span class="p">))</span>  <span class="c1"># 정규 표현식을 사용한 예시</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"The image_id value must starting with </span><span class="se">\"</span><span class="s2">ami-</span><span class="se">\"</span><span class="s2">."</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">variable</code> 블록 내부에 <code class="language-plaintext highlighter-rouge">validation</code> 블록을 넣고, 그 안에 <code class="language-plaintext highlighter-rouge">condition</code>과 <code class="language-plaintext highlighter-rouge">error_message</code>를 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">condition</code> : 유효성 검사 조건을 지정합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">error_message</code> : 조건이 만족하지 않을 때 출력할 오류 메시지를 지정합니다.</li>
      <li>확인
        <ul>
          <li>아래와 같이 조건에 맞지 않는 ami 입력시 유효성 검사를 만족하지 못하여 오류 메시지가 출력되는것을 확인할 수 있습니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform plan
  <span class="c"># =&gt; var.image_id</span>
  <span class="c">#      The id of the machine image (AMI) to use for the server.</span>
  <span class="c">#    </span>
  <span class="c">#      Enter a value: ami</span>
  <span class="c">#    ...</span>
  <span class="c">#    </span>
  <span class="c">#    The image_id value must exceed 4.</span>
  <span class="c">#    </span>
  <span class="c">#    This was checked by the validation rule at main.tf:5,7-17.</span>
  <span class="c">#</span>
  <span class="c">#    ...    </span>
  <span class="c">#    </span>
  <span class="c">#    The image_id value must starting with "ami-".</span>
  <span class="c">#    </span>
  <span class="c">#    This was checked by the validation rule at main.tf:10,7-17.</span>
</code></pre></div>            </div>
          </li>
          <li>유효성 검사 조건을 만족하는 ami-1234 입력시 정상적으로 실행됩니다.
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform plan
  <span class="c"># =&gt; var.image_id</span>
  <span class="c">#    The id of the machine image (AMI) to use for the server.</span>
  <span class="c">#    </span>
  <span class="c">#    Enter a value: ami-1234</span>
  <span class="c">#    </span>
  <span class="c">#    local_file.abc: Refreshing state... [id=3ee66cf7a43f216ff7060c2bd85758424f7f18b3]</span>
  <span class="c">#    </span>
  <span class="c">#    No changes. Your infrastructure matches the configuration.</span>
  <span class="c">#    </span>
  <span class="c">#    Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.        </span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="sensitive-메타변수를-사용한-민감한-변수값-처리">sensitive 메타변수를 사용한 민감한 변수값 처리</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sensitive = true</code>를 <code class="language-plaintext highlighter-rouge">variable</code> 블록에 넣어서 해당 변수가 민감한 값을 갖고 있음을 지정할 수 있습니다.</li>
  <li>
    <p>민감한 변수값은 출력문에서 노출되지 않고 <code class="language-plaintext highlighter-rouge">(sensitive value)</code> 라는 내용으로 감춰집니다.</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="k">variable</span> <span class="s2">"my_password"</span> <span class="p">{</span>
      <span class="nx">default</span> <span class="p">=</span> <span class="s2">"supersecret"</span>
      <span class="nx">sensitive</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span> 
    
  <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">my_password</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li>확인
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># 1. terraform apply 실행시 my_password 변수값이 민감한 값으로 처리되어 출력됩니다.</span>
  <span class="nv">$ </span>terraform apply <span class="nt">--auto-approve</span>
  <span class="c"># =&gt; ...</span>
  <span class="c">#          + content              = (sensitive value)</span>
  <span class="c">#    ...</span>
      
  <span class="c"># 2. terraform console로 확인시에도 민감한 값으로 필터링 되어 출력됩니다.</span>
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
  <span class="c"># =&gt; (sensitive value)</span>
      
  <span class="c"># 3. 파일 내용은 실제 값으로 들어갑니다.</span>
  <span class="nv">$ </span><span class="nb">cat </span>abc.txt 
  <span class="c"># =&gt; supersecret</span>
      
  <span class="c"># 4. terraform.tfstate 파일은 실제값이 들어가 있습니다. .tfstate 파일을 안전하게 관리해야 할 필요가 있습니다.</span>
  <span class="nv">$ </span><span class="nb">cat </span>terraform.tfstate| <span class="nb">grep</span> <span class="s2">"content"</span>
  <span class="c"># =&gt; "content": "supersecret",</span>
</code></pre></div>        </div>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">terraform.tfstate</code> 에서는 sensitive 값이 노출되므로 주의해야 합니다. <code class="language-plaintext highlighter-rouge">terraform.tfstate</code> 파일을 안전하게 관리하는 방법은 다음의 방법 등이 있습니다.
            <ol>
              <li>AWS S3 등의 외부 스토리지에 저장하고, 권한을 제한</li>
              <li>민감한 정보를 <code class="language-plaintext highlighter-rouge">variable</code>를 사용하지 않고 다른 방법으로 (예) 파일 등) 넘기거나, 일시적으로 사용하고 즉시 변경할 수 있는 경우 사용</li>
              <li>민감한 정보는 Terraform에 넘길때 암호화 하여 사용하고, provisioning시 복호화하여 사용</li>
            </ol>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="변수-입력-방식과-우선-순위">변수 입력 방식과 우선 순위</h4>

<ul>
  <li>변수 입력 방식은 다음과 같습니다. 아래로 갈 수록 우선순위가 높아집니다.
    <ol>
      <li>실행 후 대화식 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="c"># =&gt; var.my_var</span>
 <span class="c">#    Enter a value: abcd</span>
      
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "abcd"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">variable</code> 블록에 <code class="language-plaintext highlighter-rouge">default</code>로 지정된 값
        <ul>
          <li><code class="language-plaintext highlighter-rouge">main.tf</code> 작성
            <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="k">variable</span> <span class="s2">"my_var"</span> <span class="p">{</span>
      <span class="nx">default</span> <span class="p">=</span> <span class="s2">"default value"</span>
  <span class="p">}</span>
</code></pre></div>            </div>
          </li>
          <li>실행
            <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
  <span class="c"># =&gt; ...</span>
  <span class="c"># =&gt; Apply complete! Resources: 1 added, 0 changed, 1 destroyed.</span>
         
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
  <span class="c"># =&gt; "default value"</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>환경 변수로 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">export </span><span class="nv">TF_VAR_my_var</span><span class="o">=</span><span class="s2">"환경변수"</span>
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "환경변수"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">terraform.tfvars</code> 파일을 통해 변수 파일로 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "terraform.tfvars 값"'</span> <span class="o">&gt;</span> terraform.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "terraform.tfvars 값"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">terraform.tfvars.json</code> 파일을 통해 변수 파일로 입력
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'{ "my_var": "terraform.tfvars.json 값" }'</span> <span class="o">&gt;</span> terraform.tfvars.json
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "terraform.tfvars.json 값"</span>
</code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">*.auto.tfvars</code> 또는 <code class="language-plaintext highlighter-rouge">*.auto.tfvars.json</code> 을 통해 변수 파일로 입력
        <ul>
          <li>단, 파일명의 정렬 순서에 따라 <code class="language-plaintext highlighter-rouge">*.auto.tfvars</code> 파일간의 우선순위기 적용됩니다.</li>
        </ul>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "eeee.auto.tfvars 값"'</span> <span class="o">&gt;</span> eeee.auto.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "eeee.auto.tfvars 값"</span>

 <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "zzzz.auto.tfvars 값"'</span> <span class="o">&gt;</span> zzzz.auto.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "zzzz.auto.tfvars 값"</span>

 <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var = "aaaa.auto.tfvars 값"'</span> <span class="o">&gt;</span> aaaa.auto.tfvars
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "zzzz.auto.tfvars 값"</span>
</code></pre></div>        </div>
        <ul>
          <li>위의 예제에서 보는것과 같이 정렬 순서에서 뒤로 갈 수록 우선순위가 높아집니다. z가 a나 e 보다 뒤이기 때문에 zzzz.auto.tfvars 값이 우선하게 적용됩니다.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">terraform apply</code> 시 <code class="language-plaintext highlighter-rouge">-var</code> 또는 <code class="language-plaintext highlighter-rouge">-var-file</code>로 파일 지정 명령행 인수 사용
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span> <span class="nt">-var</span><span class="o">=</span><span class="s1">'my_var=명령행 인수 값'</span> <span class="nt">-var</span><span class="o">=</span><span class="s2">"addtional_var=추가 변수 값"</span>
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "명령행 인수 값"</span>
     
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'my_var="-var-file 값"'</span> <span class="o">&gt;</span> varfiletest.txt
 <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span> <span class="nt">-var-file</span><span class="o">=</span>varfiletest.txt
 <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
 <span class="c"># =&gt; "-var-file 값"</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h3 id="locals-지역-값-블록">locals 지역 값 블록</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">locals</code> 블록은 테라폼 코드 내에서 재사용 가능한 지역 변수를 정의할 때 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">variable</code> 과는 달리 선언된 모듈 내에서만 사용 가능하며, 실행시에 입력받을 수 없습니다.</li>
  <li>단점으로는 실제 값에 대한 추적이 어려워 질 수 있다는 점입니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">locals</code> 블록 선언 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">locals</span> <span class="p">{</span>
      <span class="err">&lt;인수&gt;</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">source</code>, <code class="language-plaintext highlighter-rouge">version</code>, <code class="language-plaintext highlighter-rouge">providers</code> 등의 예약어는 변수이름으로 사용할 수 없습니다.</li>
    </ul>
  </li>
  <li>
    <p>참조 방법</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># 변수 참조</span>
  <span class="kd">local</span><span class="err">.&lt;이름&gt;</span>
  
  <span class="c1"># 배열인 경우 [&lt;인덱스&gt;] 로 참조</span>
  <span class="kd">local</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="err">&lt;인덱스&gt;</span><span class="p">]</span>
  
  <span class="c1"># 배열의 10번째 항목 참조 예시</span>
  <span class="kd">local</span><span class="err">.&lt;이름&gt;</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>  
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">locals</code> 블록 사용 예시
    <ul>
      <li><code class="language-plaintext highlighter-rouge">main.tf</code> 작성
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="k">variable</span> <span class="s2">"prefix"</span> <span class="p">{</span>
      <span class="nx">type</span>    <span class="p">=</span> <span class="nx">string</span>
      <span class="nx">default</span> <span class="p">=</span> <span class="s2">"hello"</span>
  <span class="p">}</span>
    
  <span class="nx">locals</span> <span class="p">{</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"terraform"</span>
      <span class="nx">content</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">prefix</span><span class="k">}</span><span class="s2"> </span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">name</span><span class="k">}</span><span class="s2">"</span>
      <span class="nx">my_info</span> <span class="p">=</span> <span class="p">{</span>
          <span class="nx">age</span> <span class="p">=</span> <span class="mi">20</span>
          <span class="nx">region</span> <span class="p">=</span> <span class="s2">"KR"</span>
      <span class="p">}</span>
      <span class="nx">my_nums</span> <span class="p">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
  <span class="p">}</span>
    
  <span class="nx">locals</span> <span class="p">{</span>
      <span class="nx">my_string</span> <span class="p">=</span> <span class="s2">"string </span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">content</span><span class="k">}</span><span class="s2">"</span>
      <span class="c1"># content = "content2" # 위의 locals에 등록되어서 로컬변수명이 중복되어 오류가 발생합니다.    </span>
  <span class="p">}</span>
      
  <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
      <span class="nx">content</span>  <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">content</span>
      <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>실행 결과 확인
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
        
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local_file.abc.content"</span> | terraform console
  <span class="c"># =&gt; "hello terraform"</span>
    
  <span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"local.my_string"</span> | terraform console
  <span class="c"># =&gt; "string hello terraform"</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="output-출력-값-블록">output 출력 값 블록</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">output</code> 블록은 테라폼 코드 프로비저닝 수행 후 결과 속성 값을 확인하는 용도로 사용합니다.</li>
  <li>출력 값은 다음의 용도로 사용할 수 있습니다.
    <ul>
      <li>루트 모듈에서 사용자가 확인하고자 하는 특정 속성 출력</li>
      <li>자식 모듈의 특정값을 정의하고 루트 모듈에서 결과를 참조</li>
      <li>루트 모듈 간의 결과를 원격으로 읽기 위한 접근 요소</li>
    </ul>
  </li>
  <li>output 블록 선언 방법
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">output</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
      <span class="nx">value</span> <span class="p">=</span> <span class="err">&lt;값&gt;</span>
      <span class="err">&lt;메타변수&gt;</span> <span class="p">=</span> <span class="err">&lt;메타변수</span> <span class="err">값&gt;</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="output-블록에서-사용-가능한-메타변수">output 블록에서 사용 가능한 메타변수</h4>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">output</code> 블록에서는 다음의 메타변수를 사용 가능합니다.</p>

    <table>
      <thead>
        <tr>
          <th>메타변수</th>
          <th>설명</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>description</td>
          <td>출력값의 설명을 기입합니다.</td>
        </tr>
        <tr>
          <td>sensitive</td>
          <td>비밀번호 등의 민감한 값임을 표시하고 출력문에서 값 노출을 제한합니다.</td>
        </tr>
        <tr>
          <td>depends_on</td>
          <td>value에 담길 값이 종속성이 있는 경우 지정하면 생성 순서가 조정됩니다.</td>
        </tr>
        <tr>
          <td>precondition</td>
          <td>출력전에 지정된 조건을 검증합니다.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>출력 값 사용 예시</p>
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># main.tf</span>
  <span class="nx">locals</span> <span class="p">{</span>
    <span class="nx">content</span> <span class="p">=</span> <span class="s2">"local content"</span>
  <span class="p">}</span>
    
  <span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
    <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">local</span><span class="p">.</span><span class="nx">content</span><span class="k">}</span><span class="s2">"</span>
    <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  <span class="p">}</span>
    
  <span class="k">output</span> <span class="s2">"file_id"</span> <span class="p">{</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">id</span>
    <span class="nx">depends_on</span> <span class="p">=</span> <span class="p">[</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span> <span class="p">]</span>
  <span class="p">}</span>
    
  <span class="k">output</span> <span class="s2">"file_abspath"</span> <span class="p">{</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="nx">abspath</span><span class="p">(</span><span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">filename</span><span class="p">)</span>
    <span class="nx">description</span> <span class="p">=</span> <span class="s2">"파일의 절대 경로"</span>
  <span class="p">}</span>
    
  <span class="k">output</span> <span class="s2">"local_content"</span> <span class="p">{</span>
    <span class="nx">value</span> <span class="p">=</span> <span class="kd">local</span><span class="p">.</span><span class="nx">content</span>
    <span class="nx">sensitive</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li>실행 결과</li>
    </ul>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">$</span> <span class="k">terraform</span> <span class="nx">apply</span> <span class="nx">-auto-approve</span>
  <span class="c1"># =&gt; ...</span>
  <span class="c1">#    Outputs:</span>
  <span class="c1">#    </span>
  <span class="c1">#    file_abspath = ".../week-2/mytest7-output/abc.txt"</span>
  <span class="c1">#    file_id = "094f587b52451d1d5f3ef42a921fc877d8b18c1b"</span>
  <span class="c1">#    local_content = &lt;sensitive&gt;</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h2 id="반복문-12">반복문 (1/2)</h2>

<ul>
  <li>list 형태의 값 목록이나 Key-Value 형태의 맵을 항목 만큼 반복하여 인프라 구성 정의를 항목 개수만큼 반복적으로 작성하지 않고,
  반복문을 사용하여 간단하게 작성할 수 있습니다.</li>
  <li>테라폼의 HCL에는 <code class="language-plaintext highlighter-rouge">count</code>와 <code class="language-plaintext highlighter-rouge">for_each</code> 두 가지 반복문이 있습니다.</li>
  <li>이번 주차에는 <code class="language-plaintext highlighter-rouge">count</code> 반복문에 대해 알아보았습니다.</li>
</ul>

<h3 id="count-반복문">count 반복문</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">count</code>는 프로그래밍 언어의 <code class="language-plaintext highlighter-rouge">for</code>문 처럼 정수값만큼 반복합니다.</li>
  <li>기본 적인 사용법은 아래와 같습니다.</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"&lt;프로바이더이름_리소스유형&gt;"</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
    <span class="nx">count</span> <span class="p">=</span> <span class="err">&lt;반복횟수&gt;</span>
    <span class="nx">content</span> <span class="p">=</span> <span class="s2">"Index = </span><span class="k">${</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="k">}</span><span class="s2">"</span> <span class="c1"># count.index 로 현재 반복 인덱스를 참조</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>위의 코드에서 <code class="language-plaintext highlighter-rouge">count</code> 횟수 만큼 반복해서 resource나 모듈을 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">count</code>의 반복횟수 참고값은 <code class="language-plaintext highlighter-rouge">count.index</code>를 통해 확인할 수 있으며, 0부터 시작해서 1씩 증가합니다.</li>
  <li>사용 예제
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"fruits"</span> <span class="p">{</span>
  <span class="nx">type</span> <span class="p">=</span> <span class="nx">list</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">]</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"fruit_files"</span> <span class="p">{</span>
  <span class="nx">count</span> <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">fruits</span><span class="p">)</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/i_love_</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">fruits</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="k">}</span><span class="s2">.txt"</span>
  <span class="nx">content</span> <span class="p">=</span> <span class="s2">"I love </span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">fruits</span><span class="p">[</span><span class="nx">count</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="k">}</span><span class="s2">!"</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span> <span class="k">terraform</span> <span class="nx">apply</span> <span class="nx">-auto-approve</span>
     
<span class="nx">$</span> <span class="nx">ls</span> <span class="nx">-1</span>
<span class="c1"># =&gt; i_love_apple.txt</span>
<span class="c1">#    i_love_banana.txt</span>
<span class="c1">#    i_love_kiwi.txt</span>
    
<span class="nx">$</span> <span class="nx">cat</span> <span class="nx">i_love_apple</span><span class="err">.</span><span class="nx">txt</span>
<span class="c1"># =&gt; I love apple!</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="도전과제">도전과제</h2>

<h3 id="도전과제-1-리전-내에서-사용-가능한-가용영역-목록-가져오기를-사용한-vpc-리소스-생성-실습-진행">도전과제 1. 리전 내에서 사용 가능한 가용영역 목록 가져오기를 사용한 VPC 리소스 생성 실습 진행</h3>
<ul>
  <li>가용영역 목록을 가져와서 VPC를 만들고, 사용 가능한 첫번째 가용영역에 subnet을 만드는 실습을 진행하였습니다.</li>
  <li>소스
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">data</span> <span class="s2">"aws_availability_zones"</span> <span class="s2">"available"</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="p">=</span> <span class="s2">"available"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.0.0.0/16"</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"challenge1 vpc"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_availability_zones</span><span class="p">.</span><span class="nx">available</span><span class="p">.</span><span class="nx">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.0.1.0/24"</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"challenge1 subnet"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
</code></pre></div>    </div>
  </li>
  <li>실행 결과
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    aws_vpc.peter_vpc: Creating...</span>
<span class="c">#    aws_vpc.peter_vpc: Creation complete after 1s [id=vpc-0e6762235c588581b]</span>
<span class="c">#    aws_subnet.peter_subnet: Creating...</span>
<span class="c">#    aws_subnet.peter_subnet: Creation complete after 0s [id=subnet-06888df37bc01ab4c]</span>
  
<span class="c"># 결과 확인</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.id"</span> | terraform console
<span class="c"># =&gt; "vpc-0e6762235c588581b"</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_subnet.peter_subnet.id"</span> | terraform console
<span class="c"># =&gt; "subnet-06888df37bc01ab4c"</span>
</code></pre></div>    </div>
    <ul>
      <li>AWS 콘솔에서 VPC 생성 확인
<img src="/assets/2024/20240622_terraform_w2_vpc.png" alt="20240622_terraform_w2_vpc.png" /></li>
      <li>AWS 콘솔에서 Subnet 생성 확인
<img src="/assets/2024/20240622_terraform_w2_subnet.png" alt="20240622_terraform_w2_subnet.png" /></li>
    </ul>
  </li>
  <li>
    <p>그래프</p>

    <svg width="455pt" height="98pt" viewBox="0.00 0.00 454.75 98.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-94 450.75,-94 450.75,4 -4,4" />
<!-- data.aws_availability_zones.available -->
<g id="node1" class="node">
<title>data.aws_availability_zones.available</title>
<polygon fill="none" stroke="black" points="240.25,-90 0,-90 0,-54 240.25,-54 240.25,-90" />
<text text-anchor="middle" x="120.12" y="-66.2" font-family="sans-serif" font-size="14.00">data.aws_availability_zones.available</text>
</g>
<!-- aws_subnet.peter_subnet -->
<g id="node2" class="node">
<title>aws_subnet.peter_subnet</title>
<polygon fill="none" stroke="black" points="446.75,-63 276.25,-63 276.25,-27 446.75,-27 446.75,-63" />
<text text-anchor="middle" x="361.5" y="-39.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet</text>
</g>
<!-- aws_subnet.peter_subnet&#45;&gt;data.aws_availability_zones.available -->
<g id="edge1" class="edge">
<title>aws_subnet.peter_subnet&#45;&gt;data.aws_availability_zones.available</title>
<path fill="none" stroke="black" d="M275.77,-54.56C268,-55.43 260.01,-56.33 251.96,-57.24" />
<polygon fill="black" stroke="black" points="251.59,-53.76 242.05,-58.36 252.38,-60.72 251.59,-53.76" />
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node3" class="node">
<title>aws_vpc.peter_vpc</title>
<polygon fill="none" stroke="black" points="185.88,-36 54.38,-36 54.38,0 185.88,0 185.88,-36" />
<text text-anchor="middle" x="120.12" y="-12.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_subnet.peter_subnet&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge2" class="edge">
<title>aws_subnet.peter_subnet&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M275.77,-35.44C250.23,-32.56 222.36,-29.42 197.4,-26.6" />
<polygon fill="black" stroke="black" points="197.99,-23.15 187.66,-25.5 197.2,-30.1 197.99,-23.15" />
</g>
</g>
</svg>
  </li>
</ul>

<h3 id="도전과제-2-위-3개-코드-파일-내용에-리소스의-이름myvpc-mysubnet1-등을-반드시-꼭-자신의-닉네임으로-변경해서-배포-실습해보세요">도전과제 2. 위 3개 코드 파일 내용에 리소스의 이름(myvpc, mysubnet1 등)을 반드시! 꼭! 자신의 닉네임으로 변경해서 배포 실습해보세요!</h3>

<ul>
  <li>vpc.tf 생성
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vpc.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform init <span class="o">&amp;&amp;</span> terraform plan <span class="o">&amp;&amp;</span> terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Plan: 1 to add, 0 to change, 0 to destroy.</span>
<span class="c">#    aws_vpc.peter_vpc: Creating...</span>
<span class="c">#    aws_vpc.peter_vpc: Creation complete after 2s [id=vpc-0e1ad43009a8fe8fa]</span>
<span class="c">#    </span>
<span class="c">#    Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span>
    
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_vpc.peter_vpc.id"</span> | terraform console
<span class="c"># =&gt; "vpc-0e1ad43009a8fe8fa"</span>
   
<span class="nv">$ </span>aws ec2 describe-vpcs <span class="nt">--filter</span> <span class="s1">'Name=isDefault,Values=false'</span> | jq
<span class="c"># =&gt; {</span>
<span class="c">#      "Vpcs": [</span>
<span class="c">#        {</span>
<span class="c">#          "CidrBlock": "10.10.0.0/16",</span>
<span class="c">#          "DhcpOptionsId": "dopt-0c264ef627294fd1f",</span>
<span class="c">#          "State": "available",</span>
<span class="c">#          "VpcId": "vpc-0e1ad43009a8fe8fa",</span>
<span class="c">#          "OwnerId": "654654550747",</span>
<span class="c">#          "InstanceTenancy": "default",</span>
<span class="c">#          "CidrBlockAssociationSet": [</span>
<span class="c">#            {</span>
<span class="c">#              "AssociationId": "vpc-cidr-assoc-0e9adafb317c75f4f",</span>
<span class="c">#              "CidrBlock": "10.10.0.0/16",</span>
<span class="c">#              "CidrBlockState": {</span>
<span class="c">#                "State": "associated"</span>
<span class="c">#              }</span>
<span class="c">#            }</span>
<span class="c">#          ],</span>
<span class="c">#          "IsDefault": false,</span>
<span class="c">#          "Tags": [</span>
<span class="c">#            {</span>
<span class="c">#              "Key": "name",</span>
<span class="c">#              "Value": "t101-study"</span>
<span class="c">#            }</span>
<span class="c">#          ]</span>
<span class="c">#        }</span>
<span class="c">#      ]</span>
<span class="c">#    }</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>AWS 콘솔에서 VPC 생성정보 확인 : DNS 옵션값 확인
    <ul>
      <li>아래의 캡쳐와 같이 DNS hostnames는 Disabled, DNS resolution은 Enabled 된 것을 확인하였습니다.
<img src="/assets/2024/20240622_terraform_w2_c2_p1_1.png" alt="20240622_terraform_w2_c2_p1_1.png" /></li>
    </ul>
  </li>
  <li>vpc.tf의 DNS 옵션을 수정하여 두 DNS 옵션값을 enabled 로 변경
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vpc.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">enable_dns_support</span> <span class="p">=</span> <span class="kc">true</span>   <span class="c1"># 추가</span>
  <span class="nx">enable_dns_hostnames</span> <span class="p">=</span> <span class="kc">true</span> <span class="c1"># 추가</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>수정된 vpc.tf 적용
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
</code></pre></div>    </div>
  </li>
  <li>AWS 콘솔에서 VPC 생성정보 확인 : DNS 옵션값 확인
    <ul>
      <li>아래와 같이 DNS hostnames 도 Enabled 되었습니다.
<img src="/assets/2024/20240622_terraform_w2_c2_p1_2.png" alt="20240622_terraform_w2_c2_p1_2.png" /></li>
    </ul>
  </li>
  <li>vpc.tf 코드 내용 수정 : 서브넷 2개 생성 추가
    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">enable_dns_support</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">enable_dns_hostnames</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet1"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.1.0/24"</span>
  
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2a"</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet1"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet2"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.2.0/24"</span>
  
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2c"</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet2"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"aws_vpc_id"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li>실행 결과 확인
        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
    
<span class="nv">$ </span>terraform state list
<span class="c"># =&gt; aws_subnet.peter_subnet1</span>
<span class="c">#    aws_subnet.peter_subnet2</span>
<span class="c">#    aws_vpc.peter_vpc</span>
    
<span class="nv">$ </span>terraform output
<span class="c"># =&gt; aws_vpc_id = "vpc-0e1ad43009a8fe8fa"</span>
    
<span class="nv">$ </span>terraform output aws_vpc_id
<span class="c"># =&gt; "vpc-0e1ad43009a8fe8fa"</span>
    
<span class="nv">$ </span>terraform output <span class="nt">-raw</span> aws_vpc_id
<span class="c"># =&gt; vpc-0e1ad43009a8fe8fa</span>
    
<span class="nv">$ VPCID</span><span class="o">=</span><span class="si">$(</span>terraform output <span class="nt">-raw</span> aws_vpc_id<span class="si">)</span>
    
<span class="nv">$ </span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="s2">"Name=vpc-id,Values=</span><span class="nv">$VPCID</span><span class="s2">"</span> <span class="nt">--output</span> table
</code></pre></div>        </div>
        <p><img src="/assets/2024/20240622_terraform_w2_c2_p1_3.png" alt="20240622_terraform_w2_c2_p1_3.png" /></p>

        <p><code class="language-plaintext highlighter-rouge">terraform output</code> 시 <code class="language-plaintext highlighter-rouge">-raw</code> 옵션을 사용하면 “(따옴표) 없이 출력값만을 확인할 수 있습니다. 스크립트 작성시 유용할듯합니다.</p>
      </li>
      <li>
        <p>그래프</p>

        <svg width="354pt" height="98pt" viewBox="0.00 0.00 353.50 98.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-94 349.5,-94 349.5,4 -4,4" />
<!-- aws_subnet.peter_subnet1 -->
<g id="node1" class="node">
<title>aws_subnet.peter_subnet1</title>
<polygon fill="none" stroke="black" points="345.5,-90 167.5,-90 167.5,-54 345.5,-54 345.5,-90" />
<text text-anchor="middle" x="256.5" y="-66.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet1</text>
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node3" class="node">
<title>aws_vpc.peter_vpc</title>
<polygon fill="none" stroke="black" points="131.5,-63 0,-63 0,-27 131.5,-27 131.5,-63" />
<text text-anchor="middle" x="65.75" y="-39.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_subnet.peter_subnet1&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge1" class="edge">
<title>aws_subnet.peter_subnet1&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M167.2,-59.37C159.21,-58.23 151.16,-57.07 143.28,-55.95" />
<polygon fill="black" stroke="black" points="143.78,-52.48 133.38,-54.53 142.79,-59.41 143.78,-52.48" />
</g>
<!-- aws_subnet.peter_subnet2 -->
<g id="node2" class="node">
<title>aws_subnet.peter_subnet2</title>
<polygon fill="none" stroke="black" points="345.5,-36 167.5,-36 167.5,0 345.5,0 345.5,-36" />
<text text-anchor="middle" x="256.5" y="-12.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet2</text>
</g>
<!-- aws_subnet.peter_subnet2&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge2" class="edge">
<title>aws_subnet.peter_subnet2&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M167.2,-30.63C159.21,-31.77 151.16,-32.93 143.28,-34.05" />
<polygon fill="black" stroke="black" points="142.79,-30.59 133.38,-35.47 143.78,-37.52 142.79,-30.59" />
</g>
</g>
</svg>
      </li>
    </ul>
  </li>
  <li>이후 다음의 작업을 추가 적용 하였습니다.
    <ul>
      <li>IGW 인터넷 게이트웨이 추가</li>
      <li>IGW 인터넷 게이트웨이로 전달하는 디폴트 라우팅 정보 추가</li>
      <li>보안그룹/EC2 배포</li>
    </ul>
  </li>
  <li>최종 결과는 아래와 같습니다.
    <ul>
      <li>vpc.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vpc.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_vpc"</span> <span class="s2">"peter_vpc"</span> <span class="p">{</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.0.0/16"</span>
  <span class="nx">enable_dns_support</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">enable_dns_hostnames</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-study"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet1"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.1.0/24"</span>
    
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2a"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet1"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_subnet"</span> <span class="s2">"peter_subnet2"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>     <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">cidr_block</span> <span class="p">=</span> <span class="s2">"10.10.2.0/24"</span>
    
  <span class="nx">availability_zone</span> <span class="p">=</span> <span class="s2">"ap-northeast-2c"</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-subnet2"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_internet_gateway"</span> <span class="s2">"peter_igw"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-igw"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
    
<span class="k">resource</span> <span class="s2">"aws_route_table"</span> <span class="s2">"peter_rt"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-rt"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_route_table_association"</span> <span class="s2">"peter_rtassociation1"</span> <span class="p">{</span>
  <span class="nx">subnet_id</span>      <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet1</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">route_table_id</span> <span class="p">=</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">peter_rt</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_route_table_association"</span> <span class="s2">"peter_rtassociation2"</span> <span class="p">{</span>
  <span class="nx">subnet_id</span>      <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet2</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">route_table_id</span> <span class="p">=</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">peter_rt</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_route"</span> <span class="s2">"peter_defaultroute"</span> <span class="p">{</span>
  <span class="nx">route_table_id</span>         <span class="p">=</span> <span class="nx">aws_route_table</span><span class="p">.</span><span class="nx">peter_rt</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">destination_cidr_block</span> <span class="p">=</span> <span class="s2">"0.0.0.0/0"</span>
  <span class="nx">gateway_id</span>             <span class="p">=</span> <span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">peter_igw</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"aws_vpc_id"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
      <li>sg.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sg.tf</span>
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"peter_sg"</span> <span class="p">{</span>
  <span class="nx">vpc_id</span>      <span class="p">=</span> <span class="nx">aws_vpc</span><span class="p">.</span><span class="nx">peter_vpc</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">name</span>        <span class="p">=</span> <span class="s2">"T101 SG"</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"T101 Study SG"</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_security_group_rule"</span> <span class="s2">"peter_sginbound"</span> <span class="p">{</span>
  <span class="nx">type</span>              <span class="p">=</span> <span class="s2">"ingress"</span>
  <span class="nx">from_port</span>         <span class="p">=</span> <span class="mi">80</span>
  <span class="nx">to_port</span>           <span class="p">=</span> <span class="mi">80</span>
  <span class="nx">protocol</span>          <span class="p">=</span> <span class="s2">"tcp"</span>
  <span class="nx">cidr_blocks</span>       <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="nx">security_group_id</span> <span class="p">=</span> <span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_security_group_rule"</span> <span class="s2">"peter_sgoutbound"</span> <span class="p">{</span>
  <span class="nx">type</span>              <span class="p">=</span> <span class="s2">"egress"</span>
  <span class="nx">from_port</span>         <span class="p">=</span> <span class="mi">0</span>
  <span class="nx">to_port</span>           <span class="p">=</span> <span class="mi">0</span>
  <span class="nx">protocol</span>          <span class="p">=</span> <span class="s2">"-1"</span>
  <span class="nx">cidr_blocks</span>       <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="nx">security_group_id</span> <span class="p">=</span> <span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"aws_security_group_id"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
      <li>ec2.tf
        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ec2.tf</span>
<span class="k">data</span> <span class="s2">"aws_ami"</span> <span class="s2">"peter_amazonlinux2"</span> <span class="p">{</span>
  <span class="nx">most_recent</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">filter</span> <span class="p">{</span>
    <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"owner-alias"</span>
    <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amazon"</span><span class="p">]</span>
  <span class="p">}</span>
    
  <span class="nx">filter</span> <span class="p">{</span>
    <span class="nx">name</span>   <span class="p">=</span> <span class="s2">"name"</span>
    <span class="nx">values</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amzn2-ami-hvm-*-x86_64-ebs"</span><span class="p">]</span>
  <span class="p">}</span>
    
  <span class="nx">owners</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"amazon"</span><span class="p">]</span>
<span class="p">}</span>
    
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"peter_ec2"</span> <span class="p">{</span>
    
  <span class="nx">depends_on</span> <span class="p">=</span> <span class="p">[</span>
    <span class="nx">aws_internet_gateway</span><span class="p">.</span><span class="nx">peter_igw</span>
  <span class="p">]</span>
    
  <span class="nx">ami</span>                         <span class="p">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_ami</span><span class="p">.</span><span class="nx">peter_amazonlinux2</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">associate_public_ip_address</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="nx">instance_type</span>               <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">vpc_security_group_ids</span>      <span class="p">=</span> <span class="p">[</span><span class="s2">"</span><span class="k">${</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">peter_sg</span><span class="p">.</span><span class="nx">id</span><span class="k">}</span><span class="s2">"</span><span class="p">]</span>
  <span class="nx">subnet_id</span>                   <span class="p">=</span> <span class="nx">aws_subnet</span><span class="p">.</span><span class="nx">peter_subnet1</span><span class="p">.</span><span class="nx">id</span>
    
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              wget https://busybox.net/downloads/binaries/1.31.0-defconfig-multiarch-musl/busybox-x86_64
              mv busybox-x86_64 busybox
              chmod +x busybox
              RZAZ=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone-id)
              IID=$(curl 169.254.169.254/latest/meta-data/instance-id)
              LIP=$(curl 169.254.169.254/latest/meta-data/local-ipv4)
              echo "&lt; h1&gt;RegionAz($RZAZ) : Instance ID($IID) : Private IP($LIP) : Web Server&lt;/h1&gt;&lt;br/&gt;Greetings commander" &gt; index.html
              nohup ./busybox httpd -f -p 80 &amp;
</span><span class="no">              EOF
    
</span>  <span class="nx">user_data_replace_on_change</span> <span class="p">=</span> <span class="kc">true</span>
    
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"t101-peter_ec2"</span>
  <span class="p">}</span>
<span class="p">}</span>
    
<span class="k">output</span> <span class="s2">"peter_ec2_public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">peter_ec2</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span>    
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>배포 후 EC2 확인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>terraform apply <span class="nt">-auto-approve</span>
<span class="c"># =&gt; ...</span>
<span class="c">#    Outputs:</span>

<span class="c">#    aws_security_group_id = "sg-07761e7b1e39b5af6"</span>
<span class="c">#    aws_vpc_id = "vpc-0e1ad43009a8fe8fa"</span>
<span class="c">#    peter_ec2_public_ip = "54.180.146.116"</span>
  
<span class="c"># ami 데이터 확인</span>
<span class="nv">$ </span>terraform state show data.aws_ami.my_amazonlinux2
  
<span class="c"># EC2 인스턴스 정보 확인</span>
<span class="nv">$ </span>terraform state show aws_instance.myec2
  
<span class="c"># EC2 인스턴스 IP 확인</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"aws_instance.peter_ec2.public_ip"</span> | terraform console
<span class="c"># =&gt; "54.180.146.116"</span>
<span class="nv">$ </span>terraform output <span class="nt">-raw</span> peter_ec2_public_ip
<span class="c"># =&gt; 54.180.146.116</span>
  
<span class="c"># curl 로 접속 확인</span>
<span class="nv">$ PETER_EC2_IP</span><span class="o">=</span><span class="si">$(</span>terraform output <span class="nt">-raw</span> peter_ec2_public_ip<span class="si">)</span>
<span class="nv">$ </span>curl <span class="nv">$PETER_EC2_IP</span>                                      
<span class="c"># =&gt; &lt; h1&gt;RegionAz(apne2-az1) : Instance ID(i-0d4b665d1ce7a4b09) : Private IP(10.10.1.41) : Web Server&lt;/h1&gt;&lt;br/&gt;Greetings commander</span>
</code></pre></div>    </div>
  </li>
  <li>브라우저로 접속 확인
<img src="/assets/2024/20240622_terraform_w2_c2_p1_4.png" alt="20240622_terraform_w2_c2_p1_4.png" /></li>
  <li>그래프 확인
    <svg width="753pt" height="341pt" viewBox="0.00 0.00 752.75 341.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 337)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-337 748.75,-337 748.75,4 -4,4" />
<!-- data.aws_ami.peter_amazonlinux2 -->
<g id="node1" class="node">
<title>data.aws_ami.peter_amazonlinux2</title>
<polygon fill="none" stroke="black" points="393.5,-252 167.5,-252 167.5,-216 393.5,-216 393.5,-252" />
<text text-anchor="middle" x="280.5" y="-228.2" font-family="sans-serif" font-size="14.00">data.aws_ami.peter_amazonlinux2</text>
</g>
<!-- aws_instance.peter_ec2 -->
<g id="node2" class="node">
<title>aws_instance.peter_ec2</title>
<polygon fill="none" stroke="black" points="667.88,-198 506.38,-198 506.38,-162 667.88,-162 667.88,-198" />
<text text-anchor="middle" x="587.12" y="-174.2" font-family="sans-serif" font-size="14.00">aws_instance.peter_ec2</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;data.aws_ami.peter_amazonlinux2 -->
<g id="edge1" class="edge">
<title>aws_instance.peter_ec2&#45;&gt;data.aws_ami.peter_amazonlinux2</title>
<path fill="none" stroke="black" d="M506.09,-194.19C472.7,-200.11 433.28,-207.09 396.86,-213.55" />
<polygon fill="black" stroke="black" points="396.39,-210.08 387.15,-215.27 397.61,-216.97 396.39,-210.08" />
</g>
<!-- aws_internet_gateway.peter_igw -->
<g id="node3" class="node">
<title>aws_internet_gateway.peter_igw</title>
<polygon fill="none" stroke="black" points="386.38,-198 174.62,-198 174.62,-162 386.38,-162 386.38,-198" />
<text text-anchor="middle" x="280.5" y="-174.2" font-family="sans-serif" font-size="14.00">aws_internet_gateway.peter_igw</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;aws_internet_gateway.peter_igw -->
<g id="edge2" class="edge">
<title>aws_instance.peter_ec2&#45;&gt;aws_internet_gateway.peter_igw</title>
<path fill="none" stroke="black" d="M506.09,-180C473.02,-180 434.03,-180 397.91,-180" />
<polygon fill="black" stroke="black" points="398.31,-176.5 388.31,-180 398.31,-183.5 398.31,-176.5" />
</g>
<!-- aws_security_group.peter_sg -->
<g id="node8" class="node">
<title>aws_security_group.peter_sg</title>
<polygon fill="none" stroke="black" points="376.62,-306 184.38,-306 184.38,-270 376.62,-270 376.62,-306" />
<text text-anchor="middle" x="280.5" y="-282.2" font-family="sans-serif" font-size="14.00">aws_security_group.peter_sg</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;aws_security_group.peter_sg -->
<g id="edge3" class="edge">
<title>aws_instance.peter_ec2&#45;&gt;aws_security_group.peter_sg</title>
<path fill="none" stroke="black" d="M517.9,-198.43C489.7,-207.34 457.2,-219.31 429.5,-234 411.83,-243.37 411.59,-252.48 393.5,-261 390,-262.65 386.39,-264.2 382.71,-265.66" />
<polygon fill="black" stroke="black" points="381.76,-262.28 373.58,-269.03 384.18,-268.85 381.76,-262.28" />
</g>
<!-- aws_subnet.peter_subnet1 -->
<g id="node11" class="node">
<title>aws_subnet.peter_subnet1</title>
<polygon fill="none" stroke="black" points="369.5,-144 191.5,-144 191.5,-108 369.5,-108 369.5,-144" />
<text text-anchor="middle" x="280.5" y="-120.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet1</text>
</g>
<!-- aws_instance.peter_ec2&#45;&gt;aws_subnet.peter_subnet1 -->
<g id="edge4" class="edge">
<title>aws_instance.peter_ec2&#45;&gt;aws_subnet.peter_subnet1</title>
<path fill="none" stroke="black" d="M506.02,-166.35C481.46,-162.12 454.36,-157.41 429.5,-153 413.83,-150.22 397.23,-147.23 381.04,-144.3" />
<polygon fill="black" stroke="black" points="381.86,-140.89 371.4,-142.54 380.61,-147.78 381.86,-140.89" />
</g>
<!-- aws_vpc.peter_vpc -->
<g id="node13" class="node">
<title>aws_vpc.peter_vpc</title>
<polygon fill="none" stroke="black" points="131.5,-144 0,-144 0,-108 131.5,-108 131.5,-144" />
<text text-anchor="middle" x="65.75" y="-120.2" font-family="sans-serif" font-size="14.00">aws_vpc.peter_vpc</text>
</g>
<!-- aws_internet_gateway.peter_igw&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge5" class="edge">
<title>aws_internet_gateway.peter_igw&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M201.71,-161.52C190.23,-158.71 178.55,-155.81 167.5,-153 159.51,-150.97 151.17,-148.8 142.86,-146.62" />
<polygon fill="black" stroke="black" points="144.02,-143.3 133.46,-144.13 142.23,-150.07 144.02,-143.3" />
</g>
<!-- aws_route.peter_defaultroute -->
<g id="node4" class="node">
<title>aws_route.peter_defaultroute</title>
<polygon fill="none" stroke="black" points="682.88,-144 491.38,-144 491.38,-108 682.88,-108 682.88,-144" />
<text text-anchor="middle" x="587.12" y="-120.2" font-family="sans-serif" font-size="14.00">aws_route.peter_defaultroute</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_internet_gateway.peter_igw -->
<g id="edge6" class="edge">
<title>aws_route.peter_defaultroute&#45;&gt;aws_internet_gateway.peter_igw</title>
<path fill="none" stroke="black" d="M491.26,-142.2C470.88,-145.72 449.47,-149.46 429.5,-153 417.69,-155.1 405.35,-157.31 393.05,-159.53" />
<polygon fill="black" stroke="black" points="392.49,-156.07 383.28,-161.3 393.74,-162.96 392.49,-156.07" />
</g>
<!-- aws_route_table.peter_rt -->
<g id="node5" class="node">
<title>aws_route_table.peter_rt</title>
<polygon fill="none" stroke="black" points="363.12,-90 197.88,-90 197.88,-54 363.12,-54 363.12,-90" />
<text text-anchor="middle" x="280.5" y="-66.2" font-family="sans-serif" font-size="14.00">aws_route_table.peter_rt</text>
</g>
<!-- aws_route.peter_defaultroute&#45;&gt;aws_route_table.peter_rt -->
<g id="edge7" class="edge">
<title>aws_route.peter_defaultroute&#45;&gt;aws_route_table.peter_rt</title>
<path fill="none" stroke="black" d="M491.26,-109.8C470.88,-106.28 449.47,-102.54 429.5,-99 411.72,-95.85 392.74,-92.42 374.52,-89.11" />
<polygon fill="black" stroke="black" points="375.24,-85.69 364.77,-87.34 373.99,-92.57 375.24,-85.69" />
</g>
<!-- aws_route_table.peter_rt&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge8" class="edge">
<title>aws_route_table.peter_rt&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M201.71,-90.48C190.23,-93.29 178.55,-96.19 167.5,-99 159.51,-101.03 151.17,-103.2 142.86,-105.38" />
<polygon fill="black" stroke="black" points="142.23,-101.93 133.46,-107.87 144.02,-108.7 142.23,-101.93" />
</g>
<!-- aws_route_table_association.peter_rtassociation1 -->
<g id="node6" class="node">
<title>aws_route_table_association.peter_rtassociation1</title>
<polygon fill="none" stroke="black" points="744.75,-90 429.5,-90 429.5,-54 744.75,-54 744.75,-90" />
<text text-anchor="middle" x="587.12" y="-66.2" font-family="sans-serif" font-size="14.00">aws_route_table_association.peter_rtassociation1</text>
</g>
<!-- aws_route_table_association.peter_rtassociation1&#45;&gt;aws_route_table.peter_rt -->
<g id="edge9" class="edge">
<title>aws_route_table_association.peter_rtassociation1&#45;&gt;aws_route_table.peter_rt</title>
<path fill="none" stroke="black" d="M429.35,-72C410.7,-72 392.13,-72 374.77,-72" />
<polygon fill="black" stroke="black" points="375.07,-68.5 365.07,-72 375.07,-75.5 375.07,-68.5" />
</g>
<!-- aws_route_table_association.peter_rtassociation1&#45;&gt;aws_subnet.peter_subnet1 -->
<g id="edge10" class="edge">
<title>aws_route_table_association.peter_rtassociation1&#45;&gt;aws_subnet.peter_subnet1</title>
<path fill="none" stroke="black" d="M478.26,-90.45C461.92,-93.29 445.26,-96.2 429.5,-99 413.83,-101.78 397.23,-104.77 381.04,-107.7" />
<polygon fill="black" stroke="black" points="380.61,-104.22 371.4,-109.46 381.86,-111.11 380.61,-104.22" />
</g>
<!-- aws_route_table_association.peter_rtassociation2 -->
<g id="node7" class="node">
<title>aws_route_table_association.peter_rtassociation2</title>
<polygon fill="none" stroke="black" points="744.75,-36 429.5,-36 429.5,0 744.75,0 744.75,-36" />
<text text-anchor="middle" x="587.12" y="-12.2" font-family="sans-serif" font-size="14.00">aws_route_table_association.peter_rtassociation2</text>
</g>
<!-- aws_route_table_association.peter_rtassociation2&#45;&gt;aws_route_table.peter_rt -->
<g id="edge11" class="edge">
<title>aws_route_table_association.peter_rtassociation2&#45;&gt;aws_route_table.peter_rt</title>
<path fill="none" stroke="black" d="M478.26,-36.45C461.92,-39.29 445.26,-42.2 429.5,-45 411.72,-48.15 392.74,-51.58 374.52,-54.89" />
<polygon fill="black" stroke="black" points="373.99,-51.43 364.77,-56.66 375.24,-58.31 373.99,-51.43" />
</g>
<!-- aws_subnet.peter_subnet2 -->
<g id="node12" class="node">
<title>aws_subnet.peter_subnet2</title>
<polygon fill="none" stroke="black" points="369.5,-36 191.5,-36 191.5,0 369.5,0 369.5,-36" />
<text text-anchor="middle" x="280.5" y="-12.2" font-family="sans-serif" font-size="14.00">aws_subnet.peter_subnet2</text>
</g>
<!-- aws_route_table_association.peter_rtassociation2&#45;&gt;aws_subnet.peter_subnet2 -->
<g id="edge12" class="edge">
<title>aws_route_table_association.peter_rtassociation2&#45;&gt;aws_subnet.peter_subnet2</title>
<path fill="none" stroke="black" d="M429.35,-18C412.93,-18 396.57,-18 381.05,-18" />
<polygon fill="black" stroke="black" points="381.42,-14.5 371.42,-18 381.42,-21.5 381.42,-14.5" />
</g>
<!-- aws_security_group.peter_sg&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge13" class="edge">
<title>aws_security_group.peter_sg&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M184.02,-270C178.24,-267.4 172.68,-264.41 167.5,-261 126.88,-234.21 96.5,-185.22 80.21,-154.2" />
<polygon fill="black" stroke="black" points="83.39,-152.72 75.73,-145.39 77.15,-155.89 83.39,-152.72" />
</g>
<!-- aws_security_group_rule.peter_sginbound -->
<g id="node9" class="node">
<title>aws_security_group_rule.peter_sginbound</title>
<polygon fill="none" stroke="black" points="722.25,-333 452,-333 452,-297 722.25,-297 722.25,-333" />
<text text-anchor="middle" x="587.12" y="-309.2" font-family="sans-serif" font-size="14.00">aws_security_group_rule.peter_sginbound</text>
</g>
<!-- aws_security_group_rule.peter_sginbound&#45;&gt;aws_security_group.peter_sg -->
<g id="edge14" class="edge">
<title>aws_security_group_rule.peter_sginbound&#45;&gt;aws_security_group.peter_sg</title>
<path fill="none" stroke="black" d="M451.63,-303.08C430.38,-301.2 408.66,-299.27 388.16,-297.45" />
<polygon fill="black" stroke="black" points="388.68,-293.99 378.41,-296.59 388.07,-300.96 388.68,-293.99" />
</g>
<!-- aws_security_group_rule.peter_sgoutbound -->
<g id="node10" class="node">
<title>aws_security_group_rule.peter_sgoutbound</title>
<polygon fill="none" stroke="black" points="726.38,-279 447.88,-279 447.88,-243 726.38,-243 726.38,-279" />
<text text-anchor="middle" x="587.12" y="-255.2" font-family="sans-serif" font-size="14.00">aws_security_group_rule.peter_sgoutbound</text>
</g>
<!-- aws_security_group_rule.peter_sgoutbound&#45;&gt;aws_security_group.peter_sg -->
<g id="edge15" class="edge">
<title>aws_security_group_rule.peter_sgoutbound&#45;&gt;aws_security_group.peter_sg</title>
<path fill="none" stroke="black" d="M447.63,-273.28C427.75,-275.04 407.56,-276.83 388.42,-278.52" />
<polygon fill="black" stroke="black" points="388.12,-275.04 378.47,-279.4 388.74,-282.01 388.12,-275.04" />
</g>
<!-- aws_subnet.peter_subnet1&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge16" class="edge">
<title>aws_subnet.peter_subnet1&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M191.12,-126C175.14,-126 158.59,-126 142.99,-126" />
<polygon fill="black" stroke="black" points="143.34,-122.5 133.34,-126 143.34,-129.5 143.34,-122.5" />
</g>
<!-- aws_subnet.peter_subnet2&#45;&gt;aws_vpc.peter_vpc -->
<g id="edge17" class="edge">
<title>aws_subnet.peter_subnet2&#45;&gt;aws_vpc.peter_vpc</title>
<path fill="none" stroke="black" d="M191.07,-35.39C182.93,-38.15 174.95,-41.34 167.5,-45 139.2,-58.91 111.62,-81.94 92.49,-99.9" />
<polygon fill="black" stroke="black" points="90.21,-97.25 85.42,-106.7 95.06,-102.29 90.21,-97.25" />
</g>
</g>
</svg>
  </li>
</ul>

<h1 id="마치며">마치며</h1>
<ul>
  <li>실습을 통해 리소스 유형과 리소스 이름의 사용법, 리소스 속성 등에 대해 이해를 높일 수 있었습니다. 
새삼스럽지만 이렇게 쉽게 각종 리소스들이 생성되고, 서비스가 운영된다는게 신기합니다.</li>
  <li>악분님 실습도 해보고 싶었지만 생각보다 여기까지 시간이 많이 소요되어 다음번으로 미루어야겠습니다. :cry:</li>
  <li>따라가기 버거운 만큼 남는것이 많은 스터디가 될것 같습니다. 끝까지 생존해서 완주 할 수 있길 바라며 오늘의 포스팅을 마칩니다.</li>
</ul>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[테라폼 기초 입문 실습 스터디 2주차 입니다. 1주차에 이어 테라폼의 기본 사용법에 대해 실습해보려 합니다. 이번 주에도 “테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.]]></summary></entry><entry><title type="html">[T101 4기] 테라폼 기본 사용법 1/3</title><link href="https://sweetlittlebird.github.io/posts/2024-06-11-T101-Study-Terraform-Week-1/" rel="alternate" type="text/html" title="[T101 4기] 테라폼 기본 사용법 1/3" /><published>2024-06-11T23:41:18+09:00</published><updated>2024-06-11T23:41:18+09:00</updated><id>https://sweetlittlebird.github.io/posts/T101%20Study%20-%20Terraform%20Week%201</id><content type="html" xml:base="https://sweetlittlebird.github.io/posts/2024-06-11-T101-Study-Terraform-Week-1/"><![CDATA[<h1 id="들어가며">들어가며</h1>

<p>앞으로 몇 주간에 걸쳐 테라폼 기초 입문 실습 스터디에 참여하면서 배운 내용을 정리하려 합니다.
이번 글의 주제는 테라폼의 기본 사용법이며 “테라폼으로 시작하는 IaC” 책을 기준으로 정리하였습니다.</p>

<blockquote>
  <p><img src="/assets/2024/20240614_terraform_book.jpg" alt="테라폼으로 시작하는 IaC" /></p>

  <p><a href="https://product.kyobobook.co.kr/detail/S000202478097">테라폼으로 시작하는 IaC</a></p>
</blockquote>

<h1 id="iac-와-테라폼">IaC 와 테라폼</h1>

<p>하나의 서버를 운영하기 위해서는 수 많은 설치와 설정의 과정이 필요합니다.
서버에 운영체제를 설치하고, 패키지를 설치하고, 설정을 하는 기나긴 작업이 필요합니다.
이것으로 끝나는 것이 아니라 방화벽을 비롯한 네트워크 설정, 보안 설정, 모니터링 설정 등 다양한 설정이 필요합니다.
이러한 작업을 수동으로 진행하다 보면 시간도 많이 소요되고 실수할 가능성도 높아집니다.</p>

<p>하나의 서버를 설정하기 위해서도 이러한 작업이 필요한데, 수대, 수십대, 수백대의 서버를 운영한다면 시간과 실수할 가능성은
엄청 나게 늘어납니다. 이러한 문제를 해결하기 위해 나온 것이 <code class="language-plaintext highlighter-rouge">IaC(Infrastructure as Code)</code>입니다.</p>

<p><code class="language-plaintext highlighter-rouge">IaC(Infrastructure as Code)</code>는 인프라를 코드로 관리하는 방식을 말하며, 코드를 <code class="language-plaintext highlighter-rouge">git</code>을 이용하여 버전 관리도 할 수 있고
코드 리뷰도 할 수 있습니다. 또한 코드를 통해 인프라를 구성하면 인프라를 재사용하기도 쉽고, 확장하기도 쉽습니다.</p>

<p>이 <code class="language-plaintext highlighter-rouge">IaC</code>에 대표적인 도구로는 <code class="language-plaintext highlighter-rouge">테라폼(Terraform)</code>이 있습니다. 
테라폼은 인프라를 코드로 관리할 수 있는 도구로, 다양한 클라우드 서비스를 지원하며, 코드를 통해 인프라를 구성할 수 있습니다.
서버만을 예시로 들었지만 테라폼은 서버 뿐만 아니라 AWS와 같은 클라우드 상의 다양한 서비스를 관리할 수 있습니다.</p>

<p>테라폼은 크게 3가지 형태로 구성되어 있습니다.</p>

<ul>
  <li>On-premise : Terraform 이라 불리는 형태로, 사용자의 컴퓨팅 환경에 오픈소스 버전의 테라폼을 사용하는 형태입니다.</li>
  <li>Hosted SaaS : Terraform Cloud 라 불리며, HashiCorp 에서 제공하는 SaaS 서비스로, HashiCorp 가 관리하는 서버 환경을 사용합니다.</li>
  <li>Private Install : Terraform Enterprise 라 불리는 서버 설치형 구성 환경으로, 기업 내부에 설치하여 사용하는 형태입니다. 외부 네트워크와 격리가 가능합니다.</li>
</ul>

<h1 id="실행-환경-구성">실행 환경 구성</h1>

<p>제가 사용중인 macOS를 기준으로 작성하였습니다.
macOS에서 테라폼을 설치하려면 <code class="language-plaintext highlighter-rouge">Homebrew</code>를 이용하여 설치할 수 있습니다.</p>

<p>(홈브루 설치 방법은 <a href="https://whalec.io/homebrew-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/">https://whalec.io/homebrew-설치-및-사용-방법</a> 를 참고하세요.)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># tfenv 설치</span>
brew <span class="nb">install </span>tfenv

<span class="c"># 테라폼 1.8.5 설치</span>
tfenv <span class="nb">install </span>1.8.5

<span class="c"># 테라폼 1.8.5 버전을 사용</span>
tfenv use 1.8.5

<span class="c"># 버전 확인</span>
terraform version

<span class="c"># 자동완성 스크립트 추가</span>
terraform <span class="nt">-install-autocomplete</span>

<span class="c"># 자동완성 스크립트 적용 (zsh의 경우)</span>
<span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<h1 id="terraform-명령의-주요-서브-커맨드">terraform 명령의 주요 서브 커맨드</h1>

<ul>
  <li><code class="language-plaintext highlighter-rouge">terraform init</code> : 현재 디렉토리에 terraform 설정 파일들을 생성하고 초기화합니다. 새로운 프로젝트를 만든다는 느낌입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform validate</code> : terraform 설정 파일들을 검증합니다. 설정 파일들이 올바르게 작성되었는지 확인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform plan</code> : terraform 설정 파일들을 기반으로 실행할 계획을 확인합니다. <strong>실제로 실행되는 것은 아닙니다.</strong>
어떤 리소스가 생성되고, 삭제되며, 변경되는지 등을 확인할 수 있습니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">terraform plan -out=tfplan</code> : 실행할 계획을 파일로 저장합니다. 이후 <code class="language-plaintext highlighter-rouge">terraform apply plan.out</code>으로 실행할 수 있습니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">terraform apply</code> : terraform 설정 파일들을 기반으로 <strong>실제</strong> 작업을 실행합니다. 사전에 <code class="language-plaintext highlighter-rouge">terraform plan</code>으로 변경사항을 확인하고 실행해야 합니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">terraform apply -replace=리소스</code> : 프로비저닝이 완료된 후 특정 리소스를 삭제 후 다시 생성 합니다. <code class="language-plaintext highlighter-rouge">plan</code>, <code class="language-plaintext highlighter-rouge">apply</code> 모두 적용 가능합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">terraform state list</code> : 생성된 리소스들의 목록을 확인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform destroy</code> : terraform 설정 파일들을 기반으로 생성된 리소스들을 모두 삭제합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">terraform fmt</code> : terraform 설정 파일들을 표준 형식과 표준 스타일로 정렬하여 가독성을 높입니다.</li>
</ul>

<h1 id="terraform-명령의-주요-옵션">terraform 명령의 주요 옵션</h1>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-auto-approve</code> : <code class="language-plaintext highlighter-rouge">terraform apply</code> 시 Y/N을 묻지 않고 자동으로 승인합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">-help</code> : 도움말을 확인합니다. <code class="language-plaintext highlighter-rouge">terraform apply -help</code>와 같이 명렁어와 함께 사용시 해당 명령어의 옵션을 확인 할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">-no-color</code> : <code class="language-plaintext highlighter-rouge">&lt;-[0m&lt;[1m</code> 과 같은 문자가 표시되는 경우 색상 정보를 안 나오게하여 정상적으로 나오게 합니다. <code class="language-plaintext highlighter-rouge">terraform validate -no-color</code>와 같이 사용할 수 있습니다.</li>
</ul>

<h1 id="hcl">HCL</h1>

<p>HCL은 <strong>H</strong>ashiCorp <strong>C</strong>onfiguration <strong>L</strong>anguage의 약자로, HashiCorp에서 만든 IaC와 구성정보를 명시하기 위한 언어입니다.
HCL은 네이티브 문법과 json 호환 문법을 지원합니다. 네이티브 문법의 경우 보통 <code class="language-plaintext highlighter-rouge">.tf</code> 확장자를, json 호환 문법의 경우 <code class="language-plaintext highlighter-rouge">.tf.json</code> 확장자를 사용합니다.</p>

<p>네이티브 문법이 더 가독성이 좋고 작성하기 편하기 때문에 보통 네이티브 문법을 사용합니다.
주요 문법 적인 특징은 다음과 같습니다.</p>

<ul>
  <li>쿠버네티스 처럼 선언적인 구조를 가지고 있습니다. 즉, 어떻게 하는지 절차를 기록하는것이 아닌, 최종 결과를 정하면 Terraform이 적절한 절차의 계획(plan)을 세워서 적용합니다..</li>
  <li>변수와 문자열 값을 함께 사용하는 인터폴레이션(interpolation)을 지원합니다.
    <ul>
      <li>예) <code class="language-plaintext highlighter-rouge">name = "Hello~ {$var.name}!"</code></li>
    </ul>
  </li>
  <li>HCL은 코드의 모듈화와 재사용성을 위한 기능을 제공합니다.</li>
</ul>

<h2 id="hcl-네이티브-문법-예시">HCL 네이티브 문법 예시</h2>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 한줄 주석 방법1</span>
<span class="c1"># 한줄 주석 방법2</span>

<span class="cm">/*
라인
주석
*/</span>

<span class="nx">locals</span> <span class="p">{</span>
  <span class="nx">key1</span>     <span class="p">=</span> <span class="s2">"value1"</span>     <span class="c1"># = 를 기준으로 키와 값이 구분되며</span>
  <span class="nx">myStr</span>    <span class="p">=</span> <span class="s2">"TF ♡ UTF-8"</span> <span class="c1"># UTF-8 문자를 지원한다.</span>
  <span class="nx">multiStr</span> <span class="p">=</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
  Multi
  Line
  String
  with anytext
</span><span class="no">EOF

</span>  <span class="nx">boolean1</span>    <span class="p">=</span> <span class="kc">true</span>   <span class="c1"># boolean true</span>
  <span class="nx">boolean2</span>    <span class="p">=</span> <span class="kc">false</span>  <span class="c1"># boolean false를 지원한다.</span>
  <span class="nx">deciaml</span>     <span class="p">=</span> <span class="mi">123</span>    <span class="c1"># 기본적으로 숫자는 10진수,</span>
  <span class="nx">octal</span>       <span class="p">=</span> <span class="mi">0123</span>   <span class="c1"># 0으로 시작하는 숫자는 8진수,</span>
  <span class="nx">hexadecimal</span> <span class="p">=</span> <span class="s2">"0xD5"</span> <span class="c1"># 0x 값을 포함하는 스트링은 16진수,</span>
  <span class="nx">scientific</span>  <span class="p">=</span> <span class="mi">1</span><span class="nx">e10</span>   <span class="c1"># 과학표기 법도 지원한다.</span>

  <span class="c1"># funtion 호출 예</span>
  <span class="nx">myprojectname</span> <span class="p">=</span> <span class="nx">format</span><span class="p">(</span><span class="s2">"%s is myproject name"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">project</span><span class="p">)</span>

  <span class="c1"># 3항 연산자 조건문을 지원한다.</span>
  <span class="nx">credentials</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">credentials</span> <span class="p">==</span> <span class="s2">""</span> <span class="err">?</span> <span class="nx">file</span><span class="p">(</span><span class="kd">var</span><span class="p">.</span><span class="nx">credentials_file</span><span class="p">)</span> <span class="err">:</span> <span class="kd">var</span><span class="p">.</span><span class="nx">credentials</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>HCL은 주석 부터 변수 정의, 연산, 조건문 등 프로그래밍적인 요소를 가지고 있고, 구성 편의성을 높이기 위한 function을 제공합니다.
    <ul>
      <li><a href="https://developer.hashicorp.com/terraform/language/functions">built in function 소개</a></li>
    </ul>
  </li>
  <li>테라폼으로 인프라를 구성하기 위한 terraform, resource, data, variable, local, output 과 같은 선언 블록도 다수 존재합니다.</li>
</ul>

<h2 id="테라폼-블록">테라폼 블록</h2>

<p>테라폼은 다양한 블록을 제공하며, 각 블록은 특정한 역할을 수행합니다.</p>

<h3 id="terraform-블록">terraform 블록</h3>

<ul>
  <li>Terraform의 버전이나 프로바이더 버전 등을 지정 할 수 있고, 리소스를 생성하기 위한 설정을 지정할 수 있습니다.</li>
  <li>버전을 지정함으로써 <strong>오늘 실행하던, 3년 후에 실행하던</strong> 같은 결과를 보장할 수 있습니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">terraform</code> 블록 예시</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_version</span> <span class="p">=</span> <span class="s2">"~&gt; 1.3.0"</span> <span class="c1"># 테라폼 버전</span>
  
  <span class="nx">required_providers</span> <span class="p">{</span> <span class="c1"># 프로바이더 버전을 나열</span>
    <span class="nx">random</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 3.0.0, &lt; 3.1.0"</span>
    <span class="p">}</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"4.2.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">cloud</span> <span class="p">{</span> <span class="c1"># Cloud/Enterprise 같은 원격 실행을 위한 정보</span>
    <span class="nx">organization</span> <span class="p">=</span> <span class="s2">"&lt;MY_ORG_NAME&gt;"</span>
    <span class="nx">workspaces</span> <span class="p">{</span>
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"my-first-workspace"</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">backend</span> <span class="s2">"local"</span> <span class="p">{</span> <span class="c1"># state를 보관하는 위치를 지정</span>
    <span class="nx">path</span> <span class="p">=</span> <span class="s2">"relative/path/to/terraform.tfstate"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>버전 표현 방법
    <ul>
      <li>버전은 Semantic Versioning을 따릅니다. Semantic Versioning은 <code class="language-plaintext highlighter-rouge">Major.Minor.Patch</code> 형태로 버전을 관리합니다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">Major</code> 버전 : 하위 호환성이 없는 변경 사항</li>
          <li><code class="language-plaintext highlighter-rouge">Minor</code> 버전 : 하위 호환성이 있는 변경 사항</li>
          <li><code class="language-plaintext highlighter-rouge">Patch</code> 버전 : 하위 호환성이 있는 버그 수정</li>
        </ul>
      </li>
      <li>또한 버전은 제약 조건을 지정할 수 있습니다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">=</code> 또는 연산자 없음 : 정확히 해당 버전</li>
          <li><code class="language-plaintext highlighter-rouge">!=</code> : 지정된 버전을 제외</li>
          <li><code class="language-plaintext highlighter-rouge">&gt;, &gt;=, &lt;, &lt;=</code> : 각각 해당 버전보다 높은 버전, 높거나 같은 버전, 작은 버전, 작거나 같은 버전 사용</li>
          <li><code class="language-plaintext highlighter-rouge">~&gt;</code> : 지정된 버전에서 가장 자리수가 낮은 구성요소만 변경되는것을 허용
            <ul>
              <li>예) <code class="language-plaintext highlighter-rouge">~&gt; x.y</code> 인 경우 <code class="language-plaintext highlighter-rouge">y</code> 버전에 대해서만, <code class="language-plaintext highlighter-rouge">~&gt; x.y.z</code> 인 경우 <code class="language-plaintext highlighter-rouge">z</code> 버전에 대해서만 변경을 허용</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="terraform-버전-지정">Terraform 버전 지정</h4>

<p>위의 예제에서 본것 처럼 <code class="language-plaintext highlighter-rouge">required_version</code>을 통해 테라폼 버전을 지정할 수 있습니다. 
지정된 버전의 조건에 맞을때만 테라폼이 실행됩니다.</p>

<ul>
  <li>Terraform 버전 확인</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform version

<span class="c"># Terraform v1.8.5</span>
<span class="c"># on darwin_arm64</span>
<span class="c"># + provider registry.terraform.io/hashicorp/local v2.5.1</span>
</code></pre></div></div>

<ul>
  <li>main.tf 수정</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="c1"># 현재 설치된 terraform 버전인 1.8.5 미만으로 지정</span>
  <span class="nx">required_version</span> <span class="p">=</span> <span class="s2">"&lt; 1.8.5"</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>terraform plan 실행</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform plan

<span class="c"># Error: Unsupported Terraform Core version</span>
<span class="c"># </span>
<span class="c">#   on main.tf line 3, in terraform:</span>
<span class="c">#    3:   required_version = "&lt; 1.8.5"</span>
<span class="c"># </span>
<span class="c"># This configuration does not support Terraform version 1.8.5. To proceed, either choose another supported Terraform version or update this version constraint. Version constraints</span>
<span class="c"># are normally set for good reason, so updating the constraint may lead to other errors or unexpected behavior.</span>
</code></pre></div></div>

<p>현재 설치된 버전보다 이전으로 지정되어서 에러가 나고 종료되는것을 확인 할 수 있습니다.</p>

<h4 id="프로바이더-버전">프로바이더 버전</h4>

<p><code class="language-plaintext highlighter-rouge">terraform { required_providers { ... } }</code> 블록을 사용하여 프로바이더 버전을 지정할 수 있습니다.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">required_providers</span> <span class="p">{</span>
    <span class="nx">aws</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/aws"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"~&gt; 4.2.0"</span>
    <span class="p">}</span>
    <span class="nx">azurerm</span> <span class="p">=</span> <span class="p">{</span>
      <span class="nx">source</span> <span class="p">=</span> <span class="s2">"hashicorp/azurerm"</span>
      <span class="nx">version</span> <span class="p">=</span> <span class="s2">"&gt;= 2.99.0"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>아래의 주소에서 프로바이더들의 목록과 버전을 확인할 수 있습니다.</p>

<ul>
  <li><a href="https://registry.terraform.io/browse/providers">Terraform Provider Registry</a></li>
</ul>

<p>사이트 접속 후 원하는 프로바이더를 선택하고 우측 상단의 “USE PROVIDER”를 클릭하면 해당 프로바이더의 사용법을 확인할 수 있습니다.</p>

<h4 id="cloud-블록">cloud 블록</h4>

<p><code class="language-plaintext highlighter-rouge">terraform { cloud { ... } }</code> 블록을 사용하여 Terraform Cloud나 Terraform Enterprise 환경에서 사용하는 설정을 지정할 수 있습니다.</p>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">cloud</span> <span class="p">{</span>
    <span class="nx">hostname</span> <span class="p">=</span> <span class="s2">"app.terraform.io"</span>        
    <span class="nx">organization</span> <span class="p">=</span> <span class="s2">"my-org"</span>  
    <span class="nx">workspaces</span> <span class="p">{</span>              
      <span class="nx">name</span> <span class="p">=</span> <span class="s2">"my-app-prod"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="backend-블록">backend 블록</h4>

<p><code class="language-plaintext highlighter-rouge">terraform { backend { ... } }</code> 블록을 사용하여 state 파일을 저장하는 위치를 지정할 수 있습니다.</p>

<ul>
  <li>Local 파일 시스템을 사용하는 경우</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">backend</span> <span class="s2">"local"</span> <span class="p">{</span>
    <span class="nx">path</span> <span class="p">=</span> <span class="s2">"relative/path/to/terraform.tfstate"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>AWS S3를 사용하는 경우</li>
</ul>

<div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">terraform</span> <span class="p">{</span>
  <span class="nx">backend</span> <span class="s2">"s3"</span> <span class="p">{</span>
    <span class="nx">bucket</span> <span class="p">=</span> <span class="s2">"mybucket"</span>
    <span class="nx">key</span>    <span class="p">=</span> <span class="s2">"path/to/my/key"</span>
    <span class="nx">region</span> <span class="p">=</span> <span class="s2">"us-west-2"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="resource-블록">resource 블록</h3>

<p>resource 블록은 클라우드 서비스의 인스턴스, 네트워크, 스토리지 등과 같은 구성요소를 정의합니다.</p>

<ul>
  <li>resource는 <code class="language-plaintext highlighter-rouge">resource "&lt;프로바이더이름_리소스유형&gt;" "&lt;사용자 지정 리소스명&gt;" { ... }</code> 형태로 정의합니다.</li>
  <li>
    <p>local 프로바이더의 file 리소스를 사용하는 예시</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>AWS 프로바이더의 ec2 리소스를 사용하는 예시</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"web"</span> <span class="p">{</span>
  <span class="nx">ami</span> <span class="p">=</span> <span class="s2">"ami-a1b2c3d4"</span>
  <span class="nx">instance_type</span> <span class="p">=</span> <span class="s2">"t2.micro"</span>  
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>리소스 동작 보조 추가 <strong>메타인수</strong>를 정의 할 수 있습니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">depends_on</code> : 종속성을 선언하며, 선언된 구성요소와의 생성 시점에 대해 정의</li>
      <li><code class="language-plaintext highlighter-rouge">count</code> : 선언된 개수에 따라 여러 리소스를 생성</li>
      <li><code class="language-plaintext highlighter-rouge">for_each</code> : map 또는 set 타입의 데이터 배열의 값을 기준으로 여러 리소스를 생성</li>
      <li><code class="language-plaintext highlighter-rouge">provider</code> : 동일한 프로바이더가 다수 정의되어 있는 경우 지정</li>
      <li><code class="language-plaintext highlighter-rouge">lifecycle</code> : 리소스의 수명주기 관리</li>
      <li><code class="language-plaintext highlighter-rouge">provisioner</code> : 리소스 생성 후 추가 작업 정의</li>
      <li><code class="language-plaintext highlighter-rouge">timeouts</code> : 프로바이더에서 정의한 일부 리소스 유형에서는 create, update, delete에 대한 허용 시간 정의 가능</li>
    </ul>
  </li>
</ul>

<h4 id="resource-의-종속성">resource 의 종속성</h4>

<ul>
  <li>테라폼의 종속성은 resource와 module 선언으로 프로비저닝 되는 각 요소의 생성 순서를 정합니다.</li>
  <li>종속성의 종류
    <ul>
      <li>implicit (암시적) 종속성 : 리소스가 다른 리소스를 사용하는 등의 의존성이 있는 경우, 테라폼이 자동으로 종속성을 설정합니다.</li>
      <li>explicit (명시적) 종속성 : <code class="language-plaintext highlighter-rouge">depends_on</code> 메타인수를 사용하여 명시적으로 종속성을 설정할 수 있습니다.</li>
    </ul>
  </li>
  <li>종속성은 <code class="language-plaintext highlighter-rouge">terraform graph</code> 명령어를 통해 시각적으로 확인할 수 있습니다.</li>
  <li>
    <p>종속성이 없는 상태 확인</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"456!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <p>위와같은 파일을 만들고 <code class="language-plaintext highlighter-rouge">terraform graph &gt; graph-1.dot</code> 을 실행하고 vscode의 graphviz 확장을 설치하면 아래와 같은 그래프를 확인할 수 있습니다.</p>

    <svg width="102pt" height="98pt" viewBox="0.00 0.00 102.00 98.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 94)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-94 98,-94 98,4 -4,4" />
<!-- local_file.abc -->
<g id="node1" class="node">
<title>local_file.abc</title>
<polygon fill="none" stroke="black" points="94,-36 0,-36 0,0 94,0 94,-36" />
<text text-anchor="middle" x="47" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
</g>
<!-- local_file.def -->
<g id="node2" class="node">
<title>local_file.def</title>
<polygon fill="none" stroke="black" points="92.5,-90 1.5,-90 1.5,-54 92.5,-54 92.5,-90" />
<text text-anchor="middle" x="47" y="-66.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
</g>
</g>
</svg>
  </li>
  <li>
    <p>암시적 종속성이 있는 상태 확인</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">content</span> <span class="err">+</span> <span class="s2">"456!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <svg width="229pt" height="44pt" viewBox="0.00 0.00 229.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-40 225,-40 225,4 -4,4" />
<!-- local_file.abc -->
<g id="node1" class="node">
<title>local_file.abc</title>
<polygon fill="none" stroke="black" points="94,-36 0,-36 0,0 94,0 94,-36" />
<text text-anchor="middle" x="47" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
</g>
<!-- local_file.def -->
<g id="node2" class="node">
<title>local_file.def</title>
<polygon fill="none" stroke="black" points="221,-36 130,-36 130,0 221,0 221,-36" />
<text text-anchor="middle" x="175.5" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
</g>
<!-- local_file.def&#45;&gt;local_file.abc -->
<g id="edge1" class="edge">
<title>local_file.def&#45;&gt;local_file.abc</title>
<path fill="none" stroke="black" d="M129.54,-18C121.73,-18 113.5,-18 105.4,-18" />
<polygon fill="black" stroke="black" points="105.61,-14.5 95.61,-18 105.61,-21.5 105.61,-14.5" />
</g>
</g>
</svg>
  </li>
  <li>
    <p>명시적 종속성이 있는 상태 확인</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">depends_on</span> <span class="p">=</span> <span class="p">[</span>  <span class="c1"># 명시적 종속성 선언</span>
    <span class="nx">local_file</span><span class="p">.</span><span class="nx">def</span>
  <span class="p">]</span>
  
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"123!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"def"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"456!"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/def.txt"</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <svg width="229pt" height="44pt" viewBox="0.00 0.00 229.00 44.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 40)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-40 225,-40 225,4 -4,4" />
<!-- local_file.abc -->
<g id="node1" class="node">
<title>local_file.abc</title>
<polygon fill="none" stroke="black" points="221,-36 127,-36 127,0 221,0 221,-36" />
<text text-anchor="middle" x="174" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.abc</text>
</g>
<!-- local_file.def -->
<g id="node2" class="node">
<title>local_file.def</title>
<polygon fill="none" stroke="black" points="91,-36 0,-36 0,0 91,0 91,-36" />
<text text-anchor="middle" x="45.5" y="-12.2" font-family="sans-serif" font-size="14.00">local_file.def</text>
</g>
<!-- local_file.abc&#45;&gt;local_file.def -->
<g id="edge1" class="edge">
<title>local_file.abc&#45;&gt;local_file.def</title>
<path fill="none" stroke="black" d="M126.61,-18C118.75,-18 110.52,-18 102.45,-18" />
<polygon fill="black" stroke="black" points="102.71,-14.5 92.71,-18 102.71,-21.5 102.71,-14.5" />
</g>
</g>
</svg>
  </li>
</ul>

<h4 id="리소스-속성-참조">리소스 속성 참조</h4>

<ul>
  <li>리소스 구성에서 참조 가능한 인수와 속성이 있습니다.
    <ul>
      <li>인수 (arguments) : 리소스를 생성할 때 사용자가 선언 하는 값</li>
      <li>속성 (attributes) : 사용자가 설정할 수는 없지만, 리소스가 생성되면 읽을 수 있는 리소스의 고유 값</li>
    </ul>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"&lt;프로바이더_유형&gt;"</span> <span class="s2">"&lt;이름&gt;"</span> <span class="p">{</span>
  <span class="err">&lt;인수&gt;</span>           <span class="p">=</span> <span class="err">&lt;값&gt;</span>
<span class="p">}</span>
  
<span class="c1"># 리소스 참조</span>
<span class="err">&lt;프로바이더</span><span class="nx">_</span><span class="err">유형&gt;.&lt;이름&gt;.&lt;인수&gt;</span>
<span class="err">&lt;프로바이더</span><span class="nx">_</span><span class="err">유형&gt;.&lt;이름&gt;.&lt;속성&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>리소스가 생성될때 사용자가 입력한 인수를 받아서 실제 리소스가 생성되면, 일부 리소스는 자동으로 기본값이나 추가되는 속성이 부여됩니다.
    <ul>
      <li>예) <code class="language-plaintext highlighter-rouge">aws_instance</code> 리소스의 경우 <code class="language-plaintext highlighter-rouge">ami</code>, <code class="language-plaintext highlighter-rouge">instance_type</code> 등의 인수를 받아서 리소스가 생성되면 <code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">public_ip</code> 등의 속성이 부여됩니다.</li>
    </ul>
  </li>
</ul>

<h4 id="리소스의-수명-주기">리소스의 수명 주기</h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lifecycle</code>은 리소스의 기본 수명 주기를 사용자가 제어할 수 있게 해줍니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">create_before_destroy</code> (bool) : 리소스를 새로 생성하기 전에 기존 리소스를 삭제합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">prevent_destroy</code> (bool) : 리소스가 삭제되지 않도록 방지합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">ignore_changes</code> (list) : 특정 인수의 변경을 무시합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">precondition</code> : 리소스를 생성하기 전에 특정 조건을 검증합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">postcondition</code> : Plan 과 Apply 이후의 결과를 속성값으로 검증합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">create_before_destroy</code>
    <ul>
      <li>테라폼은 기본 수명 주기가 <strong>삭제 후 생성</strong>입니다. 즉, 리소스를 새로 생성하기 전에 기존 리소스를 삭제합니다.</li>
      <li>
        <p>의도적으로 생성 후 삭제를 원할때 <code class="language-plaintext highlighter-rouge">create_before_destroy = true</code>를 사용합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 1"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">create_before_destroy</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>하지만 이 상태에서 <code class="language-plaintext highlighter-rouge">terraform apply</code>를 실행하면 파일이 삭제 됩니다. 이는 abc.txt 라는 파일을 생성 한 다음 삭제하기 때문에, 
마지막 동작이 삭제이기 때문에 파일이 없습니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">prevent_destroy</code>
    <ul>
      <li>
        <p>리소스가 삭제되지 않도록 방지합니다. 이 속성은 특정 리소스가 삭제되지 않도록 방지할 때 사용합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 1"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">prevent_destroy</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>이 상태에서 <code class="language-plaintext highlighter-rouge">terraform destroy</code>를 실행하면 아래와 같은 에러가 발생합니다.</p>

        <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform destroy
    
<span class="c"># Error: Instance cannot be destroyed</span>
<span class="c">#  </span>
<span class="c">#  on main.tf line 1:</span>
<span class="c">#   1: resource "local_file" "abc" {</span>
<span class="c">#  </span>
<span class="c"># Resource local_file.abc has lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed. To avoid this error and continue with the plan, either disable</span>
<span class="c"># lifecycle.prevent_destroy or reduce the scope of the plan using the -target option.    </span>
</code></pre></div>        </div>
      </li>
      <li>하지만 리소스를 수정한 다음 <code class="language-plaintext highlighter-rouge">terraform apply -auto-approve</code>를 실행해도 수정시 동일한 오류가 발생합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">destroy</code> 했을때는 이해가 가지만 <code class="language-plaintext highlighter-rouge">apply</code> 시에도 동일한 오류가 발생하는 이유는 수정 동작이 <strong>삭제</strong> 후 생성으로 인식되기 때문입니다.
즉 <code class="language-plaintext highlighter-rouge">apply</code> 시에도 리소스가 수정되면 삭제 단계가 있기 때문에 <code class="language-plaintext highlighter-rouge">prevent_destroy</code>가 적용되어 삭제되지 않습니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">ignore_changes</code>
    <ul>
      <li>
        <p>특정 인수의 변경을 무시합니다. 이 속성은 특정 인수의 변경을 무시하고 리소스를 업데이트할 때 사용합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 1"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/abc.txt"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">ignore_changes</span> <span class="p">=</span> <span class="p">[</span>
      <span class="nx">content</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>모든 변경울 무시하고 싶다면 <code class="language-plaintext highlighter-rouge">ignore_changes = all</code>을 사용합니다.</p>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">precondition</code>
    <ul>
      <li>리소스를 생성하기 전에 특정 조건을 검증합니다.</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">condition</code>이 <code class="language-plaintext highlighter-rouge">true</code>인지 확인 하고, 조건이 맞지 않는 경우 <code class="language-plaintext highlighter-rouge">error_message</code>로 지정된 에러메시지를 표시합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">variable</span> <span class="s2">"file_name"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"step0.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 6"</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span><span class="k">}</span><span class="s2">"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">precondition</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span> <span class="p">==</span> <span class="s2">"step6.txt"</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"file name is not </span><span class="se">\"</span><span class="s2">step6.txt</span><span class="se">\"</span><span class="s2">"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>  
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">postcondition</code>
    <ul>
      <li>프로비저닝 이후의 결과를 속성값으로 검증합니다.</li>
      <li>
        <p>마찬가지로 <code class="language-plaintext highlighter-rouge">condition</code> 인수로 검증하고, 조건이 맞지 않는 경우 <code class="language-plaintext highlighter-rouge">error_message</code>로 지정된 에러메시지를 표시합니다.</p>

        <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">""</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/step7.txt"</span>

  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">postcondition</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">content</span> <span class="err">!</span><span class="p">=</span> <span class="s2">""</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"content cannot empty"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">output</span> <span class="s2">"step7_content"</span> <span class="p">{</span>
  <span class="nx">value</span> <span class="p">=</span> <span class="nx">local_file</span><span class="p">.</span><span class="nx">abc</span><span class="p">.</span><span class="nx">id</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h1 id="실습">실습</h1>

<h2 id="aws에-배포하기">AWS에 배포하기</h2>

<ul>
  <li>
    <p>AWS를 사용하기 위해 awscli 설치</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>awscli 
</code></pre></div>    </div>
  </li>
  <li>
    <p>AWS CLI의 로그인 credentials 설정</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws configure

<span class="c"># access key, secret key, 기본 region 입력</span>
</code></pre></div>    </div>

    <p>서울 리전을 사용하기 위해 <code class="language-plaintext highlighter-rouge">ap-northeast-2</code>를 입력하였습니다.</p>
  </li>
  <li>
    <p>AWS CLI를 사용하여 최신 ubuntu 22.04 AMI 이미지 얻기</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 describe-images <span class="nt">--owners</span> 099720109477 <span class="se">\</span>
  <span class="nt">--filters</span> <span class="s2">"Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"</span> <span class="s2">"Name=state,Values=available"</span> <span class="se">\</span>
  <span class="nt">--query</span> <span class="s1">'Images|sort_by(@, &amp;CreationDate)[-1].[ImageId, Name]'</span> <span class="nt">--output</span> text
  
<span class="c"># (결과)</span>
<span class="c"># ami-0bcdae8006538619a   ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-20240614</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>환경 변수에 AMI ID 저장</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">TF_VAR_ami_id</span><span class="o">=</span><span class="s2">"ami-0bcdae8006538619a"</span>
</code></pre></div>    </div>

    <p>이렇게 <code class="language-plaintext highlighter-rouge">TF_VAR_</code>를 붙여서 환경변수를 셋팅하면 .tf 파일에서 해당 변수를 사용할 수 있습니다.</p>
  </li>
  <li>
    <p>main.tf 파일 생성</p>

    <div class="language-tf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">provider</span> <span class="s2">"aws"</span> <span class="p">{</span>
  <span class="nx">region</span> <span class="p">=</span> <span class="s2">"ap-northeast-2"</span>
<span class="p">}</span>
  
<span class="c1"># TF_VAR_ami_id 환경변수를 사용하기 위해 선언. var.ami_id 와 같이 사용 가능</span>
<span class="k">variable</span> <span class="s2">"ami_id"</span> <span class="p">{</span> <span class="p">}</span>  
  
<span class="k">resource</span> <span class="s2">"aws_instance"</span> <span class="s2">"example"</span> <span class="p">{</span>
  <span class="nx">ami</span>                    <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">ami_id</span><span class="k">}</span><span class="s2">"</span>
  <span class="nx">instance_type</span>          <span class="p">=</span> <span class="s2">"t2.micro"</span>
  <span class="nx">vpc_security_group_ids</span> <span class="p">=</span> <span class="p">[</span><span class="nx">aws_security_group</span><span class="p">.</span><span class="nx">instance</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
  
  <span class="nx">user_data</span> <span class="p">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              echo "Hello, T101 Study 9090" &gt; index.html
              nohup busybox httpd -f -p 9090 &amp;
</span><span class="no">              EOF
  
</span>  <span class="nx">user_data_replace_on_change</span> <span class="p">=</span> <span class="kc">true</span>
  
  <span class="nx">tags</span> <span class="p">=</span> <span class="p">{</span>
    <span class="nx">Name</span> <span class="p">=</span> <span class="s2">"Single-WebSrv"</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"aws_security_group"</span> <span class="s2">"instance"</span> <span class="p">{</span>
  <span class="nx">name</span> <span class="p">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">security_group_name</span>
  
  <span class="nx">ingress</span> <span class="p">{</span>
    <span class="nx">from_port</span>   <span class="p">=</span> <span class="mi">9090</span>
    <span class="nx">to_port</span>     <span class="p">=</span> <span class="mi">9090</span>
    <span class="nx">protocol</span>    <span class="p">=</span> <span class="s2">"tcp"</span>
    <span class="nx">cidr_blocks</span> <span class="p">=</span> <span class="p">[</span><span class="s2">"0.0.0.0/0"</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
  
<span class="k">variable</span> <span class="s2">"security_group_name"</span> <span class="p">{</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The name of the security group"</span>
  <span class="nx">type</span>        <span class="p">=</span> <span class="nx">string</span>
  <span class="nx">default</span>     <span class="p">=</span> <span class="s2">"terraform-example-instance"</span>
<span class="p">}</span>
  
<span class="k">output</span> <span class="s2">"public_ip"</span> <span class="p">{</span>
  <span class="nx">value</span>       <span class="p">=</span> <span class="nx">aws_instance</span><span class="p">.</span><span class="nx">example</span><span class="p">.</span><span class="nx">public_ip</span>
  <span class="nx">description</span> <span class="p">=</span> <span class="s2">"The public IP of the Instance"</span>
<span class="p">}</span> 
</code></pre></div>    </div>
  </li>
  <li>
    <p>plan 확인 후 apply</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform plan
<span class="c"># plan 확인</span>
terraform apply <span class="nt">-auto-approve</span>
</code></pre></div>    </div>

    <p>다음과 같이 32초 가량 소요 후 최종적으로 생성된 인스턴스의 public ip를 확인 할 수 있습니다.</p>

    <p><img src="/assets/2024/20240616_terraform_apply_1.png" alt="terraform apply 화면" /></p>

    <p>AWS 콘솔에서도 아래와 같이 잘 생성된 EC2 인스턴스와 보안 그룹이 생성된것을 확인 할 수 있었습니다.</p>

    <p><img src="/assets/2024/20240616_terraform_apply_2.png" alt="AWS 콘솔에서 EC2 인스턴스 확인" /></p>

    <p>물론 접속도 잘 됩니다.</p>

    <p><img src="/assets/2024/20240616_terraform_apply_3.png" alt="크롬에서 접속 확인" /></p>
  </li>
  <li>
    <p>destroy 를 사용하여 리소스 삭제</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform destroy 
</code></pre></div>    </div>

    <p>삭제도 잘 되었습니다. :)</p>

    <p><img src="/assets/2024/20240616_terraform_destroy.png" alt="destroy 확인" /></p>
  </li>
</ul>

<h2 id="도전과제-3-lifecycle의-precondition">도전과제 3 <strong>lifecycle의 precondition</strong></h2>
<ul>
  <li>도전과제 : lifecycle의 precondition 실습 내용에서 step<strong>0</strong>.txt ~ step<strong>6</strong>.txt 총 <strong>7개의 파일 이름 중 하나가 일치 시</strong> <strong>검증 조건 만족</strong>으로 <strong>코드 작성</strong></li>
  <li>
    <p>답안 : 정규표현식을 사용하여 아래와 같이 작성하였습니다.</p>

    <div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.tf</span>
<span class="k">variable</span> <span class="s2">"file_name"</span> <span class="p">{</span>
  <span class="nx">default</span> <span class="p">=</span> <span class="s2">"step0.txt"</span>
<span class="p">}</span>
  
<span class="k">resource</span> <span class="s2">"local_file"</span> <span class="s2">"abc"</span> <span class="p">{</span>
  <span class="nx">content</span>  <span class="p">=</span> <span class="s2">"lifecycle - step 6"</span> <span class="c1"># 수정</span>
  <span class="nx">filename</span> <span class="p">=</span> <span class="s2">"</span><span class="k">${</span><span class="nx">path</span><span class="p">.</span><span class="k">module}</span><span class="s2">/</span><span class="k">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span><span class="k">}</span><span class="s2">"</span>
  
  <span class="nx">lifecycle</span> <span class="p">{</span>
    <span class="nx">precondition</span> <span class="p">{</span>
      <span class="nx">condition</span>     <span class="p">=</span> <span class="nx">length</span><span class="p">(</span><span class="nx">regex</span><span class="p">(</span><span class="s2">"^step[0-6]</span><span class="se">\\</span><span class="s2">.txt</span><span class="err">$</span><span class="s2">"</span><span class="p">,</span> <span class="kd">var</span><span class="p">.</span><span class="nx">file_name</span><span class="p">))</span> <span class="err">&gt;</span> <span class="mi">0</span>
      <span class="nx">error_message</span> <span class="p">=</span> <span class="s2">"file name is not </span><span class="se">\"</span><span class="s2">step6.txt</span><span class="se">\"</span><span class="s2">"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div>    </div>
  </li>
  <li>
    <p>실행 결과</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step0.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step1.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step2.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step3.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step4.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step5.txt'</span>
terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step6.txt'</span>

<span class="c"># 아래와 같이 precondition이 true여서 계획이 성립됨</span>
<span class="c">#</span>
<span class="c"># Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:</span>
<span class="c"># -/+ destroy and then create replacement</span>
<span class="c">#</span>
<span class="c"># Terraform will perform the following actions:</span>
<span class="c"># (이하 생략)  </span>

terraform plan <span class="nt">-var</span><span class="o">=</span><span class="s1">'file_name=step7.txt'</span>
  
<span class="c"># step0.txt ~ step6.txt 이외의 파일명인 step7.txt가 입력되어서 아래와 같이 에러가 발생함</span>
<span class="c">#</span>
<span class="c"># Planning failed. Terraform encountered an error while generating this plan.</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="마치며">마치며</h1>

<p>이상과 같이 첫주차에는 테라폼 설치에서 부터 <code class="language-plaintext highlighter-rouge">lifecycle</code> 까지 스터디 하였습니다. 
생각보다 외워야 하는 부분이 많아서 나중에 다시 확인하기 위해 키워드 위주로 정리하여 보았습니다.
HCL을 통해 선언적으로 .tf 파일을 만들면 알아서 계획을 만들고 프로비저닝 해준다니 참 똑똑한 도구인것 같습니다. 
앞으로 배우는 내용들도 재밌을것 같아 기대됩니다.</p>]]></content><author><name></name></author><category term="terraform" /><category term="terraform," /><category term="cloud," /><category term="aws" /><summary type="html"><![CDATA[앞으로 몇 주간에 걸쳐 테라폼 기초 입문 실습 스터디에 참여하면서 배운 내용을 정리하려 합니다. 이번 글의 주제는 테라폼의 기본 사용법이며 "테라폼으로 시작하는 IaC" 책을 기준으로 정리하였습니다.]]></summary></entry></feed>